var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",1,[[["acautomaton"]],["fullacautomaton"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",2,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",2,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",2,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",2,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",2,N],[10,"pattern","","Returns the pattern indexed at `i`.",2,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",3,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",3,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",3,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",3,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",3,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",3,[[["self"],["f"]]]],[11,"new","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",4,[[["self"]],["fullacautomaton"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"next_state","","",1,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",1,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",1,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",1,N],[11,"patterns","","",1,N],[11,"pattern","","",1,[[["self"],["usize"]],["p"]]],[11,"next_state","","",4,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",4,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",4,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",4,N],[11,"patterns","","",4,N],[11,"pattern","","",4,[[["self"],["usize"]],["p"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"clone","","",0,[[["self"]],["match"]]],[11,"clone","","",1,[[["self"]],["fullacautomaton"]]],[11,"clone","","",4,[[["self"]],["acautomaton"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"next","","",5,[[["self"]],["option",["match"]]]],[11,"next","","",7,[[["self"]],["option",["result"]]]],[11,"next","","",6,[[["self"]],["option",["match"]]]],[11,"next","","",8,[[["self"]],["option",["result"]]]],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"from_iter","","Create an automaton from an iterator of strings.",4,[[["t"]],["acautomaton"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Matches"],[3,"MatchesOverlapping"],[3,"StreamMatches"],[3,"StreamMatchesOverlapping"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["arrayref"]={"doc":"This package contains just four macros, which enable the creation of array references to portions of arrays or slices (or things that can be sliced).","items":[[14,"array_ref","arrayref","You can use `array_ref` to generate an array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",N,N],[14,"array_refs","","You can use `array_refs` to generate a series of array references to an input array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping arrays. `array_refs` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array.  This macro will never panic, since the sizes are all checked at compile time.",N,N],[14,"mut_array_refs","","You can use `mut_array_refs` to generate a series of mutable array references to an input mutable array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping mutable array references.  Like `array_refs!`, `mut_array_refs!` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array. This macro will never panic, since the sizes are all checked at compile time.",N,N],[14,"array_mut_ref","","You can use `array_mut_ref` to generate a mutable array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec).",N,N]],"paths":[]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"default","","",3,[[],["backtrace"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["base64"]={"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"DecodeError","","Errors that can occur while decoding.",N,N],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,N],[13,"InvalidLength","","The length of the input is invalid.",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,N],[4,"LineEnding","","Line ending used in optional line wrapping.",N,N],[13,"LF","","Unix-style \\n",2,N],[13,"CRLF","","Windows-style \\r\\n",2,N],[4,"LineWrap","","Line wrap configuration.",N,N],[13,"NoWrap","","Don't wrap.",3,N],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",N,[[["t"],["config"],["string"]]]],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",N,N],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[5,"decode_config_slice","","Decode the input into the provided output slice.",N,N],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",N,N],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",N,N],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",N,N],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,N],[11,"with_config","","Create a `Base64Display` with the provided config.",5,N],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,N],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,N],[17,"STANDARD","base64","Standard character set with padding.",N,N],[17,"STANDARD_NO_PAD","","Standard character set without padding.",N,N],[17,"MIME","","As per standards for MIME encoded messages",N,N],[17,"URL_SAFE","","URL-safe character set with padding",N,N],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",N,N],[17,"CRYPT","","As per `crypt(3)` requirements",N,N],[11,"new","","Create a new `Config`.",6,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","base64::display","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"clone","base64","",0,[[["self"]],["decodeerror"]]],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"clone","","",2,[[["self"]],["lineending"]]],[11,"clone","","",3,[[["self"]],["linewrap"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"eq","base64::display","",4,[[["self"],["displayerror"]],["bool"]]],[11,"eq","base64","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"fmt","base64::display","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","base64","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","base64::display","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","base64","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["block_buffer"]={"doc":"","items":[[3,"UnpadError","block_buffer","Error for indicating failed unpadding process",N,N],[3,"BlockBuffer128","","",N,N],[3,"BlockBuffer256","","",N,N],[3,"BlockBuffer512","","",N,N],[3,"BlockBuffer1024","","",N,N],[3,"BlockBuffer576","","",N,N],[3,"BlockBuffer832","","",N,N],[3,"BlockBuffer1088","","",N,N],[3,"BlockBuffer1152","","",N,N],[3,"BlockBuffer1344","","",N,N],[4,"ZeroPadding","","",N,N],[4,"Pkcs7","","",N,N],[4,"AnsiX923","","",N,N],[4,"Iso7816","","",N,N],[8,"Padding","","Trait for padding messages divided into blocks",N,N],[10,"pad","","Pads `block` filled with data up to `pos`",0,N],[8,"Unpadding","","Trait for extracting oringinal message from padded medium",N,N],[10,"unpad","","Unpad given `data` by truncating it according to the used padding. In case of the malformed padding will return `UnpadError`",1,N],[11,"input","","",2,N],[11,"len_padding","","Will pad message with message length in big-endian format",2,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",2,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",2,N],[11,"size","","",2,[[["self"]],["usize"]]],[11,"position","","",2,[[["self"]],["usize"]]],[11,"remaining","","",2,[[["self"]],["usize"]]],[11,"input","","",3,N],[11,"len_padding","","Will pad message with message length in big-endian format",3,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",3,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",3,N],[11,"size","","",3,[[["self"]],["usize"]]],[11,"position","","",3,[[["self"]],["usize"]]],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"input","","",4,N],[11,"len_padding","","Will pad message with message length in big-endian format",4,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",4,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",4,N],[11,"size","","",4,[[["self"]],["usize"]]],[11,"position","","",4,[[["self"]],["usize"]]],[11,"remaining","","",4,[[["self"]],["usize"]]],[11,"input","","",5,N],[11,"len_padding","","Will pad message with message length in big-endian format",5,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",5,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",5,N],[11,"size","","",5,[[["self"]],["usize"]]],[11,"position","","",5,[[["self"]],["usize"]]],[11,"remaining","","",5,[[["self"]],["usize"]]],[11,"input","","",6,N],[11,"len_padding","","Will pad message with message length in big-endian format",6,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",6,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",6,N],[11,"size","","",6,[[["self"]],["usize"]]],[11,"position","","",6,[[["self"]],["usize"]]],[11,"remaining","","",6,[[["self"]],["usize"]]],[11,"input","","",7,N],[11,"len_padding","","Will pad message with message length in big-endian format",7,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",7,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",7,N],[11,"size","","",7,[[["self"]],["usize"]]],[11,"position","","",7,[[["self"]],["usize"]]],[11,"remaining","","",7,[[["self"]],["usize"]]],[11,"input","","",8,N],[11,"len_padding","","Will pad message with message length in big-endian format",8,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",8,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",8,N],[11,"size","","",8,[[["self"]],["usize"]]],[11,"position","","",8,[[["self"]],["usize"]]],[11,"remaining","","",8,[[["self"]],["usize"]]],[11,"input","","",9,N],[11,"len_padding","","Will pad message with message length in big-endian format",9,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",9,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",9,N],[11,"size","","",9,[[["self"]],["usize"]]],[11,"position","","",9,[[["self"]],["usize"]]],[11,"remaining","","",9,[[["self"]],["usize"]]],[11,"input","","",10,N],[11,"len_padding","","Will pad message with message length in big-endian format",10,[[["self"],["u64"],["f"]]]],[11,"len_padding_u128","","",10,[[["self"],["u64"],["u64"],["f"]]]],[11,"pad_with","","",10,N],[11,"size","","",10,[[["self"]],["usize"]]],[11,"position","","",10,[[["self"]],["usize"]]],[11,"remaining","","",10,[[["self"]],["usize"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"pad","","",12,N],[11,"pad","","",13,N],[11,"pad","","",14,N],[11,"pad","","",15,N],[11,"unpad","","",12,N],[11,"unpad","","",13,N],[11,"unpad","","",14,N],[11,"unpad","","",15,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["unpaderror"]],["bool"]]],[11,"eq","","",12,[[["self"],["zeropadding"]],["bool"]]],[11,"eq","","",13,[[["self"],["pkcs7"]],["bool"]]],[11,"eq","","",14,[[["self"],["ansix923"]],["bool"]]],[11,"eq","","",15,[[["self"],["iso7816"]],["bool"]]],[11,"cmp","","",11,[[["self"],["unpaderror"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["zeropadding"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["pkcs7"]],["ordering"]]],[11,"cmp","","",14,[[["self"],["ansix923"]],["ordering"]]],[11,"cmp","","",15,[[["self"],["iso7816"]],["ordering"]]],[11,"partial_cmp","","",11,[[["self"],["unpaderror"]],["option",["ordering"]]]],[11,"partial_cmp","","",12,[[["self"],["zeropadding"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["pkcs7"]],["option",["ordering"]]]],[11,"partial_cmp","","",14,[[["self"],["ansix923"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["iso7816"]],["option",["ordering"]]]],[11,"hash","","",11,N],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"hash","","",14,N],[11,"hash","","",15,N],[11,"clone","","",11,[[["self"]],["unpaderror"]]],[11,"clone","","",12,[[["self"]],["zeropadding"]]],[11,"clone","","",13,[[["self"]],["pkcs7"]]],[11,"clone","","",14,[[["self"]],["ansix923"]]],[11,"clone","","",15,[[["self"]],["iso7816"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",6,[[],["self"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",8,[[],["self"]]],[11,"default","","",9,[[],["self"]]],[11,"default","","",10,[[],["self"]]]],"paths":[[8,"Padding"],[8,"Unpadding"],[3,"BlockBuffer128"],[3,"BlockBuffer256"],[3,"BlockBuffer512"],[3,"BlockBuffer1024"],[3,"BlockBuffer576"],[3,"BlockBuffer832"],[3,"BlockBuffer1088"],[3,"BlockBuffer1152"],[3,"BlockBuffer1344"],[3,"UnpadError"],[4,"ZeroPadding"],[4,"Pkcs7"],[4,"AnsiX923"],[4,"Iso7816"]]};
searchIndex["byte_tools"]={"doc":"","items":[[5,"read_u32_le","byte_tools","Read the value of a vector of bytes as a u32 value in little-endian format.",N,N],[5,"read_u32_be","","Read the value of a vector of bytes as a u32 value in big-endian format.",N,N],[5,"read_u64_le","","Read the value of a vector of bytes as a u64 value in little-endian format.",N,N],[5,"read_u64_be","","Read the value of a vector of bytes as a u64 value in big-endian format.",N,N],[5,"write_u32_le","","Write a u32 into a vector, which must be 4 bytes long. The value is written in little-endian format.",N,N],[5,"write_u32_be","","Write a u32 into a vector, which must be 4 bytes long. The value is written in big-endian format.",N,N],[5,"write_u64_le","","Write a u64 into a vector, which must be 8 bytes long. The value is written in little-endian format.",N,N],[5,"write_u64_be","","Write a u64 into a vector, which must be 8 bytes long. The value is written in big-endian format.",N,N],[5,"read_u32v_le","","Read a vector of bytes into a vector of u32s. The values are read in little-endian format.",N,N],[5,"read_u32v_be","","Read a vector of bytes into a vector of u32s. The values are read in big-endian format.",N,N],[5,"read_u64v_le","","Read a vector of bytes into a vector of u64s. The values are read in little-endian format.",N,N],[5,"read_u64v_be","","Read a vector of bytes into a vector of u64s. The values are read in big-endian format.",N,N],[5,"write_u32v_le","","Write a vector of u32s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"write_u32v_be","","Write a vector of u32s into a vector of bytes. The values are written in big-endian format.",N,N],[5,"write_u64v_le","","Write a vector of u64s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"write_u64v_be","","Write a vector of u64s into a vector of bytes. The values are written in little-endian format.",N,N],[5,"copy_memory","","Copy bytes from src to dest",N,N],[5,"zero","","Zero all bytes in dst",N,N],[5,"set","","Sets all bytes in `dst` equal to `value`",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"default","","",4,[[],["littleendian"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"new","","Creates a new `Chain` sequencing the provided values.",1,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",1,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",1,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",1,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",1,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",1,N],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",2,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",2,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",2,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",3,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",3,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",3,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",4,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",4,[[["self"],["usize"]]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",5,[[["self"]],["b"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",6,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",6,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[10,"advance","","Advance the internal cursor of the Buf",6,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",7,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",7,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",8,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",9,N],[10,"into_buf","","Creates a `Buf` from a value.",9,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",10,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",10,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",10,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",10,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",10,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",10,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",10,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",10,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",10,N],[11,"split_off","","Splits the bytes into two at the given index.",10,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",10,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",10,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",10,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",10,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",10,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",10,N],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",11,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",11,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",11,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",11,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",11,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",11,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",11,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",11,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",11,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",11,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",11,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",11,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",11,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",11,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",11,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",11,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",11,[[["self"],["bytesmut"]]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",6,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",6,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[10,"advance","bytes","Advance the internal cursor of the Buf",6,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",7,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",7,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",9,N],[10,"into_buf","","Creates a `Buf` from a value.",9,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","bytes::buf","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"default","bytes","",12,[[],["bigendian"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"clone","","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"remaining","bytes::buf","",1,[[["self"]],["usize"]]],[11,"bytes","","",1,N],[11,"advance","","",1,[[["self"],["usize"]]]],[11,"bytes_vec","","",1,N],[11,"remaining","","",4,[[["self"]],["usize"]]],[11,"bytes","","",4,N],[11,"advance","","",4,[[["self"],["usize"]]]],[11,"remaining_mut","","",1,[[["self"]],["usize"]]],[11,"bytes_mut","","",1,N],[11,"advance_mut","","",1,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",1,N],[11,"remaining_mut","bytes","",11,[[["self"]],["usize"]]],[11,"advance_mut","","",11,[[["self"],["usize"]]]],[11,"bytes_mut","","",11,N],[11,"put_slice","","",11,N],[11,"put_u8","","",11,[[["self"],["u8"]]]],[11,"put_i8","","",11,[[["self"],["i8"]]]],[11,"from_buf","","",10,[[["t"]],["self"]]],[11,"from_buf","","",11,[[["t"]],["self"]]],[11,"into_buf","","",10,N],[11,"into_buf","","",11,N],[11,"clone","","",10,[[["self"]],["bytes"]]],[11,"clone","","",11,[[["self"]],["bytesmut"]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"from","","",10,[[["bytesmut"]],["bytes"]]],[11,"from","","",10,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",10,[[["string"]],["bytes"]]],[11,"from","","",10,N],[11,"from","","",10,[[["str"]],["bytes"]]],[11,"from","","",11,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",11,[[["string"]],["bytesmut"]]],[11,"from","","",11,N],[11,"from","","",11,[[["str"]],["bytesmut"]]],[11,"from","","",11,[[["bytes"]],["bytesmut"]]],[11,"next","bytes::buf","",2,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",2,N],[11,"as_ref","bytes","",10,N],[11,"as_ref","","",11,N],[11,"partial_cmp","","",10,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,N],[11,"partial_cmp","","",11,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["t"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,N],[11,"partial_cmp","","",10,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["t"]],["option",["ordering"]]]],[11,"default","","",10,[[],["bytes"]]],[11,"default","","",11,[[],["bytesmut"]]],[11,"as_mut","","",11,N],[11,"eq","","",10,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",11,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",11,N],[11,"eq","","",11,[[["self"],["str"]],["bool"]]],[11,"eq","","",11,[[["self"],["vec"]],["bool"]]],[11,"eq","","",11,[[["self"],["string"]],["bool"]]],[11,"eq","","",11,[[["self"],["t"]],["bool"]]],[11,"eq","","",10,N],[11,"eq","","",10,[[["self"],["str"]],["bool"]]],[11,"eq","","",10,[[["self"],["vec"]],["bool"]]],[11,"eq","","",10,[[["self"],["string"]],["bool"]]],[11,"eq","","",10,[[["self"],["t"]],["bool"]]],[11,"eq","","",10,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",11,[[["self"],["bytes"]],["bool"]]],[11,"into_iter","","",10,N],[11,"into_iter","","",11,N],[11,"cmp","","",10,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["bytesmut"]],["ordering"]]],[11,"deref","","",10,N],[11,"deref","","",11,N],[11,"deref_mut","","",11,N],[11,"fmt","bytes::buf","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","bytes","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"from_iter","","",11,[[["t"]],["self"]]],[11,"from_iter","","",10,[[["t"]],["self"]]],[11,"write_str","","",11,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",11,[[["self"],["arguments"]],["result"]]],[11,"borrow","","",10,N],[11,"borrow","","",11,N],[11,"read","bytes::buf","",3,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"borrow_mut","bytes","",11,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[3,"Bytes"],[3,"BytesMut"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono: Date and Time for Rust","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"Date","","ISO 8601 calendar date with time zone.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",N,N],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",N,N],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,N],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,N],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,N],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,N],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",1,N],[13,"Tue","","Tuesday.",1,N],[13,"Wed","","Wednesday.",1,N],[13,"Thu","","Thursday.",1,N],[13,"Fri","","Friday.",1,N],[13,"Sat","","Saturday.",1,N],[13,"Sun","","Sunday.",1,N],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",N,N],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",N,N],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",N,N],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,N],[13,"Single","","Given local time representation has a single unique result.",2,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,N],[11,"today","","Returns a `Date` which corresponds to the current date.",3,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,[[],["datetime",["utc"]]]],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,[[["self"]],["i32"]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,[[["self"]],["i32"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",5,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",5,[[],["datetime",["local"]]]],[8,"Offset","","The offset from the local time to UTC.",N,N],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",6,[[["self"]],["fixedoffset"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",7,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",7,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",7,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",7,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",7,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",7,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",7,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",7,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",7,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",7,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",7,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,[[["self"],["naivedatetime"]],["datetime"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[3,"IsoWeek","","ISO 8601 week.",N,N],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",N,N],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",8,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",8,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",8,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",8,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",8,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",8,[[["self"]],["option",["naivedate"]]]],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",8,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",8,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",8,[[["self"],["naivedate"]],["oldduration"]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number for this ISO week.",9,[[["self"]],["i32"]]],[11,"week","","Returns the ISO week number starting from 1.",9,[[["self"]],["u32"]]],[11,"week0","","Returns the ISO week number starting from 0.",9,[[["self"]],["u32"]]],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",10,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",10,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",10,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,N],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,N],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",10,[[["self"],["naivetime"]],["oldduration"]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",10,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",11,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",11,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",11,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",11,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",11,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",11,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",11,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",11,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",11,[[["self"]],["u32"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",11,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"from_utc","chrono","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",12,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",12,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",12,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",12,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",12,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",12,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",12,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",12,N],[11,"timezone","","Retrieves an associated time zone.",12,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",12,[[["self"],["tz2"]],["date"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date.",12,[[["self"],["oldduration"]],["option",["date"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",12,[[["self"],["oldduration"]],["option",["date"]]]],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",12,[[["self"],["date"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC date.",12,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",12,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",12,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",13,N],[11,"date","","Retrieves a date component.",13,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",13,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",13,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",13,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",13,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",13,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",13,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",13,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",13,N],[11,"timezone","","Retrieves an associated time zone.",13,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",13,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",13,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",13,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",13,[[["self"],["datetime"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",13,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",13,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",13,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",13,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",13,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",13,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",13,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",13,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",13,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[0,"format","","Formatting (and parsing) utilities for date and time.",N,N],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",14,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear","","Year in the ISO week date.",14,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"month","","Month (1--12).",14,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,N],[12,"weekday","","Day of the week.",14,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,N],[12,"minute","","Minute number (0--59).",14,N],[12,"second","","Second number (0--60, accounting for leap seconds).",14,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,N],[12,"offset","","Offset from the local time to UTC, in seconds.",14,N],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",N,N],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",N,N],[3,"ParseError","","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",15,N],[13,"Zero","","Zero (`0`) padding.",15,N],[13,"Space","","Space padding.",15,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"Month","","Month (FW=PW=2).",16,N],[13,"Day","","Day of the month (FW=PW=2).",16,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,N],[13,"Ordinal","","Day of the year (FW=PW=3).",16,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,N],[13,"Internal","","Internal uses only.",16,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",17,N],[13,"LongMonthName","","Full month names.",17,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,N],[13,"LongWeekdayName","","Full day of the week names.",17,N],[13,"LowerAmPm","","AM/PM.",17,N],[13,"UpperAmPm","","AM/PM.",17,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,N],[13,"TimezoneName","","Timezone name.",17,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,N],[13,"Internal","","Internal uses only.",17,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",18,N],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,N],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,N],[13,"Fixed","","Fixed-format item.",18,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[11,"new","","Returns the initial value of parsed parts.",14,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,[[["str"]],["strftimeitems"]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",20,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",20,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[17,"MIN_DATE","chrono","The minimum possible `Date`.",N,N],[17,"MAX_DATE","","The maximum possible `Date`.",N,N],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",N,N],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",21,[[["self"],["u16"]],["self"]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",21,[[["self"],["u16"]],["self"]]],[8,"Datelike","","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",22,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",22,N],[10,"month","","Returns the month number starting from 1.",22,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",22,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",22,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",22,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",22,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",22,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",22,[[["self"]],["weekday"]]],[10,"iso_week","","Returns the ISO week.",22,[[["self"]],["isoweek"]]],[10,"with_year","","Makes a new value with the year number changed.",22,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",22,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",22,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",22,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",22,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",22,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",22,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, Year 1 (aka Day 1) in the proleptic Gregorian calendar.",22,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",23,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",23,N],[10,"minute","","Returns the minute number from 0 to 59.",23,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",23,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",23,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",23,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",23,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",23,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",23,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",23,[[["self"]],["u32"]]],[11,"succ","","The next day in the week.",1,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",1,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,[[["self"]],["u32"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","chrono::offset","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","chrono::naive","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","chrono::format","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","chrono::format::strftime","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"mul","chrono","",24,[[["self"],["i32"]],["duration"]]],[11,"div","","",24,[[["self"],["i32"]],["duration"]]],[11,"eq","","",24,[[["self"],["duration"]],["bool"]]],[11,"ne","","",24,[[["self"],["duration"]],["bool"]]],[11,"clone","","",24,[[["self"]],["duration"]]],[11,"add","","",24,[[["self"],["duration"]],["duration"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"neg","","",24,[[["self"]],["duration"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","",24,[[["self"],["duration"]],["duration"]]],[11,"cmp","","",24,[[["self"],["duration"]],["ordering"]]],[11,"partial_cmp","","",24,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["duration"]],["bool"]]],[11,"le","","",24,[[["self"],["duration"]],["bool"]]],[11,"gt","","",24,[[["self"],["duration"]],["bool"]]],[11,"ge","","",24,[[["self"],["duration"]],["bool"]]],[11,"fix","chrono::offset","",3,[[["self"]],["fixedoffset"]]],[11,"fix","","",4,[[["self"]],["fixedoffset"]]],[11,"from_offset","","",3,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["utc"]]],[11,"from_offset","","",4,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_offset","","",5,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",5,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",5,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",5,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",5,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",5,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",5,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",5,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",5,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[11,"year","chrono::naive","Returns the year number in the calendar date.",8,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",8,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",8,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",8,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",8,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",8,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",8,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",8,[[["self"]],["weekday"]]],[11,"iso_week","","",8,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",8,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",8,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"year","","Returns the year number in the calendar date.",11,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",11,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",11,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",11,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",11,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",11,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",11,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",11,[[["self"]],["weekday"]]],[11,"iso_week","","",11,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",11,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"year","chrono","",12,[[["self"]],["i32"]]],[11,"month","","",12,[[["self"]],["u32"]]],[11,"month0","","",12,[[["self"]],["u32"]]],[11,"day","","",12,[[["self"]],["u32"]]],[11,"day0","","",12,[[["self"]],["u32"]]],[11,"ordinal","","",12,[[["self"]],["u32"]]],[11,"ordinal0","","",12,[[["self"]],["u32"]]],[11,"weekday","","",12,[[["self"]],["weekday"]]],[11,"iso_week","","",12,[[["self"]],["isoweek"]]],[11,"with_year","","",12,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",12,[[["self"],["u32"]],["option",["date"]]]],[11,"year","","",13,[[["self"]],["i32"]]],[11,"month","","",13,[[["self"]],["u32"]]],[11,"month0","","",13,[[["self"]],["u32"]]],[11,"day","","",13,[[["self"]],["u32"]]],[11,"day0","","",13,[[["self"]],["u32"]]],[11,"ordinal","","",13,[[["self"]],["u32"]]],[11,"ordinal0","","",13,[[["self"]],["u32"]]],[11,"weekday","","",13,[[["self"]],["weekday"]]],[11,"iso_week","","",13,[[["self"]],["isoweek"]]],[11,"with_year","","",13,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","chrono::naive","Returns the hour number from 0 to 23.",10,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",10,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",10,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",10,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",10,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",10,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",10,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",10,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",10,[[["self"]],["u32"]]],[11,"hour","","Returns the hour number from 0 to 23.",11,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",11,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","chrono","",13,[[["self"]],["u32"]]],[11,"minute","","",13,[[["self"]],["u32"]]],[11,"second","","",13,[[["self"]],["u32"]]],[11,"nanosecond","","",13,[[["self"]],["u32"]]],[11,"with_hour","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",13,[[["self"],["u32"]],["option",["datetime"]]]],[11,"clone","chrono::offset","",2,[[["self"]],["localresult"]]],[11,"clone","","",3,[[["self"]],["utc"]]],[11,"clone","","",4,[[["self"]],["fixedoffset"]]],[11,"clone","","",5,[[["self"]],["local"]]],[11,"clone","chrono::naive","",8,[[["self"]],["naivedate"]]],[11,"clone","","",9,[[["self"]],["isoweek"]]],[11,"clone","","",10,[[["self"]],["naivetime"]]],[11,"clone","","",11,[[["self"]],["naivedatetime"]]],[11,"clone","chrono","",12,[[["self"]],["date"]]],[11,"clone","","",0,[[["self"]],["secondsformat"]]],[11,"clone","","",13,[[["self"]],["datetime"]]],[11,"clone","chrono::format","",15,[[["self"]],["pad"]]],[11,"clone","","",16,[[["self"]],["numeric"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"clone","","",17,[[["self"]],["fixed"]]],[11,"clone","","",27,[[["self"]],["internalfixed"]]],[11,"clone","","",18,[[["self"]],["item"]]],[11,"clone","","",28,[[["self"]],["parseerror"]]],[11,"clone","","",14,[[["self"]],["parsed"]]],[11,"clone","chrono::format::strftime","",19,[[["self"]],["strftimeitems"]]],[11,"clone","chrono","",1,[[["self"]],["weekday"]]],[11,"clone","","",25,[[["self"]],["parseweekdayerror"]]],[11,"from","","",13,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",13,[[["systemtime"]],["datetime",["local"]]]],[11,"next","chrono::format::strftime","",19,[[["self"]],["option",["item"]]]],[11,"partial_cmp","chrono::naive","",8,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",8,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",8,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",8,[[["self"],["naivedate"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["isoweek"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"le","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"gt","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"ge","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","chrono","",12,[[["self"],["date"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"default","chrono::format","",14,[[],["parsed"]]],[11,"eq","chrono::offset","",2,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["localresult"]],["bool"]]],[11,"eq","","",3,[[["self"],["utc"]],["bool"]]],[11,"eq","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"eq","chrono::naive","",8,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",8,[[["self"],["naivedate"]],["bool"]]],[11,"eq","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"ne","","",9,[[["self"],["isoweek"]],["bool"]]],[11,"eq","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",10,[[["self"],["naivetime"]],["bool"]]],[11,"eq","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",11,[[["self"],["naivedatetime"]],["bool"]]],[11,"eq","chrono","",12,[[["self"],["date"]],["bool"]]],[11,"eq","","",0,[[["self"],["secondsformat"]],["bool"]]],[11,"eq","","",13,[[["self"],["datetime"]],["bool"]]],[11,"eq","chrono::format","",15,[[["self"],["pad"]],["bool"]]],[11,"eq","","",16,[[["self"],["numeric"]],["bool"]]],[11,"ne","","",16,[[["self"],["numeric"]],["bool"]]],[11,"eq","","",26,[[["self"],["internalnumeric"]],["bool"]]],[11,"eq","","",17,[[["self"],["fixed"]],["bool"]]],[11,"ne","","",17,[[["self"],["fixed"]],["bool"]]],[11,"eq","","",27,[[["self"],["internalfixed"]],["bool"]]],[11,"ne","","",27,[[["self"],["internalfixed"]],["bool"]]],[11,"eq","","",18,[[["self"],["item"]],["bool"]]],[11,"ne","","",18,[[["self"],["item"]],["bool"]]],[11,"eq","","",28,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",28,[[["self"],["parseerror"]],["bool"]]],[11,"eq","","",14,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",14,[[["self"],["parsed"]],["bool"]]],[11,"eq","chrono","",1,[[["self"],["weekday"]],["bool"]]],[11,"eq","","",25,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"ne","","",25,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"cmp","chrono::naive","",8,[[["self"],["naivedate"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["isoweek"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["naivetime"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["naivedatetime"]],["ordering"]]],[11,"cmp","chrono","",12,[[["self"],["date"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["datetime"]],["ordering"]]],[11,"fmt","chrono::offset","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::offset","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::naive","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format::strftime","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono::format","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","chrono","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"sub","chrono::naive","",10,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"sub","","",11,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"sub","chrono","",13,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","chrono::naive","",8,[[["self"],["oldduration"]],["naivedate"]]],[11,"sub","","",8,[[["self"],["naivedate"]],["oldduration"]]],[11,"sub","","",10,[[["self"],["oldduration"]],["naivetime"]]],[11,"sub","","",10,[[["self"],["naivetime"]],["oldduration"]]],[11,"sub","","",11,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"sub","","",11,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"sub","chrono","",12,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",12,[[["self"],["date"]],["oldduration"]]],[11,"sub","","",13,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",13,[[["self"],["datetime"]],["oldduration"]]],[11,"add","chrono::naive","",10,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"add","","",11,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"add","chrono","",13,[[["self"],["fixedoffset"]],["datetime"]]],[11,"add","chrono::naive","",8,[[["self"],["oldduration"]],["naivedate"]]],[11,"add","","",10,[[["self"],["oldduration"]],["naivetime"]]],[11,"add","","",11,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"add","chrono","",12,[[["self"],["oldduration"]],["date"]]],[11,"add","","",13,[[["self"],["oldduration"]],["datetime"]]],[11,"add_assign","chrono::naive","",8,[[["self"],["oldduration"]]]],[11,"add_assign","","",10,[[["self"],["oldduration"]]]],[11,"add_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub_assign","","",8,[[["self"],["oldduration"]]]],[11,"sub_assign","","",10,[[["self"],["oldduration"]]]],[11,"sub_assign","","",11,[[["self"],["oldduration"]]]],[11,"hash","chrono::offset","",4,N],[11,"hash","chrono::naive","",8,N],[11,"hash","","",10,[[["self"],["h"]]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"hash","chrono","",12,[[["self"],["h"]]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"hash","","",1,N],[11,"from_str","chrono::naive","",8,[[["str"]],["parseresult",["naivedate"]]]],[11,"from_str","","",10,[[["str"]],["parseresult",["naivetime"]]]],[11,"from_str","","",11,[[["str"]],["parseresult",["naivedatetime"]]]],[11,"from_str","chrono","",13,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",13,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",13,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"description","chrono::format","",28,[[["self"]],["str"]]],[11,"from_i64","chrono","",1,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["weekday"]]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",24,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",24,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",24,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",24,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",24,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",24,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",24,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",24,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",24,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",24,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",24,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",24,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",24,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",24,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",24,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",24,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",24,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",24,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",24,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",24,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",24,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",24,[[["self"]],["result",["duration","outofrangeerror"]]]]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"],[3,"ParseWeekdayError"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"]]};
searchIndex["config"]={"doc":"Config organizes hierarchical or layered configurations for Rust applications.","items":[[3,"Config","config","A prioritized configuration repository. It maintains a set of configuration sources, fetches values to populate those, and provides them according to the source's priority.",N,N],[12,"cache","","Root of the cached configuration.",0,N],[3,"Value","","A configuration value.",N,N],[12,"kind","","Underlying kind of the configuration value.",1,N],[3,"File","","",N,N],[3,"Environment","","",N,N],[4,"ConfigError","","Represents all possible errors that can occur when working with configuration.",N,N],[13,"Frozen","","Configuration is frozen and no further mutations can be made.",2,N],[13,"NotFound","","Configuration property was not found",2,N],[13,"PathParse","","Configuration path could not be parsed.",2,N],[13,"FileParse","","Configuration could not be parsed from file.",2,N],[12,"uri","config::ConfigError","The URI used to access the file (if not loaded from a string). Example: `/path/to/config.json`",2,N],[12,"cause","","The captured error from attempting to parse the file in its desired format. This is the actual error object from the library used for the parsing.",2,N],[13,"Type","config","Value could not be converted into the requested type.",2,N],[12,"origin","config::ConfigError","The URI that references the source that the value came from. Example: `/path/to/config.json` or `Environment` or `etcd://localhost`",2,N],[12,"unexpected","","What we found when parsing the value",2,N],[12,"expected","","What was expected when parsing the value",2,N],[12,"key","","The key in the configuration hash of this value (if available where the error is generated).",2,N],[13,"Message","config","Custom message",2,N],[13,"Foreign","","Unadorned error from a foreign origin.",2,N],[4,"FileFormat","","",N,N],[13,"Toml","","TOML (parsed with toml)",3,N],[13,"Json","","JSON (parsed with serde_json)",3,N],[13,"Yaml","","YAML (parsed with yaml_rust)",3,N],[13,"Hjson","","HJSON (parsed with serde_hjson)",3,N],[11,"new","","Create a new value instance that will remember its source uri.",1,[[["option",["string"]],["v"]],["self"]]],[11,"try_into","","Attempt to deserialize this value into the requested type.",1,[[["self"]],["result",["configerror"]]]],[11,"into_bool","","Returns `self` as a bool, if possible.",1,[[["self"]],["result",["bool","configerror"]]]],[11,"into_int","","Returns `self` into an i64, if possible.",1,[[["self"]],["result",["i64","configerror"]]]],[11,"into_float","","Returns `self` into a f64, if possible.",1,[[["self"]],["result",["f64","configerror"]]]],[11,"into_str","","Returns `self` into a str, if possible.",1,[[["self"]],["result",["string","configerror"]]]],[11,"into_array","","Returns `self` into an array, if possible",1,[[["self"]],["result",["vec","configerror"]]]],[11,"into_table","","If the `Value` is a Table, returns the associated Map.",1,[[["self"]],["result",["hashmap","configerror"]]]],[11,"new","","",0,[[],["self"]]],[11,"merge","","Merge in a configuration property source.",0,[[["self"],["t"]],["result",["config","configerror"]]]],[11,"refresh","","Refresh the configuration cache with fresh data from added sources.",0,[[["self"]],["result",["config","configerror"]]]],[11,"set_default","","",0,[[["self"],["str"],["t"]],["result",["config","configerror"]]]],[11,"set","","",0,[[["self"],["str"],["t"]],["result",["config","configerror"]]]],[11,"get","","",0,[[["self"],["str"]],["result",["configerror"]]]],[11,"get_str","","",0,[[["self"],["str"]],["result",["string","configerror"]]]],[11,"get_int","","",0,[[["self"],["str"]],["result",["i64","configerror"]]]],[11,"get_float","","",0,[[["self"],["str"]],["result",["f64","configerror"]]]],[11,"get_bool","","",0,[[["self"],["str"]],["result",["bool","configerror"]]]],[11,"get_table","","",0,[[["self"],["str"]],["result",["hashmap","configerror"]]]],[11,"get_array","","",0,[[["self"],["str"]],["result",["vec","configerror"]]]],[11,"try_into","","Attempt to deserialize the entire configuration into the requested type.",0,[[["self"]],["result",["configerror"]]]],[11,"deserialize","","",0,[[["self"]],["result",["configerror"]]]],[11,"from_str","","",4,[[["str"],["fileformat"]],["self"]]],[11,"new","","",4,[[["str"],["fileformat"]],["self"]]],[11,"with_name","","Given the basename of a file, will attempt to locate a file by setting its extension to a registered format.",4,[[["str"]],["self"]]],[11,"format","","",4,[[["self"],["fileformat"]],["self"]]],[11,"required","","",4,[[["self"],["bool"]],["self"]]],[11,"new","","",5,[[],["self"]]],[11,"with_prefix","","",5,[[["str"]],["self"]]],[11,"prefix","","",5,[[["self"],["string"]],["self"]]],[11,"separator","","",5,[[["self"],["string"]],["self"]]],[8,"Source","","Describes a generic source of configuration properties.",N,N],[10,"clone_into_box","","",6,[[["self"]],["box",["source"]]]],[10,"collect","","Collect all configuration properties available from this source and return a HashMap.",6,[[["self"]],["result",["hashmap","configerror"]]]],[11,"collect_to","","",6,[[["self"],["value"]],["result",["configerror"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"clone_into_box","","",0,[[["self"]],["box",["source"]]]],[11,"collect","","",0,[[["self"]],["result",["hashmap","configerror"]]]],[11,"clone_into_box","","",4,[[["self"]],["box",["source"]]]],[11,"collect","","",4,[[["self"]],["result",["hashmap","configerror"]]]],[11,"clone_into_box","","",5,[[["self"]],["box",["source"]]]],[11,"collect","","",5,[[["self"]],["result",["hashmap","configerror"]]]],[11,"clone","","",1,[[["self"]],["value"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"clone","","",3,[[["self"]],["fileformat"]]],[11,"clone","","",4,[[["self"]],["file"]]],[11,"clone","","",5,[[["self"]],["environment"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","",4,[[["path"]],["self"]]],[11,"from","","",4,[[["pathbuf"]],["self"]]],[11,"default","","",1,[[],["value"]]],[11,"default","","",0,[[],["config"]]],[11,"default","","",5,[[],["environment"]]],[11,"eq","","",1,[[["self"],["value"]],["bool"]]],[11,"ne","","",1,[[["self"],["value"]],["bool"]]],[11,"eq","","",3,[[["self"],["fileformat"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"deserialize","","",1,[[["d"]],["result",["value"]]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"deserialize_any","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_bool","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i8","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i16","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u8","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u16","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_str","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_string","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_option","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_char","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",1,N],[11,"deserialize_unit","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",1,N],[11,"deserialize_newtype_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"collect_to","","",6,[[["self"],["value"]],["result",["configerror"]]]]],"paths":[[3,"Config"],[3,"Value"],[4,"ConfigError"],[4,"FileFormat"],[3,"File"],[3,"Environment"],[8,"Source"]]};
searchIndex["crunchy"]={"doc":"The crunchy unroller - deterministically unroll constant loops. For number \"crunching\".","items":[[14,"unroll","crunchy","Unroll the given for loop",N,N]],"paths":[]};
searchIndex["digest"]={"doc":"This crate provides traits for describing funcionality of cryptographic hash functions.","items":[[3,"InvalidOutputSize","digest","The error type for variable hasher initialization",N,N],[3,"InvalidBufferLength","","The error type for variable hasher result",N,N],[3,"InvalidLength","","The error type for variable digest output",N,N],[8,"Digest","","The `Digest` trait specifies an interface common for digest functions.",N,N],[11,"new","","Create new hasher instance",0,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",0,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",0,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",0,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",0,[[["str"]],["genericarray",["u8"]]]],[8,"Input","","Trait for processing input data",N,N],[10,"process","","Digest input data. This method can be called repeatedly for use with streaming messages.",1,N],[8,"BlockInput","","Trait to indicate that digest function processes data in blocks of size `BlockSize`. Main usage of this trait is for implementing HMAC generically.",N,N],[16,"BlockSize","","",2,N],[8,"FixedOutput","","Trait for returning digest result with the fixed size",N,N],[16,"OutputSize","","",3,N],[10,"fixed_result","","Retrieve the digest result. This method consumes digest instance.",3,[[["self"]],["genericarray",["u8"]]]],[8,"VariableOutput","","Trait for returning digest result with the varaible size",N,N],[10,"new","","Create new hasher instance with given output size. Will return `Err(InvalidLength)` in case if hasher can not work with the given output size. Will always return an error if output size equals to zero.",4,[[["usize"]],["result",["invalidlength"]]]],[10,"output_size","","Get output size of the hasher instance provided to the `new` method",4,[[["self"]],["usize"]]],[10,"variable_result","","Retrieve the digest result into provided buffer. Length of the buffer must be equal to output size provided to the `new` method, otherwise `Err(InvalidLength)` will be returned",4,N],[8,"XofReader","","Trait for decribing readers which are used to extract extendable output from the resulting state of hash function.",N,N],[10,"read","","Read output into the `buffer`. Can be called unlimited number of times.",5,N],[8,"ExtendableOutput","","Trait which describes extendable output (XOF) of hash functions. Using this trait you first need to get structure which implements `XofReader`, using which you can read extendable output.",N,N],[16,"Reader","","",6,N],[10,"xof_result","","Finalize hash function and return XOF reader",6,N],[14,"impl_opaque_debug","","Macro for defining opaque `Debug` implementation. It will use the following format: \"HasherName { ... }\". While it's convinient to have it (e.g. for including in other structs), it could be undesirable to leak internall state, which can happen for example through uncareful logging.",N,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["invalidlength"]],["bool"]]],[11,"cmp","","",9,[[["self"],["invalidlength"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["invalidlength"]],["option",["ordering"]]]],[11,"hash","","",9,N],[11,"clone","","",7,[[["self"]],["invalidoutputsize"]]],[11,"clone","","",8,[[["self"]],["invalidbufferlength"]]],[11,"clone","","",9,[[["self"]],["invalidlength"]]],[11,"default","","",7,[[],["invalidoutputsize"]]],[11,"default","","",8,[[],["invalidbufferlength"]]],[11,"default","","",9,[[],["invalidlength"]]],[11,"new","","Create new hasher instance",0,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",0,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",0,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",0,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",0,[[["str"]],["genericarray",["u8"]]]]],"paths":[[8,"Digest"],[8,"Input"],[8,"BlockInput"],[8,"FixedOutput"],[8,"VariableOutput"],[8,"XofReader"],[8,"ExtendableOutput"],[3,"InvalidOutputSize"],[3,"InvalidBufferLength"],[3,"InvalidLength"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize"]]]],[11,"fill_buf","","",0,[[["self"]],["result"]]],[11,"consume","","",0,[[["self"],["usize"]]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[4,"Either"]]};
searchIndex["failure"]={"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Context","","An error with context around it.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,[[],["backtrace"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,[[["e"]],["self"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[6,"Fallible","","A common result with an `Error`.",N,N],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",5,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,[[["self"],["f"]],["result",["context"]]]],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",6,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,[[["self"]],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",6,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",6,[[["self"]],["causes"]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"cause","","",2,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"next","","",7,[[["self"]],["option",["fail"]]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[11,"default","","",0,[[],["backtrace"]]],[11,"default","","",1,[[],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"]={"doc":"","items":[[24,"Fail","failure_derive","",N,N]],"paths":[]};
searchIndex["fake_simd"]={"doc":"","items":[[3,"u32x4","fake_simd","",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[12,"3","","",0,N],[3,"u64x2","","",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"sub","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"eq","","",0,[[["self"],["u32x4"]],["bool"]]],[11,"ne","","",0,[[["self"],["u32x4"]],["bool"]]],[11,"add","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"add","","",1,[[["self"],["u64x2"]],["u64x2"]]],[11,"bitand","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitor","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitxor","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"shl","","",0,[[["self"],["usize"]],["u32x4"]]],[11,"shl","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"shr","","",0,[[["self"],["usize"]],["u32x4"]]],[11,"shr","","",0,[[["self"],["u32x4"]],["u32x4"]]],[11,"clone","","",0,[[["self"]],["u32x4"]]],[11,"clone","","",1,[[["self"]],["u64x2"]]]],"paths":[[3,"u32x4"],[3,"u64x2"]]};
searchIndex["futures"]={"doc":"Abstractions for asynchronous programming.","items":[[8,"Future","futures","A future represents an asychronous computation that may fail.",N,N],[16,"Item","","A successful value",0,N],[16,"Error","","An error",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["self"],["context"]],["result",["async"]]]],[8,"IntoFuture","","Types that can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",1,N],[16,"Item","","The item that the future may resolve with.",1,N],[16,"Error","","The error that the future may resolve with.",1,N],[10,"into_future","","Consumes this object and produces a future.",1,N],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",N,N],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,[[["self"]],["errinto"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",2,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",2,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,[[["self"],["b"]],["select"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"into_stream","","Convert this future into a single element stream.",2,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,[[["self"]],["flatten"]]],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,[[["self"]],["flattensink"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",2,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,[[["self"],["f"]],["inspecterr"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,[[["self"]],["shared"]]],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,[[["self"],["f"]],["recover"]]],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,[[["self"],["e"]],["withexecutor"]]],[8,"Stream","","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",3,N],[16,"Error","","Errors yielded by the stream.",3,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"],["context"]],["result",["async"]]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Converts this stream into a `Future`.",4,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,[[["self"]],["collect"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,[[["self"],["f"]],["foreachconcurrent"]]],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,[[["self"]],["errinto"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",4,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",4,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspecterr"]]],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,[[["self"],["f"]],["recover"]]],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",5,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,[[["self"],["context"]],["result",["async"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,N],[10,"poll_flush","","Flush any remaining output from this sink.",5,[[["self"],["context"]],["result",["async"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,[[["self"],["context"]],["result",["async"]]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",6,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",6,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",6,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",6,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",6,[[["self"],["s"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",6,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,[[["self"],["s"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,[[["self"]],["either"]]],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",7,N],[13,"Pending","","Represents that a value is not ready yet.",7,N],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",N,N],[4,"Never","","A type with no possible values.",N,N],[0,"channel","","Cross-task communication.",N,N],[0,"oneshot","futures::channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures::channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[0,"mpsc","futures::channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures::channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[0,"executor","futures","Task execution.",N,N],[3,"BlockingStream","futures::executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",N,N],[3,"LocalPool","","A single-threaded task pool.",N,N],[3,"Spawn","","A future representing the completion of task spawning.",N,N],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,[[["f"]],["result"]]],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Spawn a task onto the default executor.",N,[[["f"]],["spawn"]]],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",N,[[["f"]],["spawnwithhandle"]]],[3,"SpawnError","","Provides the reason that an executor was unable to spawn.",N,N],[8,"Executor","","A task executor.",N,N],[10,"spawn","","Spawn the given task, polling it until completion.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,[[["self"]],["result",["spawnerror"]]]],[0,"future","futures","Asynchronous values.",N,N],[3,"FutureOption","futures::future","A future representing a value which may or may not be present.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[8,"Future","","A future represents an asychronous computation that may fail.",N,N],[16,"Item","","A successful value",0,N],[16,"Error","","An error",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["self"],["context"]],["result",["async"]]]],[8,"IntoFuture","","Types that can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",1,N],[16,"Item","","The item that the future may resolve with.",1,N],[16,"Error","","The error that the future may resolve with.",1,N],[10,"into_future","","Consumes this object and produces a future.",1,N],[5,"err","","Creates a new future that will immediately fail with the given error.",N,[[["e"]],["futureresult"]]],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",N,[[["t"]],["futureresult"]]],[5,"result","","Creates a new future that will immediate resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Empty","","A future which is never resolved.",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[4,"Either","","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",9,N],[13,"Right","","A value of type `R`.",9,N],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",10,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",10,N],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",N,N],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,[[["self"]],["errinto"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",2,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",2,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,[[["self"],["b"]],["select"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"into_stream","","Convert this future into a single element stream.",2,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,[[["self"]],["flatten"]]],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,[[["self"]],["flattensink"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",2,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,[[["self"],["f"]],["inspecterr"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,[[["self"]],["shared"]]],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,[[["self"],["f"]],["recover"]]],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,[[["self"],["e"]],["withexecutor"]]],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[0,"io","futures","Asynchronous I/O.",N,N],[3,"Error","futures::io","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",11,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",11,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",11,N],[13,"ConnectionReset","","The connection was reset by the remote server.",11,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",11,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",11,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",11,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",11,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",11,N],[13,"AlreadyExists","","An entity already exists, often a file.",11,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",11,N],[13,"InvalidInput","","A parameter was incorrect.",11,N],[13,"InvalidData","","Data not valid for the operation were encountered.",11,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",11,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",11,N],[13,"Interrupted","","This operation was interrupted.",11,N],[13,"Other","","Any I/O error not part of this list.",11,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",11,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,[[["self"],["context"]],["result",["async","error"]]]],[10,"poll_close","","Attempt to close the object.",13,[[["self"],["context"]],["result",["async","error"]]]],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,[[["self"],["t"]],["read"]]],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,[[["self"],["t"]],["readexact"]]],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,[[["self"],["vec",["u8"]]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",14,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,[[["self"]],["close"]]],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,[[["self"],["t"]],["writeall"]]],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[0,"never","futures","This module contains the `Never` type.",N,N],[4,"Never","futures::never","A type with no possible values.",N,N],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[8,"Future","futures::prelude","A future represents an asychronous computation that may fail.",N,N],[16,"Item","","A successful value",0,N],[16,"Error","","An error",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["self"],["context"]],["result",["async"]]]],[8,"IntoFuture","","Types that can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",1,N],[16,"Item","","The item that the future may resolve with.",1,N],[16,"Error","","The error that the future may resolve with.",1,N],[10,"into_future","","Consumes this object and produces a future.",1,N],[8,"Stream","","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",3,N],[16,"Error","","Errors yielded by the stream.",3,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"],["context"]],["result",["async"]]]],[4,"Async","","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",7,N],[13,"Pending","","Represents that a value is not ready yet.",7,N],[6,"Poll","","A convenience wrapper for `Result<Async<T>, E>`.",N,N],[4,"Never","","A type with no possible values.",N,N],[0,"task","","Task notification.",N,N],[3,"LocalMap","futures::prelude::task","A map storing task-local data.",N,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"Context","","Information about the currently-running task.",N,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",N,N],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,N],[8,"Executor","futures::prelude","A task executor.",N,N],[10,"spawn","","Spawn the given task, polling it until completion.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Determine whether the executor is able to spawn new tasks.",8,[[["self"]],["result",["spawnerror"]]]],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",5,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,[[["self"],["context"]],["result",["async"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,N],[10,"poll_flush","","Flush any remaining output from this sink.",5,[[["self"],["context"]],["result",["async"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,[[["self"],["context"]],["result",["async"]]]],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",12,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",12,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",12,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",13,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",13,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",13,[[["self"],["context"]],["result",["async","error"]]]],[10,"poll_close","","Attempt to close the object.",13,[[["self"],["context"]],["result",["async","error"]]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",N,N],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",2,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",2,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",2,[[["self"]],["errinto"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",2,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",2,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",2,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two differently-typed futures to complete.",2,[[["self"],["b"]],["select"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",2,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",2,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",2,[[["self"]],["either"]]],[11,"into_stream","","Convert this future into a single element stream.",2,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",2,[[["self"]],["flatten"]]],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",2,[[["self"]],["flattensink"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",2,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",2,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",2,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of a future, passing it on.",2,[[["self"],["f"]],["inspecterr"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",2,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",2,[[["self"]],["shared"]]],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",2,[[["self"],["f"]],["recover"]]],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",2,[[["self"],["e"]],["withexecutor"]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Converts this stream into a `Future`.",4,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,[[["self"]],["collect"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,[[["self"],["f"]],["foreachconcurrent"]]],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,[[["self"]],["errinto"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",4,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",4,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspecterr"]]],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,[[["self"],["f"]],["recover"]]],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",6,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",6,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",6,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",6,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",6,[[["self"],["s"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",6,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,[[["self"],["s"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,[[["self"]],["either"]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",14,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",14,[[["self"],["t"]],["read"]]],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",14,[[["self"],["t"]],["readexact"]]],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",14,[[["self"],["vec",["u8"]]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",14,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",15,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",15,[[["self"]],["close"]]],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",15,[[["self"],["t"]],["writeall"]]],[0,"sink","futures","Asynchronous sinks.",N,N],[8,"Sink","futures::sink","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",5,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",5,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",5,[[["self"],["context"]],["result",["async"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",5,N],[10,"poll_flush","","Flush any remaining output from this sink.",5,[[["self"],["context"]],["result",["async"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",5,[[["self"],["context"]],["result",["async"]]]],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",6,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",6,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",6,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",6,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",6,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",6,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",6,[[["self"],["s"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",6,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",6,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",6,[[["self"],["s"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",6,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",6,[[["self"]],["either"]]],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[0,"stream","futures","Asynchronous streams.",N,N],[8,"Stream","futures::stream","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",3,N],[16,"Error","","Errors yielded by the stream.",3,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"],["context"]],["result",["async"]]]],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"ErrInto","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Converts this stream into a `Future`.",4,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",4,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",4,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",4,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",4,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",4,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",4,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",4,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",4,[[["self"]],["collect"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",4,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",4,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",4,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",4,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",4,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",4,[[["self"],["f"]],["foreachconcurrent"]]],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",4,[[["self"]],["errinto"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",4,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",4,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",4,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",4,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",4,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",4,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",4,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",4,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",4,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",4,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",4,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",4,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",4,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",4,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",4,[[["self"],["f"]],["inspecterr"]]],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",4,[[["self"],["f"]],["recover"]]],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",4,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",4,[[["self"]],["either"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"once","","Creates a stream of single element",N,[[["f"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",N,[[["i"]],["selectall"]]],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",18,N],[12,"1","","",18,N],[3,"SelectAll","","An unbounded set of streams",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[0,"task","futures","Tools for working with tasks.",N,N],[3,"Context","futures::task","Information about the currently-running task.",N,N],[3,"LocalMap","","A map storing task-local data.",N,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",N,N],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",17,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",17,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",17,N],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",16,N],[14,"try_ready","futures","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`.",N,N],[11,"from","futures::prelude","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"into_future","","",19,[[["self"]],["f"]]],[11,"from","futures::channel::oneshot","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into_future","","",20,[[["self"]],["f"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from","futures::channel::mpsc","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","futures::executor","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"into_future","","",35,[[["self"]],["f"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"into_future","","",36,[[["self"]],["f"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into_future","","",39,[[["self"]],["f"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","futures::future","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"into_future","","",41,[[["self"]],["f"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"into_future","","",42,[[["self"]],["f"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into_future","","",43,[[["self"]],["f"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into_future","","",45,[[["self"]],["f"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_future","","",47,[[["self"]],["f"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into_future","","",48,[[["self"]],["f"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into_future","","",49,[[["self"]],["f"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into_future","","",58,[[["self"]],["f"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","futures::io","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_future","","",82,[[["self"]],["f"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","futures::task","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","futures::sink","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into_future","","",89,[[["self"]],["f"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"into_future","","",91,[[["self"]],["f"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into_future","","",92,[[["self"]],["f"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into_future","","",93,[[["self"]],["f"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","futures::stream","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"into_future","","",101,[[["self"]],["f"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"into_future","","",106,[[["self"]],["f"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"into_future","","",107,[[["self"]],["f"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"into_future","","",108,[[["self"]],["f"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"into_future","","",125,[[["self"]],["f"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"into_future","","",135,[[["self"]],["f"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"drop","futures::task","",85,N],[11,"clone","futures::prelude","",19,[[["self"]],["never"]]],[11,"clone","futures::future","",41,[[["self"]],["futureoption"]]],[11,"clone","","",42,[[["self"]],["futureresult"]]],[11,"clone","futures::prelude","",7,[[["self"]],["async"]]],[11,"clone","futures::task","",85,[[["self"]],["waker"]]],[11,"poll_next","futures::prelude","",19,[[["self"],["context"]],["result",["async","never"]]]],[11,"poll_next","futures::future","",9,[[["self"],["context"]],["result",["async"]]]],[11,"eq","futures::prelude","",7,[[["self"],["async"]],["bool"]]],[11,"ne","","",7,[[["self"],["async"]],["bool"]]],[11,"eq","","",19,[[["self"],["never"]],["bool"]]],[11,"from","","",7,[[["t"]],["async"]]],[11,"from","futures::future","",41,[[["option"]],["futureoption"]]],[11,"from","futures::task","",85,[[["arc"]],["waker"]]],[11,"from","futures::future","",42,[[["result"]],["futureresult"]]],[11,"default","futures::task","",86,[[],["atomicwaker"]]],[11,"poll","futures::prelude","",19,[[["self"],["context"]],["result",["async","never"]]]],[11,"poll","futures::future","",41,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",42,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",9,[[["self"],["context"]],["result",["async"]]]],[11,"partial_cmp","futures::prelude","",19,[[["self"],["never"]],["option",["ordering"]]]],[11,"cmp","","",19,[[["self"],["never"]],["ordering"]]],[11,"fmt","futures::task","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::prelude","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::prelude","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::executor","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","futures::io","",11,[[["self"]],["errorkind"]]],[11,"hash","","",11,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",11,[[["self"],["errorkind"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"cmp","","",11,[[["self"],["errorkind"]],["ordering"]]],[11,"from","","",70,[[["intoinnererror"]],["error"]]],[11,"from","","",70,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",70,[[["nulerror"]],["error"]]],[11,"description","","",70,[[["self"]],["str"]]],[11,"cause","","",70,[[["self"]],["option",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","futures::future","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"as_mut","","",9,[[["self"]],["target"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"fold","","",9,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",9,[[["self"]],["usize"]]],[11,"last","","",9,[[["self"]],["option"]]],[11,"nth","","",9,[[["self"],["usize"]],["option"]]],[11,"collect","","",9,[[["self"]],["b"]]],[11,"all","","",9,[[["self"],["f"]],["bool"]]],[11,"deref_mut","","",9,N],[11,"hash","","",9,N],[11,"description","","",9,[[["self"]],["str"]]],[11,"cause","","",9,[[["self"]],["option",["error"]]]],[11,"from","","",9,[[["result"]],["either"]]],[11,"eq","","",9,[[["self"],["either"]],["bool"]]],[11,"ne","","",9,[[["self"],["either"]],["bool"]]],[11,"read","","",9,N],[11,"read_to_end","","",9,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"write","","",9,N],[11,"flush","","",9,[[["self"]],["result",["error"]]]],[11,"clone","","",9,[[["self"]],["either"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_ref","","",9,[[["self"]],["target"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fill_buf","","",9,[[["self"]],["result",["error"]]]],[11,"consume","","",9,N],[11,"extend","","",9,N],[11,"cmp","","",9,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["either"]],["bool"]]],[11,"le","","",9,[[["self"],["either"]],["bool"]]],[11,"gt","","",9,[[["self"],["either"]],["bool"]]],[11,"ge","","",9,[[["self"],["either"]],["bool"]]],[11,"into","","",9,[[["self"]],["result"]]],[11,"drop","futures::channel::oneshot","",20,N],[11,"drop","","",21,N],[11,"drop","futures::channel::mpsc","",28,N],[11,"drop","","",23,N],[11,"drop","","",24,N],[11,"drop","","",29,N],[11,"fmt","futures::channel::oneshot","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","futures::channel::oneshot","",22,[[["self"]],["str"]]],[11,"description","futures::channel::mpsc","",26,[[["self"]],["str"]]],[11,"description","","",27,[[["self"]],["str"]]],[11,"description","","",25,[[["self"]],["str"]]],[11,"clone","","",26,[[["self"]],["trysenderror"]]],[11,"clone","","",23,[[["self"]],["sender"]]],[11,"clone","","",25,[[["self"]],["senderror"]]],[11,"clone","futures::channel::oneshot","",22,[[["self"]],["canceled"]]],[11,"clone","futures::channel::mpsc","",28,[[["self"]],["unboundedsender"]]],[11,"poll_next","","",24,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",29,[[["self"],["context"]],["result",["async"]]]],[11,"eq","","",26,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",26,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","futures::channel::oneshot","",22,[[["self"],["canceled"]],["bool"]]],[11,"eq","futures::channel::mpsc","",25,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",25,[[["self"],["senderror"]],["bool"]]],[11,"poll","futures::channel::oneshot","",20,[[["self"],["context"]],["result",["async","canceled"]]]],[11,"fmt","futures::channel::mpsc","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","futures::executor","",37,N],[11,"drop","","",31,N],[11,"spawn","","",33,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",33,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",37,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"clone","","",37,[[["self"]],["threadpool"]]],[11,"clone","","",33,[[["self"]],["localexecutor"]]],[11,"poll","","",36,[[["self"],["context"]],["result",["async","never"]]]],[11,"poll","","",35,[[["self"],["context"]],["result",["async","never"]]]],[11,"poll","","",39,[[["self"],["context"]],["result",["async"]]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","futures::sink","",95,[[["self"]],["sinkmaperr"]]],[11,"clone","","",96,[[["self"]],["with"]]],[11,"clone","futures::future","",67,[[["self"]],["shared"]]],[11,"clone","futures::io","",73,[[["self"]],["allowstdio"]]],[11,"clone","futures::future","",68,[[["self"]],["sharederror"]]],[11,"clone","futures::sink","",90,[[["self"]],["fanout"]]],[11,"clone","futures::future","",69,[[["self"]],["shareditem"]]],[11,"clone","futures::sink","",94,[[["self"]],["sinkerrinto"]]],[11,"read","futures::io","",73,N],[11,"read_to_end","","",73,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",73,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",73,N],[11,"poll_read","","",79,N],[11,"poll_vectored_read","","",79,N],[11,"poll_read","","",73,N],[11,"hash","","",73,N],[11,"poll_ready","futures::stream","",109,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",109,N],[11,"poll_flush","","",109,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",109,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",111,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",111,N],[11,"poll_flush","","",111,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",111,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::sink","",97,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",97,N],[11,"poll_flush","","",97,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",97,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::stream","",99,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",99,N],[11,"poll_flush","","",99,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",99,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",128,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",128,N],[11,"poll_flush","","",128,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",128,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",118,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",118,N],[11,"poll_flush","","",118,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",118,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",139,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",139,N],[11,"poll_flush","","",139,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",139,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",127,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",127,N],[11,"poll_flush","","",127,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",127,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::sink","",95,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_flush","","",95,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",95,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::stream","",104,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",104,N],[11,"poll_flush","","",104,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",104,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::sink","",96,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",96,N],[11,"poll_flush","","",96,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",96,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",94,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_flush","","",94,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",94,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",90,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_flush","","",90,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",90,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::stream","",131,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",131,N],[11,"poll_flush","","",131,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",131,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",132,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",132,N],[11,"poll_flush","","",132,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",132,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",115,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",115,N],[11,"poll_flush","","",115,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",115,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",105,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",105,N],[11,"poll_flush","","",105,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",105,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",112,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",112,N],[11,"poll_flush","","",112,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",112,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",116,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",116,N],[11,"poll_flush","","",116,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",116,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",126,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",126,N],[11,"poll_flush","","",126,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",126,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::sink","",98,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",98,N],[11,"poll_flush","","",98,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",98,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::stream","",103,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",103,N],[11,"poll_flush","","",103,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",103,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",134,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",134,N],[11,"poll_flush","","",134,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",134,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",123,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",123,N],[11,"poll_flush","","",123,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",123,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",119,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",119,N],[11,"poll_flush","","",119,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",119,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",110,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",110,N],[11,"poll_flush","","",110,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",110,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",124,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",124,N],[11,"poll_flush","","",124,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",124,[[["self"],["context"]],["result",["async"]]]],[11,"deref","futures::future","",69,[[["self"]],["t"]]],[11,"deref","","",68,[[["self"]],["e"]]],[11,"partial_cmp","futures::io","",73,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"description","futures::stream","",18,[[["self"]],["str"]]],[11,"description","futures::future","",68,[[["self"]],["str"]]],[11,"cause","","",68,[[["self"]],["option",["error"]]]],[11,"cmp","futures::io","",73,[[["self"],["allowstdio"]],["ordering"]]],[11,"as_ref","","",81,N],[11,"poll_write","","",73,N],[11,"poll_flush","","",73,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll_close","","",73,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll_write","","",83,N],[11,"poll_vectored_write","","",83,N],[11,"poll_flush","","",83,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll_close","","",83,[[["self"],["context"]],["result",["async","error"]]]],[11,"drop","futures::stream","",136,N],[11,"drop","futures::future","",67,N],[11,"fmt","futures::stream","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",53,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",65,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::stream","",125,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",48,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",78,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","futures::future","",58,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",61,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",75,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","futures::stream","",107,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",60,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",80,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","","",77,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","futures::future","",55,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",49,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",64,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::sink","",93,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",44,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",43,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::stream","",108,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",54,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::stream","",101,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",51,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",47,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::sink","",91,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",57,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",76,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","futures::future","",67,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",62,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::stream","",106,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::sink","",89,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",92,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",63,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",74,[[["self"],["context"]],["result",["async","error"]]]],[11,"poll","futures::stream","",135,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::future","",59,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",66,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",56,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",52,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",45,[[["self"],["context"]],["result",["async"]]]],[11,"poll","futures::io","",82,[[["self"],["context"]],["result",["async","error"]]]],[11,"eq","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",73,[[["self"],["allowstdio"]],["bool"]]],[11,"poll_next","futures::stream","",100,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",133,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",136,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",132,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",104,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",115,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",117,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",138,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",129,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",120,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",99,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",102,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",110,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",124,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",113,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::sink","",95,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",116,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",122,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::sink","",98,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",123,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",118,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",109,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::sink","",97,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",137,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::future","",50,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::sink","",96,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",128,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",121,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",114,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",130,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",131,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::sink","",94,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",105,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",134,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",127,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",103,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::future","",46,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","futures::stream","",119,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",111,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",126,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",140,[[["self"],["context"]],["result",["async"]]]],[11,"poll_next","","",112,[[["self"],["context"]],["result",["async"]]]],[11,"as_mut","futures::io","",81,N],[11,"from_iter","futures::stream","",137,[[["t"]],["futuresordered"]]],[11,"from_iter","futures::future","",64,[[["t"]],["joinall"]]],[11,"from_iter","futures::stream","",136,[[["t"]],["futuresunordered"]]],[11,"write","futures::io","",73,N],[11,"flush","","",73,[[["self"]],["result",["error"]]]],[11,"write_all","","",73,N],[11,"write_fmt","","",73,[[["self"],["arguments"]],["result",["error"]]]],[11,"fmt","futures::stream","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",72,N],[11,"deref_mut","","",72,N],[11,"poll_ready","futures::future","",9,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",9,N],[11,"poll_flush","","",9,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",9,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures::channel::mpsc","",28,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",28,[[["self"],["t"]],["result"]]],[11,"poll_flush","","",28,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",28,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","","",23,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",23,[[["self"],["t"]],["result"]]],[11,"poll_flush","","",23,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",23,[[["self"],["context"]],["result",["async"]]]],[11,"map","futures::prelude","Change the success value of this `Async` with the closure provided",7,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",7,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Async::Pending`",7,[[["self"]],["bool"]]],[11,"never_into","","Convert the `Never` type into any other type.",19,[[["self"]],["t"]]],[11,"close","futures::channel::oneshot","Gracefully close this receiver, preventing any subsequent attempts to send to it.",20,N],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",20,[[["self"]],["result",["option","canceled"]]]],[11,"send","","Completes this oneshot with a successful result.",21,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",21,[[["self"],["context"]],["result",["async","never"]]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",21,[[["self"]],["bool"]]],[11,"try_send","futures::channel::mpsc","Attempts to send a message on this `Sender`, returning the message if there was an error.",23,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",23,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",23,[[["self"],["context"]],["result",["async","senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",23,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",23,N],[11,"close","","Closes the receiving half of a channel, without dropping it.",24,N],[11,"try_next","","Tries to receive the next message without wakeing a context if empty.",24,[[["self"]],["result",["option","tryrecverror"]]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",25,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",25,[[["self"]],["bool"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",26,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",26,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",26,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",26,[[["self"]],["senderror"]]],[11,"poll_ready","","Check if the channel is ready to receive a message.",28,[[["self"],["context"]],["result",["async","senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",28,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",28,N],[11,"start_send","","Send a message on the channel.",28,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",28,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",29,N],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",29,[[["self"]],["result",["option","tryrecverror"]]]],[11,"into_inner","futures::executor","Convert this `BlockingStream` into the inner `Stream` type.",30,[[["self"]],["s"]]],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",33,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"new","","Create a new, empty pool of tasks.",34,[[],["localpool"]]],[11,"executor","","Get a clonable handle to the pool as an executor.",34,[[["self"]],["localexecutor"]]],[11,"run","","Run all tasks in the pool to completion.",34,N],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",34,[[["self"],["f"],["executor"]],["result"]]],[11,"new","","Creates a new thread pool with the default configuration.",37,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",37,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",37,[[["self"],["f"]],["result"]]],[11,"new","","Create a default thread pool configuration.",38,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",38,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"stack_size","","Set stack size of threads in the pool.",38,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",38,[[["self"],["s"]],["threadpoolbuilder"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",38,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",38,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",38,[[["self"]],["result",["threadpool","error"]]]],[11,"forget","","Drop this handle without canceling the underlying future.",39,N],[11,"shutdown","","Spawning is failing because the executor has been shut down.",40,[[],["spawnerror"]]],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",40,[[],["bool"]]],[11,"is_left","futures::future","Return true if the value is the `Left` variant.",9,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",9,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",9,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",9,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",9,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",9,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",9,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",9,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",9,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",9,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",9,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",9,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",9,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",9,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",9,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",9,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",9,[[["self"]],["t"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",67,[[["self"]],["option",["result"]]]],[11,"into_inner","","Expose the inner Arc",68,[[["self"]],["arc"]]],[11,"into_inner","","Expose the inner Arc",69,[[["self"]],["arc"]]],[11,"new","futures::io","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",70,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",70,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",70,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",70,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",70,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",70,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",70,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",70,[[["self"]],["errorkind"]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",71,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",71,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",71,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",71,N],[11,"from_bytes","","",72,N],[11,"from_bytes_mut","","",72,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",73,[[["t"]],["allowstdio"]]],[11,"get_ref","","Returns a reference to the contained IO object.",73,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",73,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",73,[[["self"]],["t"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",81,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",81,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",81,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",81,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",81,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",81,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",81,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",81,[[["self"],["usize"]],["window"]]],[11,"new","futures::task","Create an empty set of task-local data.",84,[[],["localmap"]]],[11,"new","","Constructs a new `Waker` directly.",85,N],[11,"wake","","Wake up the task associated with this `Waker`.",85,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",85,[[["self"],["waker"]],["bool"]]],[11,"new","","Create an `AtomicWaker`.",86,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",86,N],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",86,N],[11,"get_mut","","Access this task-local key.",87,[[["self"],["context"]],["t"]]],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",88,[[["localmap"],["waker"]],["context"]]],[11,"waker","","Get the `Waker` associated with the current task.",88,[[["self"]],["waker"]]],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",88,[[["self"],["waker"]],["context"]]],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",88,[[["self"],["localmap"]],["context"]]],[11,"new","","Create a new task context.",88,[[["localmap"],["waker"],["executor"]],["context"]]],[11,"executor","","Get the default executor associated with this task, if any",88,[[["self"]],["executor"]]],[11,"spawn","","Spawn a future onto the default executor.",88,N],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",88,[[["self"],["executor"]],["context"]]],[11,"get_ref","futures::sink","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",89,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",89,[[["self"]],["option"]]],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",89,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",90,N],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",91,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",91,[[["self"]],["option"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",91,[[["self"]],["option"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["option"]]],[11,"get_ref","","Get a shared reference to the inner sink.",94,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",94,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",96,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",96,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",96,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",98,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",98,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",98,[[["self"]],["s"]]],[11,"get_ref","futures::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",99,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",103,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",103,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",103,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",104,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",105,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",105,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",105,[[["self"]],["s"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",108,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",108,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",108,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",108,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",109,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",109,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",109,[[["self"]],["s"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",110,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",110,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",110,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",110,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",111,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",111,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",111,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",112,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",112,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",112,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",115,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",115,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",115,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",116,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",116,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",116,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",119,[[["self"],["context"]],["result",["async"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",123,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",123,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",123,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",124,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",124,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",124,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",125,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",125,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",125,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",126,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",126,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",126,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",127,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",127,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",127,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",131,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",131,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",131,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",132,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",132,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",132,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",134,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",134,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",134,[[["self"]],["s"]]],[11,"new","","Constructs a new, empty `FuturesUnordered`",136,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",136,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",136,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",136,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",136,[[["self"]],["itermut"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",137,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",137,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",137,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",137,N],[11,"new","","Constructs a new, empty `SelectAll`",138,[[],["selectall"]]],[11,"len","","Returns the number of streams contained in the set.",138,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no streams",138,[[["self"]],["bool"]]],[11,"push","","Push a stream into the set.",138,N],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",139,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",140,[[["self"],["splitsink"]],["result",["reuniteerror"]]]]],"paths":[[8,"Future"],[8,"IntoFuture"],[8,"FutureExt"],[8,"Stream"],[8,"StreamExt"],[8,"Sink"],[8,"SinkExt"],[4,"Async"],[8,"Executor"],[4,"Either"],[4,"Loop"],[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[8,"Wake"],[8,"UnsafeWake"],[3,"ReuniteError"],[4,"Never"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"Sender"],[3,"Receiver"],[3,"SendError"],[3,"TrySendError"],[3,"TryRecvError"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"BlockingStream"],[3,"Enter"],[3,"EnterError"],[3,"LocalExecutor"],[3,"LocalPool"],[3,"Spawn"],[3,"SpawnWithHandle"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"JoinHandle"],[3,"SpawnError"],[3,"FutureOption"],[3,"FutureResult"],[3,"AndThen"],[3,"Empty"],[3,"Flatten"],[3,"FlattenStream"],[3,"ErrInto"],[3,"Fuse"],[3,"Inspect"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Lazy"],[3,"LoopFn"],[3,"Map"],[3,"MapErr"],[3,"OrElse"],[3,"PollFn"],[3,"Select"],[3,"Then"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedError"],[3,"SharedItem"],[3,"Error"],[3,"Initializer"],[3,"IoVec"],[3,"AllowStdIo"],[3,"Close"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadHalf"],[3,"ReadToEnd"],[3,"Window"],[3,"WriteAll"],[3,"WriteHalf"],[3,"LocalMap"],[3,"Waker"],[3,"AtomicWaker"],[3,"LocalKey"],[3,"Context"],[3,"Close"],[3,"Fanout"],[3,"Flush"],[3,"Send"],[3,"SendAll"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[3,"AndThen"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"Forward"],[3,"ErrInto"],[3,"Fuse"],[3,"Inspect"],[3,"InspectErr"],[3,"IterOk"],[3,"IterResult"],[3,"Map"],[3,"MapErr"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Repeat"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"StreamFuture"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"BufferUnordered"],[3,"Buffered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"SelectAll"],[3,"SplitSink"],[3,"SplitStream"]]};
searchIndex["futures_async_runtime"]={"doc":"","items":[],"paths":[]};
searchIndex["futures_channel"]={"doc":"Asynchronous channels.","items":[[0,"mpsc","futures_channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures_channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[11,"is_full","","Returns true if this error is a result of the channel being full.",0,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",0,[[["self"]],["bool"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",1,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",1,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",1,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",1,[[["self"]],["senderror"]]],[11,"try_send","","Attempts to send a message on this `Sender`, returning the message if there was an error.",2,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",2,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",2,[[["self"],["context"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",2,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",2,[[["self"]]]],[11,"close","","Closes the receiving half of a channel, without dropping it.",3,[[["self"]]]],[11,"try_next","","Tries to receive the next message without wakeing a context if empty.",3,[[["self"]],["result",["option","tryrecverror"]]]],[11,"poll_ready","","Check if the channel is ready to receive a message.",4,[[["self"],["context"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",4,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",4,[[["self"]]]],[11,"start_send","","Send a message on the channel.",4,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",4,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",5,[[["self"]]]],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",5,[[["self"]],["result",["option","tryrecverror"]]]],[0,"oneshot","futures_channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures_channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[11,"send","","Completes this oneshot with a successful result.",6,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",6,[[["self"],["context"]],["poll",["never"]]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",6,[[["self"]],["bool"]]],[11,"close","","Gracefully close this receiver, preventing any subsequent attempts to send to it.",7,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",7,[[["self"]],["result",["option","canceled"]]]],[11,"from","futures_channel::mpsc","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","futures_channel::oneshot","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"fmt","futures_channel::mpsc","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::oneshot","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::mpsc","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::oneshot","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","futures_channel::mpsc","",0,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",0,[[["self"],["senderror"]],["bool"]]],[11,"eq","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","futures_channel::oneshot","",9,[[["self"],["canceled"]],["bool"]]],[11,"drop","futures_channel::mpsc","",2,[[["self"]]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"drop","futures_channel::oneshot","",6,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"clone","futures_channel::mpsc","",0,[[["self"]],["senderror"]]],[11,"clone","","",1,[[["self"]],["trysenderror"]]],[11,"clone","","",2,[[["self"]],["sender"]]],[11,"clone","","",4,[[["self"]],["unboundedsender"]]],[11,"clone","futures_channel::oneshot","",9,[[["self"]],["canceled"]]],[11,"description","futures_channel::mpsc","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"description","futures_channel::oneshot","",9,[[["self"]],["str"]]],[11,"poll","","",7,[[["self"],["context"]],["poll",["canceled"]]]],[11,"poll_next","futures_channel::mpsc","",3,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",5,[[["self"],["context"]],["poll",["option"]]]]],"paths":[[3,"SendError"],[3,"TrySendError"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"Sender"],[3,"Receiver"],[3,"TryRecvError"],[3,"Canceled"]]};
searchIndex["futures_core"]={"doc":"Core traits and types for asynchronous operations in Rust.","items":[[4,"Async","futures_core","Indicates whether a value is available, or if the current task has been scheduled for later wake-up instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"Pending","","Represents that a value is not ready yet.",0,N],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Async::Pending`",0,[[["self"]],["bool"]]],[0,"future","","Futures.",N,N],[3,"FutureOption","futures_core::future","A future representing a value which may or may not be present.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[5,"result","","Creates a new future that will immediate resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a new future that will immediately resolve successfully to the given value.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a new future that will immediately fail with the given error.",N,[[["e"]],["futureresult"]]],[8,"Future","","A future represents an asychronous computation that may fail.",N,N],[16,"Item","","A successful value",1,N],[16,"Error","","An error",1,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",1,[[["self"],["context"]],["poll"]]],[8,"IntoFuture","","Types that can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",2,N],[16,"Item","","The item that the future may resolve with.",2,N],[16,"Error","","The error that the future may resolve with.",2,N],[10,"into_future","","Consumes this object and produces a future.",2,N],[0,"stream","futures_core","Asynchronous streams.",N,N],[8,"Stream","futures_core::stream","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",3,N],[16,"Error","","Errors yielded by the stream.",3,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"],["context"]],["poll",["option"]]]],[0,"task","futures_core","Task notification.",N,N],[3,"Waker","futures_core::task","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"Context","","Information about the currently-running task.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[3,"LocalMap","","A map storing task-local data.",N,N],[11,"new","","Constructs a new `Waker` directly.",4,N],[11,"wake","","Wake up the task associated with this `Waker`.",4,[[["self"]]]],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",4,[[["self"],["waker"]],["bool"]]],[11,"without_spawn","","Create a new task context without the ability to `spawn`.",5,[[["localmap"],["waker"]],["context"]]],[11,"waker","","Get the `Waker` associated with the current task.",5,[[["self"]],["waker"]]],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",5,[[["self"],["waker"]],["context"]]],[11,"with_locals","","Produce a context like the current one, but using the given task locals instead.",5,[[["self"],["localmap"]],["context"]]],[11,"new","","Create a new task context.",5,[[["localmap"],["waker"],["executor"]],["context"]]],[11,"executor","","Get the default executor associated with this task, if any",5,[[["self"]],["executor"]]],[11,"spawn","","Spawn a future onto the default executor.",5,[[["self"],["f"]]]],[11,"with_executor","","Produce a context like the current one, but using the given executor instead.",5,[[["self"],["executor"]],["context"]]],[11,"get_mut","","Access this task-local key.",6,[[["self"],["context"]],["t"]]],[11,"new","","Create an `AtomicWaker`.",7,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",7,[[["self"],["waker"]]]],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",7,[[["self"]]]],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker`.",N,N],[10,"clone_raw","","Creates a new `Waker` from this instance of `UnsafeWake`.",8,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",8,[[["self"]]]],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",8,[[["self"]]]],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",9,[[["arc"]]]],[11,"new","","Create an empty set of task-local data.",10,[[],["localmap"]]],[0,"executor","futures_core","Executors.",N,N],[3,"SpawnError","futures_core::executor","Provides the reason that an executor was unable to spawn.",N,N],[8,"Executor","","A task executor.",N,N],[10,"spawn","","Spawn the given task, polling it until completion.",11,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Determine whether the executor is able to spawn new tasks.",11,[[["self"]],["result",["spawnerror"]]]],[11,"shutdown","","Spawning is failing because the executor has been shut down.",12,[[],["spawnerror"]]],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",12,[[],["bool"]]],[0,"never","futures_core","Definition and trait implementations for the `Never` type, a stand-in for the `!` type until it becomes stable.",N,N],[4,"Never","futures_core::never","A type with no possible values.",N,N],[11,"never_into","","Convert the `Never` type into any other type.",13,[[["self"]],["t"]]],[6,"Poll","futures_core","A convenience wrapper for `Result<Async<T>, E>`.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"into_future","futures_core::future","",14,[[["self"]],["f"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"into_future","","",15,[[["self"]],["f"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","futures_core::task","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","futures_core::executor","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_future","futures_core::never","",13,[[["self"]],["f"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"poll","futures_core::future","",14,[[["self"],["context"]],["poll",["option"]]]],[11,"poll","","",15,[[["self"],["context"]],["poll"]]],[11,"poll","futures_core::never","",13,[[["self"],["context"]],["poll",["never","never"]]]],[11,"poll_next","","",13,[[["self"],["context"]],["poll",["option","never"]]]],[11,"from","futures_core","",0,[[["t"]],["async"]]],[11,"from","futures_core::future","",14,[[["option"]],["self"]]],[11,"from","","",15,[[["result"]],["self"]]],[11,"from","futures_core::task","",4,[[["arc"]],["waker"]]],[11,"fmt","futures_core","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::future","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::task","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::executor","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::never","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","futures_core","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"eq","futures_core::never","",13,[[["self"],["never"]],["bool"]]],[11,"cmp","","",13,[[["self"],["never"]],["ordering"]]],[11,"partial_cmp","","",13,[[["self"],["never"]],["option",["ordering"]]]],[11,"drop","futures_core::task","",4,[[["self"]]]],[11,"clone","futures_core","",0,[[["self"]],["async"]]],[11,"clone","futures_core::future","",14,[[["self"]],["futureoption"]]],[11,"clone","","",15,[[["self"]],["futureresult"]]],[11,"clone","futures_core::task","",4,[[["self"]],["self"]]],[11,"clone","futures_core::never","",13,[[["self"]],["never"]]],[11,"default","futures_core::task","",7,[[],["self"]]]],"paths":[[4,"Async"],[8,"Future"],[8,"IntoFuture"],[8,"Stream"],[3,"Waker"],[3,"Context"],[3,"LocalKey"],[3,"AtomicWaker"],[8,"UnsafeWake"],[8,"Wake"],[3,"LocalMap"],[8,"Executor"],[3,"SpawnError"],[4,"Never"],[3,"FutureOption"],[3,"FutureResult"]]};
searchIndex["futures_cpupool"]={"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",N,N],[3,"Builder","","Thread pool configuration object",N,N],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",N,N],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,[[["usize"]],["cpupool"]]],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,[[],["cpupool"]]],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,[[["self"],["f"]],["cpufuture"]]],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,[[["self"],["f"]],["cpufuture"]]],[11,"forget","","Drop this future without canceling the underlying future.",1,[[["self"]]]],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",2,[[],["builder"]]],[11,"pool_size","","Set size of a future CpuPool",2,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",2,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future CpuPool",2,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",2,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each worker thread stops.",2,[[["self"],["f"]],["self"]]],[11,"create","","Create CpuPool with configured parameters",2,[[["self"]],["cpupool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_future","","",1,[[["self"]],["f"]]],[11,"clone","","",0,[[["self"]],["cpupool"]]],[11,"drop","","",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"execute","","",0,[[["self"],["f"]],["result",["executeerror"]]]]],"paths":[[3,"CpuPool"],[3,"CpuFuture"],[3,"Builder"]]};
searchIndex["futures_executor"]={"doc":"Built-in executors and related tools.","items":[[3,"BlockingStream","futures_executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"LocalPool","","A single-threaded task pool.",N,N],[3,"LocalExecutor","","A handle to a `LocalPool` that implements `Executor`.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling asynchronous tasks.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"Spawn","","A future representing the completion of task spawning.",N,N],[3,"SpawnWithHandle","","A future representing the completion of task spawning, yielding a `JoinHandle` to the spawned task.",N,N],[3,"JoinHandle","","The type of future returned from the `ThreadPool::spawn` function, which proxies the futures running on the thread pool.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,[[["f"]],["result"]]],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Spawn a task onto the default executor.",N,[[["f"]],["spawn"]]],[5,"spawn_with_handle","","Spawn a task onto the default executor, yielding a `JoinHandle` to the spawned task.",N,[[["f"]],["spawnwithhandle"]]],[11,"new","","Create a new, empty pool of tasks.",0,[[],["localpool"]]],[11,"executor","","Get a clonable handle to the pool as an executor.",0,[[["self"]],["localexecutor"]]],[11,"run","","Run all tasks in the pool to completion.",0,[[["self"],["executor"]]]],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",0,[[["self"],["f"],["executor"]],["result"]]],[11,"into_inner","","Convert this `BlockingStream` into the inner `Stream` type.",1,[[["self"]],["s"]]],[11,"spawn_local","","Spawn a non-`Send` future onto the associated `LocalPool`.",2,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"new","","Creates a new thread pool with the default configuration.",3,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",3,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default executor for spawning tasks.",3,[[["self"],["f"]],["result"]]],[11,"new","","Create a default thread pool configuration.",4,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",4,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",4,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",4,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",4,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",4,[[["self"]],["result",["threadpool","error"]]]],[11,"forget","","Drop this handle without canceling the underlying future.",5,[[["self"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["localexecutor"]]],[11,"clone","","",3,[[["self"]],["threadpool"]]],[11,"poll","","",8,[[["self"],["context"]],["poll",["never"]]]],[11,"poll","","",9,[[["self"],["context"]],["poll",["never"]]]],[11,"poll","","",5,[[["self"],["context"]],["poll"]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",2,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",3,[[["self"],["box",["future"]]],["result",["spawnerror"]]]]],"paths":[[3,"LocalPool"],[3,"BlockingStream"],[3,"LocalExecutor"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"JoinHandle"],[3,"Enter"],[3,"EnterError"],[3,"Spawn"],[3,"SpawnWithHandle"]]};
searchIndex["futures_io"]={"doc":"Asynchronous I/O","items":[[3,"IoVec","futures_io","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",0,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,N],[13,"ConnectionReset","","The connection was reset by the remote server.",0,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",0,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",0,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",0,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",0,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,N],[13,"AlreadyExists","","An entity already exists, often a file.",0,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",0,N],[13,"InvalidInput","","A parameter was incorrect.",0,N],[13,"InvalidData","","Data not valid for the operation were encountered.",0,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",0,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",0,N],[13,"Interrupted","","This operation was interrupted.",0,N],[13,"Other","","Any I/O error not part of this list.",0,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",0,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",1,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",1,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",1,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",2,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",2,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",2,[[["self"],["context"]],["poll",["error"]]]],[10,"poll_close","","Attempt to close the object.",2,[[["self"],["context"]],["poll",["error"]]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",3,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",3,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",3,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",3,N],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"hash","","",0,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["errorkind"]],["ordering"]]],[11,"from","","",5,[[["intoinnererror"]],["error"]]],[11,"from","","",5,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",5,[[["nulerror"]],["error"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_bytes","","",4,N],[11,"from_bytes_mut","","",4,N],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",5,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",5,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",5,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",5,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",5,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",5,[[["self"]],["errorkind"]]]],"paths":[[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Initializer"],[3,"IoVec"],[3,"Error"]]};
searchIndex["futures_sink"]={"doc":"Asynchronous sinks","items":[[8,"Sink","futures_sink","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",0,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",0,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",0,[[["self"],["context"]],["poll"]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be preceded by a successful call to `poll_ready` which returned `Ok(Async::Ready(()))`.",0,N],[10,"poll_flush","","Flush any remaining output from this sink.",0,[[["self"],["context"]],["poll"]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",0,[[["self"],["context"]],["poll"]]]],"paths":[[8,"Sink"]]};
searchIndex["futures_stable"]={"doc":"","items":[],"paths":[]};
searchIndex["futures_util"]={"doc":"Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.","items":[[0,"future","futures_util","Futures",N,N],[4,"Either","futures_util::future","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[3,"Empty","","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until the future is `poll`ed.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"FlattenSink","","Future for the `flatten_sink` combinator, flattening a future-of-a-sink to get just the result of the final sink as a sink.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"ErrInto","","Future for the `err_into` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a future, passing it on.",N,N],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Item`, compatible with any error type of the caller's choosing.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"WithExecutor","","Future for the `with_executor` combinator, assigning an executor to be used when spawning other futures.",N,N],[4,"Loop","","An enum describing whether to `break` or `continue` a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",1,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",1,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",2,[[["self"]],["option",["result"]]]],[11,"into_inner","","Expose the inner Arc",3,[[["self"]],["arc"]]],[11,"into_inner","","Expose the inner Arc",4,[[["self"]],["arc"]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient combinator functions.",N,N],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",5,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",5,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Map this future's error to a new error type using the `Into` trait.",5,[[["self"]],["errinto"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",5,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",5,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",5,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two differently-typed futures to complete.",5,[[["self"],["b"]],["select"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",5,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",5,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",5,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",5,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"left","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",5,[[["self"]],["either"]]],[11,"left_future","","Wrap this future in an `Either` future, making it the left-hand variant of that `Either`.",5,[[["self"]],["either"]]],[11,"right","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",5,[[["self"]],["either"]]],[11,"right_future","","Wrap this future in an `Either` future, making it the right-hand variant of that `Either`.",5,[[["self"]],["either"]]],[11,"into_stream","","Convert this future into a single element stream.",5,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",5,[[["self"]],["flatten"]]],[11,"flatten_sink","","Flatten the execution of this future when the successful result of this future is a sink.",5,[[["self"]],["flattensink"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",5,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",5,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",5,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of a future, passing it on.",5,[[["self"],["f"]],["inspecterr"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",5,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",5,[[["self"]],["shared"]]],[11,"recover","","Handle errors generated by this future by converting them into `Self::Item`.",5,[[["self"],["f"]],["recover"]]],[11,"with_executor","","Assigns the provided `Executor` to be used when spawning tasks from within the future.",5,[[["self"],["e"]],["withexecutor"]]],[0,"io","futures_util","IO",N,N],[8,"AsyncRead","futures_util::io","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",6,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",6,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",6,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",7,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",7,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",7,[[["self"],["context"]],["result",["async","error"]]]],[10,"poll_close","","Attempt to close the object.",7,[[["self"],["context"]],["result",["async","error"]]]],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",8,[[["self"]],["t"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",9,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",9,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",9,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",9,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",9,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",9,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",9,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",9,[[["self"],["usize"]],["window"]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",10,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",10,[[["self"],["t"]],["read"]]],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",10,[[["self"],["t"]],["readexact"]]],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",10,[[["self"],["vec",["u8"]]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",10,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite` and then return `self`.",11,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite` and then return `self`.",11,[[["self"]],["close"]]],[11,"write_all","","Write a `Buf` into this value, returning how many bytes were written. Creates a future that will write the entire contents of the buffer `buf` into this `AsyncWrite`.",11,[[["self"],["t"]],["writeall"]]],[0,"stream","futures_util","Streams",N,N],[3,"IterOk","futures_util::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"ErrInto","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Recover","","Future for the `recover` combinator, handling errors by converting them into an `Option<Item>`, such that a `None` value terminates the stream. `Recover` is compatible with any error type of the caller's choosing.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"SelectAll","","An unbounded set of streams",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",12,N],[12,"1","","",12,N],[3,"ForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",N,N],[3,"FuturesUnordered","","A set of `Future`s which may complete in any order.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["f"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"select_all","","Convert a list of streams into a `Stream` of results from the streams.",N,[[["i"]],["selectall"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",13,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",13,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",13,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",14,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",15,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",15,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",15,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",16,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",17,[[["self"]],["s"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",18,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",18,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",19,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",20,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",21,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",22,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",23,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",23,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",23,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",24,[[["self"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",25,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",25,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",25,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",26,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",26,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",26,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",27,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",27,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",27,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",28,[[["self"]],["s"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",29,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",29,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",29,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",29,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",30,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",30,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",30,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",31,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",32,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",32,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",32,[[["self"]],["s"]]],[11,"new","","Constructs a new, empty `SelectAll`",33,[[],["selectall"]]],[11,"len","","Returns the number of streams contained in the set.",33,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no streams",33,[[["self"]],["bool"]]],[11,"push","","Push a stream into the set.",33,[[["self"],["s"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",34,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",35,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"new","","Constructs a new, empty `FuturesUnordered`",36,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",36,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",36,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",36,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",36,[[["self"]],["itermut"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",37,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",37,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",37,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",37,[[["self"],["t"]]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Converts this stream into a `Future`.",38,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",38,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",38,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",38,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",38,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",38,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",38,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",38,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",38,[[["self"]],["collect"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",38,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",38,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",38,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",38,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",38,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",38,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided closure for each element on the stream. This is similar to `for_each` but may begin processing an element while previous elements are still being processed.",38,[[["self"],["f"]],["foreachconcurrent"]]],[11,"err_into","","Map this stream's error to a different type using the `Into` trait.",38,[[["self"]],["errinto"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",38,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",38,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",38,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",38,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",38,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",38,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",38,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",38,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",38,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",38,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",38,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",38,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",38,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",38,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",38,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",38,[[["self"],["f"]],["inspecterr"]]],[11,"recover","","Handle errors generated by this stream by converting them into `Option<Self::Item>`, such that a `None` value terminates the stream.",38,[[["self"],["f"]],["recover"]]],[11,"left","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",38,[[["self"]],["either"]]],[11,"right","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",38,[[["self"]],["either"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",38,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",38,[[["self"]],["either"]]],[0,"sink","futures_util","Sinks",N,N],[3,"Buffer","futures_util::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been closed.",39,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been closed.",39,[[["self"]],["option"]]],[11,"into_inner","","Consume the `Close` and return the inner sink. Returns `None` if the sink has already been closed.",39,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",40,N],[11,"get_ref","","Get a shared reference to the inner sink. Returns `None` if the sink has already been flushed.",41,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink. Returns `None` if the sink has already been flushed.",41,[[["self"]],["option"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink. Returns `None` if the sink has already been flushed.",41,[[["self"]],["option"]]],[11,"get_ref","","Get a shared reference to the inner sink.",42,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",42,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",42,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",43,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",43,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",43,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",44,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",44,[[["self"]],["option"]]],[11,"get_ref","","Get a shared reference to the inner sink.",45,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",45,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",45,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",46,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",46,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",47,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",47,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",47,[[["self"]],["s"]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",48,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",48,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",48,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",48,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",48,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",48,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",48,[[["self"],["s"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",48,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",48,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",48,[[["self"],["s"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",48,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",48,[[["self"]],["either"]]],[0,"prelude","futures_util","Prelude containing the extension traits, which add functionality to existing asynchronous types.",N,N],[11,"from","futures_util::future","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into_future","","",0,[[["self"]],["f"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into_future","","",49,[[["self"]],["f"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into_future","","",50,[[["self"]],["f"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",71,[[["self"]],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow","futures_util::io","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",79,[[["self"]],["f"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into_future","","",81,[[["self"]],["f"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_future","","",82,[[["self"]],["f"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into_future","","",83,[[["self"]],["f"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into_future","","",86,[[["self"]],["f"]]],[11,"from","futures_util::stream","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"into_future","","",91,[[["self"]],["f"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into_future","","",93,[[["self"]],["f"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"into_future","","",94,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_future","","",19,[[["self"]],["f"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"into_future","","",29,[[["self"]],["f"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"into_future","","",104,[[["self"]],["f"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"into_future","","",105,[[["self"]],["f"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","futures_util::sink","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into_future","","",39,[[["self"]],["f"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into_future","","",41,[[["self"]],["f"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"into_future","","",106,[[["self"]],["f"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"poll_next","futures_util::future","",0,[[["self"],["context"]],["result",["async"]]]],[11,"poll","","",0,[[["self"],["context"]],["result",["async"]]]],[11,"deref","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"deref_mut","","",0,N],[11,"hash","","",0,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",0,[[["result"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fill_buf","","",0,[[["self"]],["result",["error"]]]],[11,"consume","","",0,N],[11,"extend","","",0,N],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"deref","futures_util::io","",77,N],[11,"deref_mut","","",77,N],[11,"poll_ready","futures_util::future","",0,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",0,N],[11,"poll_flush","","",0,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",0,[[["self"],["context"]],["result",["async"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::stream","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::future","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::io","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::stream","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::sink","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","futures_util::io","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",8,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"deref","futures_util::future","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["e"]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","futures_util::stream","",36,[[["self"]]]],[11,"hash","futures_util::io","",8,N],[11,"from_iter","futures_util::future","",73,[[["t"]],["self"]]],[11,"from_iter","futures_util::stream","",36,[[["t"]],["self"]]],[11,"from_iter","","",37,[[["t"]],["self"]]],[11,"clone","futures_util::future","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["shareditem"]]],[11,"clone","","",4,[[["self"]],["sharederror"]]],[11,"clone","futures_util::io","",8,[[["self"]],["allowstdio"]]],[11,"clone","futures_util::sink","",40,[[["self"]],["fanout"]]],[11,"clone","","",42,[[["self"]],["sinkerrinto"]]],[11,"clone","","",43,[[["self"]],["sinkmaperr"]]],[11,"clone","","",45,[[["self"]],["with"]]],[11,"as_ref","futures_util::io","",9,N],[11,"as_mut","","",9,N],[11,"poll","futures_util::future","",49,[[["self"],["context"]],["poll"]]],[11,"poll","","",50,[[["self"],["context"]],["poll"]]],[11,"poll","","",51,[[["self"],["context"]],["poll"]]],[11,"poll","","",52,[[["self"],["context"]],["poll"]]],[11,"poll","","",53,[[["self"],["context"]],["poll"]]],[11,"poll","","",54,[[["self"],["context"]],["poll"]]],[11,"poll","","",57,[[["self"],["context"]],["poll"]]],[11,"poll","","",59,[[["self"],["context"]],["poll"]]],[11,"poll","","",60,[[["self"],["context"]],["poll"]]],[11,"poll","","",61,[[["self"],["context"]],["poll"]]],[11,"poll","","",62,[[["self"],["context"]],["poll"]]],[11,"poll","","",63,[[["self"],["context"]],["poll"]]],[11,"poll","","",64,[[["self"],["context"]],["poll"]]],[11,"poll","","",65,[[["self"],["context"]],["poll"]]],[11,"poll","","",66,[[["self"],["context"]],["poll"]]],[11,"poll","","",67,[[["self"],["context"]],["poll"]]],[11,"poll","","",68,[[["self"],["context"]],["poll"]]],[11,"poll","","",69,[[["self"],["context"]],["poll"]]],[11,"poll","","",70,[[["self"],["context"]],["poll"]]],[11,"poll","","",71,[[["self"],["context"]],["poll"]]],[11,"poll","","",72,[[["self"],["context"]],["poll"]]],[11,"poll","","",73,[[["self"],["context"]],["poll"]]],[11,"poll","","",74,[[["self"],["context"]],["poll"]]],[11,"poll","","",75,[[["self"],["context"]],["poll"]]],[11,"poll","","",2,[[["self"],["context"]],["poll"]]],[11,"poll","","",76,[[["self"],["context"]],["poll"]]],[11,"poll","futures_util::io","",78,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",79,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",80,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",81,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",82,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",83,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","","",86,[[["self"],["context"]],["poll",["error"]]]],[11,"poll","futures_util::stream","",91,[[["self"],["context"]],["poll"]]],[11,"poll","","",93,[[["self"],["context"]],["poll"]]],[11,"poll","","",94,[[["self"],["context"]],["poll"]]],[11,"poll","","",19,[[["self"],["context"]],["poll"]]],[11,"poll","","",29,[[["self"],["context"]],["poll"]]],[11,"poll","","",104,[[["self"],["context"]],["poll"]]],[11,"poll","","",105,[[["self"],["context"]],["poll"]]],[11,"poll","futures_util::sink","",39,[[["self"],["context"]],["poll"]]],[11,"poll","","",41,[[["self"],["context"]],["poll"]]],[11,"poll","","",44,[[["self"],["context"]],["poll"]]],[11,"poll","","",106,[[["self"],["context"]],["poll"]]],[11,"poll_next","futures_util::future","",56,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",58,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","futures_util::stream","",87,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",88,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",89,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",13,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",90,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",92,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",14,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",15,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",16,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",17,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",18,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",20,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",21,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",22,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",23,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",95,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",96,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",24,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",97,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",98,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",25,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",26,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",27,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",28,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",99,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",100,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",101,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",102,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",30,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",31,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",103,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",32,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",33,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",34,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",36,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",37,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","futures_util::sink","",42,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",43,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",45,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",46,[[["self"],["context"]],["poll",["option"]]]],[11,"poll_next","","",47,[[["self"],["context"]],["poll",["option"]]]],[11,"read","futures_util::io","",8,N],[11,"read_to_end","","",8,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",8,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",8,N],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"write_all","","",8,N],[11,"write_fmt","","",8,[[["self"],["arguments"]],["result"]]],[11,"description","futures_util::future","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"description","futures_util::stream","",12,[[["self"]],["str"]]],[11,"poll_read","futures_util::io","",8,N],[11,"poll_read","","",84,N],[11,"poll_vectored_read","","",84,N],[11,"poll_write","","",8,N],[11,"poll_flush","","",8,[[["self"],["context"]],["poll",["error"]]]],[11,"poll_close","","",8,[[["self"],["context"]],["poll",["error"]]]],[11,"poll_write","","",85,N],[11,"poll_vectored_write","","",85,N],[11,"poll_flush","","",85,[[["self"],["context"]],["poll",["error"]]]],[11,"poll_close","","",85,[[["self"],["context"]],["poll",["error"]]]],[11,"poll_ready","futures_util::future","",55,[[["self"],["context"]],["result",["async"]]]],[11,"start_send","","",55,N],[11,"poll_flush","","",55,[[["self"],["context"]],["result",["async"]]]],[11,"poll_close","","",55,[[["self"],["context"]],["result",["async"]]]],[11,"poll_ready","futures_util::stream","",13,[[["self"],["context"]],["poll"]]],[11,"start_send","","",13,N],[11,"poll_flush","","",13,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",13,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",14,[[["self"],["context"]],["poll"]]],[11,"start_send","","",14,N],[11,"poll_flush","","",14,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",14,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",15,[[["self"],["context"]],["poll"]]],[11,"start_send","","",15,N],[11,"poll_flush","","",15,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",15,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",16,[[["self"],["context"]],["poll"]]],[11,"start_send","","",16,N],[11,"poll_flush","","",16,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",16,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",17,[[["self"],["context"]],["poll"]]],[11,"start_send","","",17,N],[11,"poll_flush","","",17,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",17,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",18,[[["self"],["context"]],["poll"]]],[11,"start_send","","",18,N],[11,"poll_flush","","",18,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",18,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",20,[[["self"],["context"]],["poll"]]],[11,"start_send","","",20,N],[11,"poll_flush","","",20,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",20,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",21,[[["self"],["context"]],["poll"]]],[11,"start_send","","",21,N],[11,"poll_flush","","",21,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",21,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",22,[[["self"],["context"]],["poll"]]],[11,"start_send","","",22,N],[11,"poll_flush","","",22,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",22,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",23,[[["self"],["context"]],["poll"]]],[11,"start_send","","",23,N],[11,"poll_flush","","",23,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",23,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",96,[[["self"],["context"]],["poll"]]],[11,"start_send","","",96,N],[11,"poll_flush","","",96,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",96,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",24,[[["self"],["context"]],["poll"]]],[11,"start_send","","",24,N],[11,"poll_flush","","",24,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",24,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",25,[[["self"],["context"]],["poll"]]],[11,"start_send","","",25,N],[11,"poll_flush","","",25,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",25,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",26,[[["self"],["context"]],["poll"]]],[11,"start_send","","",26,N],[11,"poll_flush","","",26,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",26,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",27,[[["self"],["context"]],["poll"]]],[11,"start_send","","",27,N],[11,"poll_flush","","",27,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",27,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",28,[[["self"],["context"]],["poll"]]],[11,"start_send","","",28,N],[11,"poll_flush","","",28,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",28,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",99,[[["self"],["context"]],["poll"]]],[11,"start_send","","",99,N],[11,"poll_flush","","",99,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",99,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",30,[[["self"],["context"]],["poll"]]],[11,"start_send","","",30,N],[11,"poll_flush","","",30,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",30,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",31,[[["self"],["context"]],["poll"]]],[11,"start_send","","",31,N],[11,"poll_flush","","",31,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",31,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",32,[[["self"],["context"]],["poll"]]],[11,"start_send","","",32,N],[11,"poll_flush","","",32,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",32,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",35,[[["self"],["context"]],["poll"]]],[11,"start_send","","",35,N],[11,"poll_flush","","",35,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",35,[[["self"],["context"]],["poll"]]],[11,"poll_ready","futures_util::sink","",40,[[["self"],["context"]],["poll"]]],[11,"start_send","","",40,N],[11,"poll_flush","","",40,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",40,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",42,[[["self"],["context"]],["poll"]]],[11,"start_send","","",42,N],[11,"poll_flush","","",42,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",42,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",43,[[["self"],["context"]],["poll"]]],[11,"start_send","","",43,N],[11,"poll_flush","","",43,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",43,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",45,[[["self"],["context"]],["poll"]]],[11,"start_send","","",45,N],[11,"poll_flush","","",45,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",45,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",46,[[["self"],["context"]],["poll"]]],[11,"start_send","","",46,N],[11,"poll_flush","","",46,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",46,[[["self"],["context"]],["poll"]]],[11,"poll_ready","","",47,[[["self"],["context"]],["poll"]]],[11,"start_send","","",47,N],[11,"poll_flush","","",47,[[["self"],["context"]],["poll"]]],[11,"poll_close","","",47,[[["self"],["context"]],["poll"]]],[11,"is_left","futures_util::future","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from_bytes","futures_util::io","",77,N],[11,"from_bytes_mut","","",77,N]],"paths":[[4,"Either"],[4,"Loop"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"AllowStdIo"],[3,"Window"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[3,"ReuniteError"],[3,"AndThen"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"ErrInto"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Peekable"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"Chunks"],[3,"SelectAll"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"StreamExt"],[3,"Close"],[3,"Fanout"],[3,"Flush"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"Send"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[8,"SinkExt"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenSink"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"ErrInto"],[3,"OrElse"],[3,"Select"],[3,"Then"],[3,"Inspect"],[3,"InspectErr"],[3,"Recover"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"WithExecutor"],[3,"IoVec"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Close"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"WriteAll"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Fold"],[3,"ForEach"],[3,"Once"],[3,"OrElse"],[3,"PollFn"],[3,"Select"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Recover"],[3,"CatchUnwind"],[3,"Collect"],[3,"ForEachConcurrent"],[3,"SendAll"]]};
searchIndex["generic_array"]={"doc":"This crate implements a structure that can be used as a generic array type.use Core Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:","items":[[5,"transmute","generic_array","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[3,"GenericArray","","Struct representing a generic array - `GenericArray<T, N>` works like [T; N]",N,N],[0,"arr","","Implementation for `arr!` macro.",N,N],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",N,N],[8,"AddLength","","Helper trait for `arr!` macro",N,N],[16,"Output","","Resulting length",0,N],[0,"iter","generic_array","`GenericArray` iterator implementation.",N,N],[3,"GenericArrayIter","generic_array::iter","An iterator that moves out of a `GenericArray`",N,N],[8,"ArrayLength","generic_array","Trait making `GenericArray` work, marking types to be used as length of an array",N,N],[16,"ArrayType","","Associated type representing the array type for the number",1,N],[11,"generate","","Initializes a new `GenericArray` instance using the given function.",2,[[["f"]],["genericarray"]]],[11,"map_slice","","Map a function over a slice to a `GenericArray`.",2,N],[11,"map","","Maps a `GenericArray` to another `GenericArray`.",2,[[["self"],["f"]],["genericarray"]]],[11,"map_ref","","Maps a `GenericArray` to another `GenericArray` by reference.",2,[[["self"],["f"]],["genericarray"]]],[11,"zip","","Combines two `GenericArray` instances and iterates through both of them, initializing a new `GenericArray` with the result of the zipped mapping function.",2,[[["self"],["genericarray"],["f"]],["genericarray"]]],[11,"zip_ref","","Combines two `GenericArray` instances and iterates through both of them by reference, initializing a new `GenericArray` with the result of the zipped mapping function.",2,[[["self"],["genericarray"],["f"]],["genericarray"]]],[11,"as_slice","","Extracts a slice containing the entire array.",2,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire array.",2,N],[11,"from_slice","","Converts slice to a generic array reference with inferred length;",2,N],[11,"from_mut_slice","","Converts mutable slice to a mutable generic array reference",2,N],[11,"clone_from_slice","","Construct a `GenericArray` from a slice by cloning its content",2,N],[11,"from_exact_iter","","",2,[[["i"]],["option"]]],[14,"arr","","Macro allowing for easy generation of Generic Arrays. Example: `let test = arr![u32; 1, 2, 3];`",N,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","generic_array::iter","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","generic_array","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"from","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"],["genericarray"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["genericarray"]],["option",["ordering"]]]],[11,"deref","","",2,N],[11,"deref_mut","","",2,N],[11,"drop","generic_array::iter","",3,[[["self"]]]],[11,"hash","generic_array","",2,[[["self"],["h"]]]],[11,"next","generic_array::iter","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"count","","",3,[[["self"]],["usize"]]],[11,"nth","","",3,[[["self"],["usize"]],["option"]]],[11,"last","","",3,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"into_iter","generic_array","",2,N],[11,"len","generic_array::iter","",3,[[["self"]],["usize"]]],[11,"from_iter","generic_array","",2,[[["i"]],["genericarray"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["genericarray"]]],[11,"as_ref","","",2,N],[11,"as_mut","","",2,N],[11,"default","","",2,[[],["self"]]],[11,"borrow","","",2,N],[11,"borrow_mut","","",2,N]],"paths":[[8,"AddLength"],[8,"ArrayLength"],[3,"GenericArray"],[3,"GenericArrayIter"]]};
searchIndex["hdk"]={"doc":"File holding the public Zome API All API Reference documentation should be done here.","items":[[3,"ValidationData","hdk","",N,N],[12,"chain_header","","",0,N],[12,"sources","","",0,N],[12,"source_chain_entries","","",0,N],[12,"source_chain_headers","","",0,N],[12,"custom","","",0,N],[12,"lifecycle","","",0,N],[12,"action","","",0,N],[4,"EntryLifecycle","","",N,N],[13,"Chain","","",1,N],[13,"Dht","","",1,N],[13,"Meta","","",1,N],[4,"EntryAction","","",N,N],[13,"Commit","","",2,N],[13,"Modify","","",2,N],[13,"Delete","","",2,N],[4,"LinkAction","","",N,N],[13,"Commit","","",3,N],[13,"Delete","","",3,N],[3,"APP_NAME","","The name of this Holochain taken from its DNA.",N,N],[3,"APP_DNA_HASH","","The hash of this Holochain's DNA. Nodes must run the same DNA to be on the same DHT.",N,N],[3,"APP_AGENT_ID_STR","","The identity string used when the chain was first initialized. If you used JSON to embed multiple properties (such as FirstName, LastName, Email, etc), they can be retrieved here as App.Agent.FirstName, etc. (FIXME)",N,N],[3,"APP_AGENT_KEY_HASH","","The hash of your public key. This is your node address on the DHT. It can be used for node-to-node messaging with `send` and `receive` functions.",N,N],[3,"APP_AGENT_INITIAL_HASH","","The hash of the first identity entry on your chain (The second entry on your chain). This is your peer's identity on the DHT.",N,N],[3,"APP_AGENT_LATEST_HASH","","The hash of the most recent identity entry that has been committed to your chain. Starts with the same value as APP_AGENT_INITIAL_HASH. After a call to `update_agent` it will have the value of the hash of the newly committed identity entry.",N,N],[3,"EntryStatus","","",N,N],[3,"GetEntryMask","","",N,N],[4,"RibosomeError","","",N,N],[13,"RibosomeFailed","","",4,N],[13,"FunctionNotImplemented","","",4,N],[13,"HashNotFound","","",4,N],[13,"ValidationFailed","","",4,N],[4,"BundleOnClose","","Allowed input for close_bundle()",N,N],[13,"Commit","","",5,N],[13,"Discard","","",5,N],[5,"property","","FIXME DOC Returns an application property, which are defined by the app developer. It returns values from the DNA file that you set as properties of your application (e.g. Name, Language, Description, Author, etc.).",N,[[["s"]],["result",["string","ribosomeerror"]]]],[5,"make_hash","","FIXME DOC",N,[[["s"],["value"]],["result",["hashstring","ribosomeerror"]]]],[5,"debug","","FIXME DOC",N,[[["str"]],["result",["ribosomeerror"]]]],[5,"call","","FIXME DOC",N,[[["s"],["s"],["s"],["value"]],["result",["value","ribosomeerror"]]]],[5,"sign","","FIXME DOC",N,[[["s"]],["result",["string","ribosomeerror"]]]],[5,"verify_signature","","FIXME DOC",N,[[["s"],["s"],["s"]],["result",["bool","ribosomeerror"]]]],[5,"commit_entry","","FIXME DOC",N,[[["str"],["value"]],["result",["hashstring","ribosomeerror"]]]],[5,"update_entry","","FIXME DOC",N,[[["s"],["value"],["hashstring"]],["result",["hashstring","ribosomeerror"]]]],[5,"update_agent","","FIXME DOC",N,[[],["result",["hashstring","ribosomeerror"]]]],[5,"remove_entry","","FIXME DOC Commit a Deletion System Entry",N,[[["hashstring"],["s"]],["result",["hashstring","ribosomeerror"]]]],[5,"get_entry","","implements access to low-level WASM hc_get_entry",N,[[["hashstring"]],["result",["option","ribosomeerror"]]]],[5,"link_entries","","FIXME DOC",N,[[["hashstring"],["hashstring"],["s"]],["result",["ribosomeerror"]]]],[5,"get_links","","FIXME DOC",N,[[["hashstring"],["s"]],["result",["vec","ribosomeerror"]]]],[5,"query","","FIXME DOC",N,[[],["result",["vec","ribosomeerror"]]]],[5,"send","","FIXME DOC",N,[[["hashstring"],["value"]],["result",["value","ribosomeerror"]]]],[5,"start_bundle","","FIXME DOC",N,[[["usize"],["value"]],["result",["ribosomeerror"]]]],[5,"close_bundle","","FIXME DOC",N,[[["bundleonclose"]],["result",["ribosomeerror"]]]],[11,"to_json","","",4,[[["self"]],["value"]]],[18,"LIVE","","",6,N],[18,"REJECTED","","",6,N],[18,"DELETED","","",6,N],[18,"MODIFIED","","",6,N],[11,"empty","","Returns an empty set of flags.",6,[[],["entrystatus"]]],[11,"all","","Returns the set containing all flags.",6,[[],["entrystatus"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,[[["u8"]],["option",["entrystatus"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,[[["u8"]],["entrystatus"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,[[["self"],["entrystatus"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,[[["self"],["entrystatus"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["entrystatus"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["entrystatus"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["entrystatus"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,[[["self"],["entrystatus"],["bool"]]]],[18,"ENTRY","","",7,N],[18,"ENTRY_TYPE","","",7,N],[18,"SOURCES","","",7,N],[11,"empty","","Returns an empty set of flags.",7,[[],["getentrymask"]]],[11,"all","","Returns the set containing all flags.",7,[[],["getentrymask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,[[["u8"]],["option",["getentrymask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,[[["u8"]],["getentrymask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,[[["self"],["getentrymask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,[[["self"],["getentrymask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["getentrymask"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["getentrymask"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["getentrymask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,[[["self"],["getentrymask"],["bool"]]]],[0,"global_fns","","",N,N],[3,"ValidationData","hdk::global_fns","",N,N],[12,"chain_header","","",0,N],[12,"sources","","",0,N],[12,"source_chain_entries","","",0,N],[12,"source_chain_headers","","",0,N],[12,"custom","","",0,N],[12,"lifecycle","","",0,N],[12,"action","","",0,N],[4,"EntryLifecycle","","",N,N],[13,"Chain","","",1,N],[13,"Dht","","",1,N],[13,"Meta","","",1,N],[4,"EntryAction","","",N,N],[13,"Commit","","",2,N],[13,"Modify","","",2,N],[13,"Delete","","",2,N],[4,"LinkAction","","",N,N],[13,"Commit","","",3,N],[13,"Delete","","",3,N],[5,"init_global_memory","","Init global memory stack",N,[[["u32"]]]],[5,"store_and_return_output","","Serialize output as json in WASM memory",N,[[["t"]],["u32"]]],[0,"globals","hdk","File for holding all internal/private globals used by the zome api library",N,N],[7,"G_MEM_STACK","hdk::globals","",N,N],[0,"init_globals","hdk","File for holding the internal/private zome api function `init_globals`",N,N],[0,"macros","","",N,N],[14,"load_json","","",N,N],[14,"zome_functions","","A macro for easily writing zome functions",N,N],[14,"validations","","",N,N],[11,"from","hdk::global_fns","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","hdk","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"equivalent","","",6,[[["self"],["k"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"equivalent","","",7,[[["self"],["k"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"deserialize","hdk::global_fns","",3,[[["__d"]],["result",["linkaction"]]]],[11,"deserialize","","",0,[[["__d"]],["result",["validationdata"]]]],[11,"deserialize","","",1,[[["__d"]],["result",["entrylifecycle"]]]],[11,"deserialize","","",2,[[["__d"]],["result",["entryaction"]]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"clone","","",2,[[["self"]],["entryaction"]]],[11,"clone","","",3,[[["self"]],["linkaction"]]],[11,"clone","","",0,[[["self"]],["validationdata"]]],[11,"clone","","",1,[[["self"]],["entrylifecycle"]]],[11,"clone","hdk","",6,[[["self"]],["entrystatus"]]],[11,"clone","","",7,[[["self"]],["getentrymask"]]],[11,"extend","","",6,[[["self"],["t"]]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"partial_cmp","","",6,[[["self"],["entrystatus"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"le","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"gt","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"ge","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["getentrymask"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"le","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"gt","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"ge","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"default","","",7,[[],["getentrymask"]]],[11,"eq","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"ne","","",6,[[["self"],["entrystatus"]],["bool"]]],[11,"eq","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"ne","","",7,[[["self"],["getentrymask"]],["bool"]]],[11,"cmp","","",6,[[["self"],["entrystatus"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["getentrymask"]],["ordering"]]],[11,"deref","","",8,[[["self"]],["str"]]],[11,"deref","","",9,[[["self"]],["hashstring"]]],[11,"deref","","",10,[[["self"]],["str"]]],[11,"deref","","",11,[[["self"]],["hashstring"]]],[11,"deref","","",12,[[["self"]],["hashstring"]]],[11,"deref","","",13,[[["self"]],["hashstring"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["self"],["entrystatus"]],["entrystatus"]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["self"],["getentrymask"]],["getentrymask"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["entrystatus"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["getentrymask"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[["self"]],["entrystatus"]]],[11,"not","","Returns the complement of this set of flags.",7,[[["self"]],["getentrymask"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["self"],["entrystatus"]],["entrystatus"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["self"],["getentrymask"]],["getentrymask"]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["self"],["entrystatus"]],["entrystatus"]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["self"],["getentrymask"]],["getentrymask"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,[[["self"],["entrystatus"]],["entrystatus"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,[[["self"],["getentrymask"]],["getentrymask"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["entrystatus"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["getentrymask"]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["entrystatus"]]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["getentrymask"]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["entrystatus"]]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["getentrymask"]]]],[11,"hash","","",6,N],[11,"hash","","",7,N],[11,"from_iter","","",6,[[["t"]],["entrystatus"]]],[11,"from_iter","","",7,[[["t"]],["getentrymask"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"initialize","","",8,[[["self"]]]],[11,"initialize","","",9,[[["self"]]]],[11,"initialize","","",10,[[["self"]]]],[11,"initialize","","",11,[[["self"]]]],[11,"initialize","","",12,[[["self"]]]],[11,"initialize","","",13,[[["self"]]]]],"paths":[[3,"ValidationData"],[4,"EntryLifecycle"],[4,"EntryAction"],[4,"LinkAction"],[4,"RibosomeError"],[4,"BundleOnClose"],[3,"EntryStatus"],[3,"GetEntryMask"],[3,"APP_NAME"],[3,"APP_DNA_HASH"],[3,"APP_AGENT_ID_STR"],[3,"APP_AGENT_KEY_HASH"],[3,"APP_AGENT_INITIAL_HASH"],[3,"APP_AGENT_LATEST_HASH"]]};
searchIndex["holochain_agent"]={"doc":"holochain_agent provides a library for managing holochain agent info, including identities, keys etc..","items":[[3,"Identity","holochain_agent","Object holding an Agent's identity.",N,N],[3,"Agent","","Object holding all Agent's data.",N,N],[11,"new","","",0,[[["content"]],["self"]]],[11,"new","","",1,[[["identity"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["identity"]]],[11,"clone","","",1,[[["self"]],["agent"]]],[11,"from","","",0,[[["string"]],["identity"]]],[11,"from","","",1,[[["string"]],["agent"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"eq","","",0,[[["self"],["identity"]],["bool"]]],[11,"ne","","",0,[[["self"],["identity"]],["bool"]]],[11,"eq","","",1,[[["self"],["agent"]],["bool"]]],[11,"ne","","",1,[[["self"],["agent"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"content","","",1,[[["self"]],["content"]]],[11,"from_content","","",1,[[["content"]],["self"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"to_entry","","",1,[[["self"]],["entry"]]],[11,"from_entry","","",1,[[["entry"]],["self"]]]],"paths":[[3,"Identity"],[3,"Agent"]]};
searchIndex["holochain_cas_implementations"]={"doc":"CAS Implementations","items":[[0,"actor","holochain_cas_implementations","",N,N],[3,"SYS","holochain_cas_implementations::actor","",N,N],[4,"Protocol","","riker protocol for all our actors currently this is flat but may be nested/namespaced in the future or multi-protocol riker @see https://github.com/riker-rs/riker/issues/17",N,N],[13,"CasAdd","","",0,N],[13,"CasAddResult","","",0,N],[13,"CasFetch","","",0,N],[13,"CasFetchResult","","",0,N],[13,"CasContains","","",0,N],[13,"CasContainsResult","","",0,N],[13,"EavAdd","","",0,N],[13,"EavAddResult","","",0,N],[13,"EavFetch","","",0,N],[13,"EavFetchResult","","",0,N],[8,"AskSelf","","convenience trait to build fake synchronous facades for actors",N,N],[10,"block_on_ask","","adapter for synchronous code to interact with an actor uses the ask() fn from riker patterns under the hood to create a future then block on it handles passing the actor system through to ask() to hide that implementation detail @see http://riker.rs/patterns/#ask",1,[[["self"],["protocol"]],["result",["protocol","holochainerror"]]]],[0,"cas","holochain_cas_implementations","",N,N],[0,"file","holochain_cas_implementations::cas","",N,N],[3,"FilesystemStorage","holochain_cas_implementations::cas::file","",N,N],[0,"actor","","",N,N],[3,"FilesystemStorageActor","holochain_cas_implementations::cas::file::actor","",N,N],[11,"new","","",2,[[["string"]],["filesystemstorageactor"]]],[11,"new_ref","","",2,[[["str"]],["result",["actorref","holochainerror"]]]],[11,"new","holochain_cas_implementations::cas::file","",3,[[["str"]],["result",["filesystemstorage","holochainerror"]]]],[0,"memory","holochain_cas_implementations::cas","",N,N],[3,"MemoryStorage","holochain_cas_implementations::cas::memory","",N,N],[11,"new","","",4,[[],["result",["memorystorage","holochainerror"]]]],[0,"eav","holochain_cas_implementations","",N,N],[0,"file","holochain_cas_implementations::eav","",N,N],[3,"EavFileStorage","holochain_cas_implementations::eav::file","",N,N],[0,"actor","","",N,N],[3,"EavFileStorageActor","holochain_cas_implementations::eav::file::actor","",N,N],[5,"add_eav_to_hashset","","",N,[[["direntry"],["hashset"]]]],[11,"new","","",5,[[["string"]],["eavfilestorageactor"]]],[11,"new_ref","","",5,[[["str"]],["result",["actorref","holochainerror"]]]],[11,"new","holochain_cas_implementations::eav::file","",6,[[["string"]],["hcresult",["eavfilestorage"]]]],[0,"memory","holochain_cas_implementations::eav","",N,N],[3,"EavMemoryStorage","holochain_cas_implementations::eav::memory","",N,N],[0,"actor","","",N,N],[3,"EavMemoryStorageActor","holochain_cas_implementations::eav::memory::actor","",N,N],[11,"new","","",7,[[],["eavmemorystorageactor"]]],[11,"new_ref","","",7,[[],["hcresult",["actorref"]]]],[11,"new","holochain_cas_implementations::eav::memory","",8,[[],["result",["eavmemorystorage","holochainerror"]]]],[11,"from","holochain_cas_implementations::actor","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::cas::file","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::cas::file::actor","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::cas::memory","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::eav::file","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::eav::file::actor","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::eav::memory","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","holochain_cas_implementations::eav::memory::actor","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"clone","holochain_cas_implementations::actor","",0,[[["self"]],["protocol"]]],[11,"clone","holochain_cas_implementations::cas::file","",3,[[["self"]],["filesystemstorage"]]],[11,"clone","holochain_cas_implementations::cas::memory","",4,[[["self"]],["memorystorage"]]],[11,"clone","holochain_cas_implementations::eav::file","",6,[[["self"]],["eavfilestorage"]]],[11,"clone","holochain_cas_implementations::eav::memory","",8,[[["self"]],["eavmemorystorage"]]],[11,"into","holochain_cas_implementations::actor","",0,[[["self"]],["actormsg",["protocol"]]]],[11,"eq","holochain_cas_implementations::cas::memory","",4,[[["self"],["memorystorage"]],["bool"]]],[11,"ne","","",4,[[["self"],["memorystorage"]],["bool"]]],[11,"eq","holochain_cas_implementations::eav::memory","",8,[[["self"],["eavmemorystorage"]],["bool"]]],[11,"ne","","",8,[[["self"],["eavmemorystorage"]],["bool"]]],[11,"deref","holochain_cas_implementations::actor","",9,[[["self"]],["actorsystem"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_cas_implementations::cas::memory","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_cas_implementations::eav::memory","",8,[[["self"],["formatter"]],["result"]]],[11,"initialize","holochain_cas_implementations::actor","",9,[[["self"]]]],[11,"add","holochain_cas_implementations::cas::file","",3,[[["self"],["addressablecontent"]],["result",["holochainerror"]]]],[11,"contains","","",3,[[["self"],["address"]],["result",["bool","holochainerror"]]]],[11,"fetch","","",3,[[["self"],["address"]],["result",["option","holochainerror"]]]],[11,"add","holochain_cas_implementations::cas::memory","",4,[[["self"],["addressablecontent"]],["result",["holochainerror"]]]],[11,"contains","","",4,[[["self"],["address"]],["result",["bool","holochainerror"]]]],[11,"fetch","","",4,[[["self"],["address"]],["result",["option","holochainerror"]]]],[11,"add_eav","holochain_cas_implementations::eav::file","",6,[[["self"],["entityattributevalue"]],["result",["holochainerror"]]]],[11,"fetch_eav","","",6,[[["self"],["option",["entity"]],["option",["attribute"]],["option",["value"]]],["result",["hashset","holochainerror"]]]],[11,"add_eav","holochain_cas_implementations::eav::memory","",8,[[["self"],["entityattributevalue"]],["result",["holochainerror"]]]],[11,"fetch_eav","","",8,[[["self"],["option",["entity"]],["option",["attribute"]],["option",["value"]]],["result",["hashset","holochainerror"]]]],[11,"receive","holochain_cas_implementations::cas::file::actor","",2,N],[11,"receive","holochain_cas_implementations::eav::file::actor","",5,N],[11,"receive","holochain_cas_implementations::eav::memory::actor","",7,N]],"paths":[[4,"Protocol"],[8,"AskSelf"],[3,"FilesystemStorageActor"],[3,"FilesystemStorage"],[3,"MemoryStorage"],[3,"EavFileStorageActor"],[3,"EavFileStorage"],[3,"EavMemoryStorageActor"],[3,"EavMemoryStorage"],[3,"SYS"]]};
searchIndex["holochain_core"]={"doc":"The library implementing the holochain pattern of validation rules + local source chain + DHT","items":[[0,"action","holochain_core","",N,N],[3,"ActionWrapper","holochain_core::action","Wrapper for actions that provides a unique ID The unique ID is needed for state tracking to ensure that we can differentiate between two Action dispatches containing the same value when doing \"time travel debug\". The standard approach is to drop the ActionWrapper into the key of a state history HashMap and use the convenience unwrap_to! macro to extract the action data in a reducer. All reducer functions must accept an ActionWrapper so all dispatchers take an ActionWrapper.",N,N],[4,"Action","","All Actions for the Holochain Instance Store, according to Redux pattern.",N,N],[13,"Commit","","entry to Commit MUST already have passed all callback checks",0,N],[13,"GetEntry","","GetEntry by address",0,N],[13,"AddLink","","link to add",0,N],[13,"GetLinks","","get links from entry address and attribute-name",0,N],[13,"ExecuteZomeFunction","","execute a function in a zome WASM",0,N],[13,"ReturnZomeFunctionResult","","return the result of a zome WASM function call",0,N],[13,"InitApplication","","initialize an application from a Dna not the same as genesis may call genesis internally",0,N],[13,"ReturnInitializationResult","","return the result of an InitApplication action the result is Some arbitrary string",0,N],[13,"Call","","Execute a zome function call called by another zome function",0,N],[13,"ReturnValidationResult","","A validation result that should be stored Key is an unique id of the calling context and the hash of the entry that was validated",0,N],[6,"AgentReduceFn","","function signature for action handler functions",N,N],[6,"NucleusReduceFn","","",N,N],[6,"ReduceFn","","",N,N],[11,"new","","constructor from &Action internal snowflake ID is automatically set",1,[[["action"]],["self"]]],[11,"action","","read only access to action",1,[[["self"]],["action"]]],[11,"id","","read only access to id",1,[[["self"]],["processuniqueid"]]],[0,"agent","holochain_core","",N,N],[0,"actions","holochain_core::agent","Agent is the module that handles the user’s identity and source chain for every Phenotype.",N,N],[0,"commit","holochain_core::agent::actions","",N,N],[3,"CommitFuture","holochain_core::agent::actions::commit","CommitFuture resolves to ActionResponse Tracks the state for a response to its ActionWrapper",N,N],[5,"commit_entry","","Commit Action Creator This is the high-level commit function that wraps the whole commit process and is what should be called from zome api functions and other contexts that don't care about implementation details.",N,[[["entry"],["syncsender"],["arc"]],["commitfuture"]]],[0,"chain_store","holochain_core::agent","",N,N],[3,"ChainStore","holochain_core::agent::chain_store","",N,N],[3,"ChainStoreIterator","","",N,N],[3,"ChainStoreTypeIterator","","",N,N],[11,"new","","",2,[[["cas"]],["self"]]],[11,"content_storage","","",2,[[["self"]],["cas"]]],[11,"iter","","",2,[[["self"],["option"]],["chainstoreiterator"]]],[11,"iter_type","","",2,[[["self"],["option"],["entrytype"]],["chainstoretypeiterator"]]],[11,"new","","",3,[[["cas"],["option",["chainheader"]]],["chainstoreiterator"]]],[11,"new","","",4,[[["cas"],["option",["chainheader"]]],["chainstoretypeiterator"]]],[0,"state","holochain_core::agent","",N,N],[3,"AgentState","holochain_core::agent::state","The state-slice for the Agent. Holds the agent's source chain and keys.",N,N],[4,"ActionResponse","","the agent's response to an action stored alongside the action in AgentState::actions to provide a state history that observers poll and retrieve",N,N],[13,"Commit","","",5,N],[13,"GetEntry","","",5,N],[13,"GetLinks","","",5,N],[13,"LinkEntries","","",5,N],[5,"reduce","","Reduce Agent's state according to provided Action",N,[[["arc",["context"]],["arc",["agentstate"]],["actionwrapper"]],["arc",["agentstate"]]]],[11,"new","","builds a new, empty AgentState",6,[[["chainstore",["memorystorage"]]],["agentstate"]]],[11,"keys","","getter for a copy of self.keys",6,[[["self"]],["option",["keys"]]]],[11,"actions","","getter for a copy of self.actions uniquely maps action executions to the result of the action",6,[[["self"]],["hashmap",["actionwrapper","actionresponse"]]]],[11,"chain","","",6,[[["self"]],["chainstore",["memorystorage"]]]],[11,"top_chain_header","","",6,[[["self"]],["option",["chainheader"]]]],[0,"context","holochain_core","",N,N],[3,"Context","holochain_core::context","Context holds the components that parts of a Holochain instance need in order to operate. This includes components that are injected from the outside like logger and persister but also the store of the instance that gets injected before passing on the context to inner components/reducers.",N,N],[12,"agent","","",7,N],[12,"logger","","",7,N],[12,"persister","","",7,N],[12,"action_channel","","",7,N],[12,"observer_channel","","",7,N],[11,"default_channel_buffer_size","","",7,[[],["usize"]]],[11,"new","","",7,[[["agent"],["arc",["mutex"]],["arc",["mutex"]]],["context"]]],[11,"new_with_channels","","",7,[[["agent"],["arc",["mutex"]],["arc",["mutex"]],["syncsender",["actionwrapper"]],["syncsender",["observer"]]],["context"]]],[11,"log","","",7,[[["self"],["str"]],["result",["holochainerror"]]]],[11,"state","","",7,[[["self"]],["option",["rwlockreadguard"]]]],[0,"dht","holochain_core","DHT is the module that handles the agent's local shard of data and p2p communications",N,N],[0,"dht_reducers","holochain_core::dht","all DHT reducers",N,N],[5,"reduce","holochain_core::dht::dht_reducers","DHT state-slice Reduce entry point. Note: Can't block when dispatching action here because we are inside the reduce's mutex",N,[[["arc",["context"]],["arc",["dhtstore"]],["actionwrapper"]],["arc",["dhtstore"]]]],[0,"dht_store","holochain_core::dht","",N,N],[3,"Network","holochain_core::dht::dht_store","",N,N],[3,"DhtStore","","The state-slice for the DHT. Holds the agent's local shard and interacts with the network module",N,N],[11,"publish","","",8,[[["self"],["addressablecontent"]]]],[11,"publish_meta","","",8,[[["self"],["entityattributevalue"]]]],[11,"get","","",8,[[["self"],["address"]],["option",["content"]]]],[11,"new","","",9,[[["cas"],["eavs"]],["self"]]],[11,"add_link","","",9,[[["self"],["link"]],["result",["holochainerror"]]]],[11,"remove_link","","",9,[[["self"]]]],[11,"get_links","","",9,[[["self"],["hashstring"],["string"]],["result",["hashset","holochainerror"]]]],[0,"instance","holochain_core","",N,N],[3,"Instance","holochain_core::instance","Object representing a Holochain instance, i.e. a running holochain (DNA + DHT + source-chain) Holds the Event loop and processes it with the redux pattern.",N,N],[3,"Observer","","State Observer that executes a closure everytime the State changes.",N,N],[12,"sensor","","",10,N],[5,"dispatch_action_and_wait","","Send Action to Instance's Event Queue and block until is has been processed.",N,[[["syncsender"],["syncsender"],["actionwrapper"]]]],[5,"dispatch_action_with_observer","","Send Action to the Event Queue and create an Observer for it with the specified closure",N,[[["syncsender"],["syncsender"],["actionwrapper"],["f"]]]],[5,"dispatch_action","","Send Action to the Event Queue",N,[[["syncsender"],["actionwrapper"]]]],[7,"DISPATCH_WITHOUT_CHANNELS","","",N,N],[17,"RECV_DEFAULT_TIMEOUT_MS","","",N,N],[11,"default_channel_buffer_size","","",11,[[],["usize"]]],[11,"action_channel","","get a clone of the action channel",11,[[["self"]],["syncsender",["actionwrapper"]]]],[11,"observer_channel","","get a clone of the observer channel",11,[[["self"]],["syncsender",["observer"]]]],[11,"dispatch","","Stack an Action in the Event Queue",11,[[["self"],["actionwrapper"]]]],[11,"dispatch_and_wait","","Stack an Action in the Event Queue and block until is has been processed.",11,[[["self"],["actionwrapper"]]]],[11,"dispatch_with_observer","","Stack an action in the Event Queue and create an Observer on it with the specified closure",11,[[["self"],["actionwrapper"],["f"]]]],[11,"initialize_context","","",11,[[["self"],["arc",["context"]]],["arc",["context"]]]],[11,"start_action_loop","","Start the Event Loop on a seperate thread",11,[[["self"],["arc",["context"]]]]],[11,"new","","Creates a new Instance with disconnected channels.",11,[[],["self"]]],[11,"state","","",11,[[["self"]],["rwlockreadguard",["state"]]]],[0,"logger","holochain_core","This logger is the logger that's attached to each Holochain application which is separate from standard logging via the log crate warn! info! debug! logging that gets emitted globaly from the container.",N,N],[3,"SimpleLogger","holochain_core::logger","",N,N],[8,"Logger","","trait that defines the logging functionality that holochain_core requires",N,N],[10,"log","","",12,[[["self"],["string"]]]],[0,"nucleus","holochain_core","",N,N],[3,"ZomeFnCall","holochain_core::nucleus","Struct holding data for requesting the execution of a Zome function (ExecutionZomeFunction Action)",N,N],[12,"zome_name","","",13,N],[12,"cap_name","","",13,N],[12,"fn_name","","",13,N],[12,"parameters","","",13,N],[3,"EntrySubmission","","WIP - Struct for holding data when requesting an Entry Validation (ValidateEntry Action)",N,N],[12,"zome_name","","",14,N],[12,"type_name","","",14,N],[12,"entry_content","","",14,N],[3,"ZomeFnResult","","",N,N],[5,"call_zome_and_wait_for_result","","Dispatch ExecuteZoneFunction to and block until call has finished.",N,[[["zomefncall"],["syncsender"],["syncsender"]],["result",["string","holochainerror"]]]],[5,"call_and_wait_for_result","","Dispatch ExecuteZoneFunction to Instance and block until call has finished. for test only??",N,[[["zomefncall"],["instance"]],["result",["string","holochainerror"]]]],[5,"reduce","","Reduce state of Nucleus according to action. Note: Can't block when dispatching action here because we are inside the reduce's mutex",N,[[["arc",["context"]],["arc",["nucleusstate"]],["actionwrapper"]],["arc",["nucleusstate"]]]],[0,"actions","","Nucleus is the module that handles DNA, including the Ribosome.",N,N],[0,"get_entry","holochain_core::nucleus::actions","",N,N],[5,"get_entry","holochain_core::nucleus::actions::get_entry","GetEntry Action Creator",N,[[["arc"],["address"]],["box",["future"]]]],[0,"initialize","holochain_core::nucleus::actions","",N,N],[3,"InitializationFuture","holochain_core::nucleus::actions::initialize","InitializationFuture resolves to an Ok(NucleusStatus) or an Err(String). Tracks the nucleus status.",N,N],[5,"initialize_application","","Initialize Application, Action Creator This is the high-level initialization function that wraps the whole process of initializing an instance. It creates both InitApplication and ReturnInitializationResult actions asynchronously.",N,[[["dna"],["arc",["context"]]],["box",["future"]]]],[0,"validate","holochain_core::nucleus::actions","",N,N],[3,"ValidationFuture","holochain_core::nucleus::actions::validate","ValidationFuture resolves to an Ok(ActionWrapper) or an Err(error_message:String). Tracks the state for ValidationResults.",N,N],[5,"validate_entry","","ValidateEntry Action Creator This is the high-level validate function that wraps the whole validation process and is what should be called from zome api functions and other contexts that don't care about implementation details.",N,[[["entrytype"],["entry"],["validationdata"],["arc"]],["box",["future"]]]],[0,"ribosome","holochain_core::nucleus","The virtual machine that runs DNA written in WASM",N,N],[0,"api","holochain_core::nucleus::ribosome","Module for ZomeApiFunctions ZomeApiFunctions are the functions provided by the ribosome that are callable by Zomes.",N,N],[3,"Runtime","holochain_core::nucleus::ribosome::api","Object holding data to pass around to invoked Zome API functions",N,N],[12,"context","","",15,N],[12,"result","","",15,N],[12,"app_name","","",15,N],[4,"ZomeApiFunction","","Enumeration of all the Zome Functions known and usable in Zomes. Enumeration can convert to str.",N,N],[13,"MissingNo","","Error index for unimplemented functions",16,N],[13,"Abort","","Abort is a way to receive useful debug info from assemblyscript memory allocators message: mem address in the wasm memory for an error message filename: mem address in the wasm memory for a filename line: line number column: column number",16,N],[13,"Debug","","Zome API send debug information to the log debug(s: String)",16,N],[13,"CommitAppEntry","","Commit an app entry to source chain commit_entry(entry_type: String, entry_value: String) -> Hash",16,N],[13,"GetAppEntry","","Get an app entry from source chain by key (header hash) get_entry(address: Address) -> Entry",16,N],[13,"InitGlobals","","Init App Globals hc_init_globals() -> InitGlobalsOutput",16,N],[13,"Call","","Call a zome function in a different capability or zome hc_call(zome_name: String, cap_name: String, fn_name: String, args: String);",16,N],[5,"call","","Executes an exposed function in a wasm binary Multithreaded function panics if wasm isn't valid",N,[[["str"],["arc",["context"]],["vec",["u8"]],["zomefncall"],["option",["vec"]]],["result",["runtime","interpretererror"]]]],[0,"call","","",N,N],[3,"ZomeCallArgs","holochain_core::nucleus::ribosome::api::call","Struct for input data received when Call API function is invoked",N,N],[12,"zome_name","","",17,N],[12,"cap_name","","",17,N],[12,"fn_name","","",17,N],[12,"fn_args","","",17,N],[5,"invoke_call","","HcApiFuncIndex::CALL function code args: [0] encoded MemoryAllocation as u32 expected complex argument: {zome_name: String, cap_name: String, fn_name: String, args: String} args from API call are converted into a ZomeFnCall Launch an Action::Call with newly formed ZomeFnCall Waits for a ZomeFnResult Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[0,"commit","holochain_core::nucleus::ribosome::api","",N,N],[5,"invoke_commit_app_entry","holochain_core::nucleus::ribosome::api::commit","ZomeApiFunction::CommitAppEntry function code args: [0] encoded MemoryAllocation as u32 Expected complex argument: CommitArgs Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[0,"debug","holochain_core::nucleus::ribosome::api","",N,N],[5,"invoke_debug","holochain_core::nucleus::ribosome::api::debug","ZomeApiFunction::Debug function code args: [0] encoded MemoryAllocation as u32 Expecting a string as complex input argument Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[0,"get_entry","holochain_core::nucleus::ribosome::api","",N,N],[5,"invoke_get_entry","holochain_core::nucleus::ribosome::api::get_entry","ZomeApiFunction::GetAppEntry function code args: [0] encoded MemoryAllocation as u32 Expected complex argument: GetEntryArgs Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[0,"get_links","holochain_core::nucleus::ribosome::api","",N,N],[5,"invoke_get_links","holochain_core::nucleus::ribosome::api::get_links","ZomeApiFunction::GetLinks function code args: [0] encoded MemoryAllocation as u32 Expected complex argument: GetLinksArgs Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[0,"init_globals","holochain_core::nucleus::ribosome::api","",N,N],[5,"invoke_init_globals","holochain_core::nucleus::ribosome::api::init_globals","ZomeApiFunction::InitGlobals secret function code args: [0] encoded MemoryAllocation as u32 Not expecting any complex input Returns an HcApiReturnCode as I32",N,[[["runtime"],["runtimeargs"]],["result",["option","trap"]]]],[11,"as_fn","holochain_core::nucleus::ribosome::api","",16,N],[11,"load_utf8_from_args","","Load a string stored in wasm memory. Input RuntimeArgs should only have one input which is the encoded allocation holding the complex data as an utf8 string. Returns the utf8 string.",15,[[["self"],["runtimeargs"]],["string"]]],[11,"store_utf8","","Store a string in wasm memory. Input should be a a json string. Returns a Result suitable to return directly from a zome API function, i.e. an encoded allocation",15,[[["self"],["str"]],["result",["option","trap"]]]],[0,"callback","holochain_core::nucleus::ribosome","Module for ZomeCallbacks ZomeCallbacks are functions in a Zome that are callable by the ribosome.",N,N],[4,"Callback","holochain_core::nucleus::ribosome::callback","Enumeration of all Zome Callbacks known and used by Holochain Enumeration can convert to str",N,N],[13,"MissingNo","","Error index for unimplemented functions",18,N],[13,"Genesis","","MissingNo Capability LifeCycle Capability genesis() -> bool",18,N],[13,"Receive","","Communication Capability receive(from: String, message: String) -> String",18,N],[4,"CallbackParams","","",N,N],[13,"Genesis","","",19,N],[13,"ValidateCommit","","",19,N],[13,"Receive","","",19,N],[4,"CallbackResult","","",N,N],[13,"Pass","","",20,N],[13,"Fail","","",20,N],[13,"NotImplemented","","",20,N],[5,"get_dna","","",N,[[["arc"]],["option",["dna"]]]],[5,"call","","",N,[[["arc",["context"]],["str"],["callback"],["callbackparams"]],["callbackresult"]]],[0,"genesis","","",N,N],[5,"genesis","holochain_core::nucleus::ribosome::callback::genesis","",N,[[["arc",["context"]],["str"],["callbackparams"]],["callbackresult"]]],[0,"receive","holochain_core::nucleus::ribosome::callback","",N,N],[5,"receive","holochain_core::nucleus::ribosome::callback::receive","",N,[[["arc",["context"]],["str"],["callbackparams"]],["callbackresult"]]],[0,"validate_entry","holochain_core::nucleus::ribosome::callback","",N,N],[5,"validate_entry","holochain_core::nucleus::ribosome::callback::validate_entry","",N,[[["entry"],["entrytype"],["validationdata"],["arc",["context"]]],["result",["callbackresult","holochainerror"]]]],[11,"as_fn","holochain_core::nucleus::ribosome::callback","",18,N],[0,"memory","holochain_core::nucleus::ribosome","",N,N],[3,"SinglePageManager","holochain_core::nucleus::ribosome::memory","Struct for managing a WASM Memory Instance as a single page memory stack",N,N],[11,"new","","",21,[[["moduleref"]],["self"]]],[11,"allocate","","Allocate on stack without writing in it",21,[[["self"],["u16"]],["result",["singlepageallocation","ribosomeerrorcode"]]]],[11,"write","","Write data on top of stack",21,N],[11,"read","","Read data somewhere in stack",21,[[["self"],["singlepageallocation"]],["vec",["u8"]]]],[8,"Defn","holochain_core::nucleus::ribosome","",N,N],[10,"as_str","","return the canonical name of this function definition",22,[[["self"]],["str"]]],[10,"str_to_index","","convert the canonical name of this function to an index",22,[[["str"]],["usize"]]],[10,"from_index","","convert an index to the function definition",22,[[["usize"]],["self"]]],[10,"capability","","",22,[[["self"]],["reservedcapabilitynames"]]],[0,"state","holochain_core::nucleus","",N,N],[3,"NucleusState","holochain_core::nucleus::state","The state-slice for the Nucleus. Holds the dynamic parts of the DNA, i.e. zome calls and validation requests.",N,N],[12,"dna","","",23,N],[12,"status","","",23,N],[12,"zome_calls","","",23,N],[12,"validation_results","","",23,N],[4,"NucleusStatus","","",N,N],[13,"New","","",24,N],[13,"Initializing","","",24,N],[13,"Initialized","","",24,N],[13,"InitializationFailed","","",24,N],[6,"ValidationResult","","",N,N],[11,"new","","",23,[[],["self"]]],[11,"zome_call_result","","",23,[[["self"],["zomefncall"]],["option",["result"]]]],[11,"has_initialized","","",23,[[["self"]],["bool"]]],[11,"has_initialization_failed","","",23,[[["self"]],["bool"]]],[11,"dna","","",23,[[["self"]],["option",["dna"]]]],[11,"status","","",23,[[["self"]],["nucleusstatus"]]],[11,"new","holochain_core::nucleus","",13,[[["str"],["str"],["str"],["str"]],["self"]]],[11,"same_fn_as","","",13,[[["self"],["zomefncall"]],["bool"]]],[11,"new","","",14,[[["s"],["s"],["s"]],["self"]]],[11,"call","","read only access to call",25,[[["self"]],["zomefncall"]]],[11,"result","","read only access to result",25,[[["self"]],["result",["string","holochainerror"]]]],[0,"persister","holochain_core","",N,N],[3,"SimplePersister","holochain_core::persister","",N,N],[8,"Persister","","trait that defines the persistence functionality that holochain_core requires",N,N],[10,"save","","",26,[[["self"],["state"]]]],[10,"load","","",26,[[["self"]],["result",["option","holochainerror"]]]],[11,"new","","",27,[[],["self"]]],[0,"state","holochain_core","",N,N],[3,"State","holochain_core::state","The Store of the Holochain instance Object, according to Redux pattern. It's composed of all sub-module's state slices. To plug in a new module, its state slice needs to be added here.",N,N],[12,"history","","",28,N],[5,"test_store","","",N,[[],["state"]]],[11,"new","","",28,[[],["self"]]],[11,"reduce","","",28,[[["self"],["arc",["context"]],["actionwrapper"]],["self"]]],[11,"nucleus","","",28,[[["self"]],["arc",["nucleusstate"]]]],[11,"agent","","",28,[[["self"]],["arc",["agentstate"]]]],[11,"dht","","",28,[[["self"]],["arc",["dhtstore"]]]],[11,"from","holochain_core::action","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"equivalent","","",1,[[["self"],["k"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","holochain_core::agent::actions::commit","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into_future","","",29,[[["self"]],["f"]]],[11,"from","holochain_core::agent::chain_store","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","holochain_core::agent::state","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","holochain_core::context","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","holochain_core::dht::dht_store","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","holochain_core::instance","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","holochain_core::logger","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","holochain_core::nucleus","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"equivalent","","",13,[[["self"],["k"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"equivalent","","",14,[[["self"],["k"]],["bool"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","holochain_core::nucleus::actions::initialize","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into_future","","",31,[[["self"]],["f"]]],[11,"from","holochain_core::nucleus::actions::validate","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into_future","","",32,[[["self"]],["f"]]],[11,"from","holochain_core::nucleus::ribosome::api","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"equivalent","","",16,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core::nucleus::ribosome::api::call","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"equivalent","","",17,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core::nucleus::ribosome::callback","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","holochain_core::nucleus::ribosome::memory","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","holochain_core::nucleus::state","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","holochain_core::persister","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","holochain_core::state","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"log","holochain_core::logger","",30,[[["self"],["string"]]]],[11,"as_str","holochain_core::nucleus::ribosome::api","",16,[[["self"]],["str"]]],[11,"str_to_index","","",16,[[["str"]],["usize"]]],[11,"from_index","","",16,[[["usize"]],["self"]]],[11,"capability","","",16,[[["self"]],["reservedcapabilitynames"]]],[11,"as_str","holochain_core::nucleus::ribosome::callback","",18,[[["self"]],["str"]]],[11,"str_to_index","","",18,[[["str"]],["usize"]]],[11,"from_index","","",18,[[["usize"]],["self"]]],[11,"capability","","",18,[[["self"]],["reservedcapabilitynames"]]],[11,"save","holochain_core::persister","",27,[[["self"],["state"]]]],[11,"load","","",27,[[["self"]],["result",["option","holochainerror"]]]],[11,"clone","holochain_core::action","",1,[[["self"]],["actionwrapper"]]],[11,"clone","","",0,[[["self"]],["action"]]],[11,"clone","holochain_core::agent::chain_store","",2,[[["self"]],["chainstore"]]],[11,"clone","holochain_core::agent::state","",6,[[["self"]],["agentstate"]]],[11,"clone","","",5,[[["self"]],["actionresponse"]]],[11,"clone","holochain_core::context","",7,[[["self"]],["context"]]],[11,"clone","holochain_core::dht::dht_store","",8,[[["self"]],["network"]]],[11,"clone","","",9,[[["self"]],["dhtstore"]]],[11,"clone","holochain_core::instance","",11,[[["self"]],["instance"]]],[11,"clone","holochain_core::logger","",30,[[["self"]],["simplelogger"]]],[11,"clone","holochain_core::nucleus::ribosome::api::call","",17,[[["self"]],["zomecallargs"]]],[11,"clone","holochain_core::nucleus::ribosome::api","",15,[[["self"]],["runtime"]]],[11,"clone","holochain_core::nucleus::ribosome::callback","",20,[[["self"]],["callbackresult"]]],[11,"clone","holochain_core::nucleus::ribosome::memory","",21,[[["self"]],["singlepagemanager"]]],[11,"clone","holochain_core::nucleus::state","",24,[[["self"]],["nucleusstatus"]]],[11,"clone","","",23,[[["self"]],["nucleusstate"]]],[11,"clone","holochain_core::nucleus","",13,[[["self"]],["zomefncall"]]],[11,"clone","","",14,[[["self"]],["entrysubmission"]]],[11,"clone","","",25,[[["self"]],["zomefnresult"]]],[11,"clone","holochain_core::persister","",27,[[["self"]],["simplepersister"]]],[11,"clone","holochain_core::state","",28,[[["self"]],["state"]]],[11,"next","holochain_core::agent::chain_store","May panic if there is an underlying error in the table",3,[[["self"]],["option",["chainheader"]]]],[11,"next","","May panic if there is an underlying error in the table",4,[[["self"]],["option",["chainheader"]]]],[11,"to_string","holochain_core::nucleus::ribosome::callback","",19,[[["self"]],["string"]]],[11,"default","holochain_core::instance","",11,[[],["self"]]],[11,"default","holochain_core::nucleus::ribosome::api::call","",17,[[],["zomecallargs"]]],[11,"default","holochain_core::nucleus::state","",24,[[],["self"]]],[11,"default","","",23,[[],["nucleusstate"]]],[11,"default","holochain_core::persister","",27,[[],["simplepersister"]]],[11,"eq","holochain_core::action","",1,[[["self"],["actionwrapper"]],["bool"]]],[11,"eq","","",0,[[["self"],["action"]],["bool"]]],[11,"ne","","",0,[[["self"],["action"]],["bool"]]],[11,"eq","holochain_core::agent::chain_store","",2,[[["self"],["chainstore"]],["bool"]]],[11,"ne","","",2,[[["self"],["chainstore"]],["bool"]]],[11,"eq","holochain_core::agent::state","",6,[[["self"],["agentstate"]],["bool"]]],[11,"ne","","",6,[[["self"],["agentstate"]],["bool"]]],[11,"eq","","",5,[[["self"],["actionresponse"]],["bool"]]],[11,"ne","","",5,[[["self"],["actionresponse"]],["bool"]]],[11,"eq","holochain_core::dht::dht_store","",8,[[["self"],["network"]],["bool"]]],[11,"eq","","",9,[[["self"],["dhtstore"]],["bool"]]],[11,"ne","","",9,[[["self"],["dhtstore"]],["bool"]]],[11,"eq","holochain_core::nucleus::ribosome::api::call","",17,[[["self"],["zomecallargs"]],["bool"]]],[11,"ne","","",17,[[["self"],["zomecallargs"]],["bool"]]],[11,"eq","holochain_core::nucleus::ribosome::api","",16,[[["self"],["zomeapifunction"]],["bool"]]],[11,"eq","holochain_core::nucleus::ribosome::callback","",18,[[["self"],["callback"]],["bool"]]],[11,"eq","","",20,[[["self"],["callbackresult"]],["bool"]]],[11,"ne","","",20,[[["self"],["callbackresult"]],["bool"]]],[11,"eq","holochain_core::nucleus::state","",24,[[["self"],["nucleusstatus"]],["bool"]]],[11,"ne","","",24,[[["self"],["nucleusstatus"]],["bool"]]],[11,"eq","","",23,[[["self"],["nucleusstate"]],["bool"]]],[11,"ne","","",23,[[["self"],["nucleusstate"]],["bool"]]],[11,"eq","holochain_core::nucleus","",13,[[["self"],["zomefncall"]],["bool"]]],[11,"ne","","",13,[[["self"],["zomefncall"]],["bool"]]],[11,"eq","","",14,[[["self"],["entrysubmission"]],["bool"]]],[11,"ne","","",14,[[["self"],["entrysubmission"]],["bool"]]],[11,"eq","","",25,[[["self"],["zomefnresult"]],["bool"]]],[11,"ne","","",25,[[["self"],["zomefnresult"]],["bool"]]],[11,"eq","holochain_core::persister","",27,[[["self"],["simplepersister"]],["bool"]]],[11,"ne","","",27,[[["self"],["simplepersister"]],["bool"]]],[11,"eq","holochain_core::state","",28,[[["self"],["state"]],["bool"]]],[11,"ne","","",28,[[["self"],["state"]],["bool"]]],[11,"fmt","holochain_core::action","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::agent::chain_store","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::agent::state","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::dht::dht_store","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus::ribosome::api::call","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus::ribosome::api","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus::ribosome::callback","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus::ribosome::memory","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus::state","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::nucleus","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core::state","",28,[[["self"],["formatter"]],["result"]]],[11,"hash","holochain_core::action","@TODO dangerous when persisted! snowflake only guarantees uniqueness per process @see https://github.com/holochain/holochain-rust/issues/203",1,[[["self"],["h"]]]],[11,"hash","holochain_core::nucleus::ribosome::api::call","",17,N],[11,"hash","holochain_core::nucleus","",13,N],[11,"hash","","",14,N],[11,"hash","","",25,N],[11,"from_str","holochain_core::nucleus::ribosome::api","",16,[[["str"]],["result"]]],[11,"from_str","holochain_core::nucleus::ribosome::callback","",18,[[["str"]],["result"]]],[11,"from_i64","holochain_core::nucleus::ribosome::api","",16,[[["i64"]],["option"]]],[11,"from_u64","","",16,[[["u64"]],["option"]]],[11,"from_i64","holochain_core::nucleus::ribosome::callback","",18,[[["i64"]],["option"]]],[11,"from_u64","","",18,[[["u64"]],["option"]]],[11,"serialize","holochain_core::nucleus::ribosome::api::call","",17,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",17,[[["__d"]],["result"]]],[11,"poll","holochain_core::agent::actions::commit","",29,[[["self"],["context"]],["result",["async"]]]],[11,"poll","holochain_core::nucleus::actions::initialize","",31,[[["self"],["context"]],["result",["async"]]]],[11,"poll","holochain_core::nucleus::actions::validate","",32,[[["self"],["context"]],["result",["async"]]]],[11,"invoke_index","holochain_core::nucleus::ribosome::api","",15,[[["self"],["usize"],["runtimeargs"]],["result",["option","trap"]]]],[11,"to_json","holochain_core::agent::state","",5,[[["self"]],["result",["string","holochainerror"]]]]],"paths":[[4,"Action"],[3,"ActionWrapper"],[3,"ChainStore"],[3,"ChainStoreIterator"],[3,"ChainStoreTypeIterator"],[4,"ActionResponse"],[3,"AgentState"],[3,"Context"],[3,"Network"],[3,"DhtStore"],[3,"Observer"],[3,"Instance"],[8,"Logger"],[3,"ZomeFnCall"],[3,"EntrySubmission"],[3,"Runtime"],[4,"ZomeApiFunction"],[3,"ZomeCallArgs"],[4,"Callback"],[4,"CallbackParams"],[4,"CallbackResult"],[3,"SinglePageManager"],[8,"Defn"],[3,"NucleusState"],[4,"NucleusStatus"],[3,"ZomeFnResult"],[8,"Persister"],[3,"SimplePersister"],[3,"State"],[3,"CommitFuture"],[3,"SimpleLogger"],[3,"InitializationFuture"],[3,"ValidationFuture"]]};
searchIndex["holochain_core_api"]={"doc":"holochain_core_api provides a library for container applications to instantiate and run holochain applications.","items":[[3,"Holochain","holochain_core_api","contains a Holochain application instance",N,N],[11,"new","","create a new Holochain instance",0,[[["dna"],["arc",["context"]]],["result",["holochainerror"]]]],[11,"start","","activate the Holochain instance",0,[[["self"]],["result",["holochainerror"]]]],[11,"stop","","deactivate the Holochain instance",0,[[["self"]],["result",["holochainerror"]]]],[11,"call","","call a function in a zome",0,[[["self"],["str"],["str"],["str"],["str"]],["result",["string","holochainerror"]]]],[11,"active","","checks to see if an instance is active",0,[[["self"]],["bool"]]],[11,"state","","return",0,[[["self"]],["result",["state","holochainerror"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"Holochain"]]};
searchIndex["holochain_core_api_c_binding"]={"doc":"","items":[[5,"holochain_new","holochain_core_api_c_binding","",N,N],[5,"holochain_start","","",N,N],[5,"holochain_stop","","",N,N],[5,"holochain_call","","",N,N]],"paths":[]};
searchIndex["holochain_core_types"]={"doc":"Holochain Core Types","items":[[0,"cas","holochain_core_types","",N,N],[0,"content","holochain_core_types::cas","",N,N],[3,"ExampleAddressableContent","holochain_core_types::cas::content","some struct that can be content addressed imagine an Entry, ChainHeader, Meta Value, etc.",N,N],[3,"OtherExampleAddressableContent","","another struct that can be content addressed used to show ExampleCas storing multiple types",N,N],[3,"AddressableContentTestSuite","","",N,N],[6,"Address","","an Address for some Content ideally would be the Content but pragmatically must be Address consider what would happen if we had multi GB addresses...",N,N],[6,"Content","","the Content is a String this is the only way to be confident in persisting all Rust types across all backends",N,N],[8,"AddressableContent","","can be stored as serialized content the content is the address, there is no \"location\" like a file system or URL @see https://en.wikipedia.org/wiki/Content-addressable_storage",N,N],[11,"address","","the Address the Content would be available at once stored in a ContentAddressableStorage default implementation is provided as hashing Content with sha256 the default implementation should cover most use-cases it is critical that there are no hash collisions across all stored AddressableContent it is recommended to implement an \"address space\" prefix for address algorithms that don't offer strong cryptographic guarantees like sha et. al.",0,[[["self"]],["address"]]],[10,"content","","the Content that would be stored in a ContentAddressableStorage",0,[[["self"]],["content"]]],[10,"from_content","","restore/deserialize the original struct/type from serialized Content",0,[[["content"]],["self"]]],[11,"addressable_content_trait_test","","test that trait gives the write content",1,[[["content"],["t"],["string"]]]],[11,"addressable_contents_are_the_same_test","","test that two different addressable contents would give them same thing",1,[[["content"]]]],[11,"addressable_content_round_trip","","",1,[[["vec"],["k"]]]],[0,"storage","holochain_core_types::cas","",N,N],[3,"ExampleContentAddressableStorage","holochain_core_types::cas::storage","some struct to show an example ContentAddressableStorage implementation this is a thread-safe wrapper around the non-thread-safe implementation below @see ExampleContentAddressableStorageActor",N,N],[3,"ExampleContentAddressableStorageContent","","Not thread-safe CAS implementation with a HashMap",N,N],[3,"StorageTestSuite","","",N,N],[12,"cas","","",2,N],[12,"cas_clone","","it is important that every cloned copy of any CAS has a consistent view to data",2,N],[3,"EavTestSuite","","",N,N],[5,"test_content_addressable_storage","","",N,[[],["examplecontentaddressablestorage"]]],[8,"ContentAddressableStorage","","content addressable store (CAS) implements storage in memory or persistently anything implementing AddressableContent can be added and fetched by address CAS is append only",N,N],[10,"add","","adds AddressableContent to the ContentAddressableStorage by its Address as Content",3,[[["self"],["addressablecontent"]],["result",["holochainerror"]]]],[10,"contains","","true if the Address is in the Store, false otherwise. may be more efficient than retrieve depending on the implementation.",3,[[["self"],["address"]],["result",["bool","holochainerror"]]]],[10,"fetch","","returns Some AddressableContent if it is in the Store, else None AddressableContent::from_content() can be used to allow the compiler to infer the type @see the fetch implementation for ExampleCas in the cas module tests",3,[[["self"],["address"]],["result",["option","holochainerror"]]]],[11,"new","","",4,[[],["result",["examplecontentaddressablestorage","holochainerror"]]]],[11,"new","","",5,[[],["examplecontentaddressablestoragecontent"]]],[11,"new","","",2,[[["t"]],["storagetestsuite"]]],[11,"round_trip_test","","",2,[[["self"],["content"],["content"]]]],[11,"test_round_trip","","",6,N],[11,"test_one_to_many","","",6,[[["s"]]]],[11,"test_many_to_one","","",6,[[["s"]]]],[0,"chain_header","holochain_core_types","",N,N],[3,"ChainHeader","holochain_core_types::chain_header","ChainHeader of a source chain \"Item\" The hash of the ChainHeader is used as the Item's key in the source chain hash table ChainHeaders are linked to next header in chain and next header of same type in chain",N,N],[5,"test_chain_header","","returns a dummy header for use in tests",N,[[],["chainheader"]]],[11,"new","","build a new ChainHeader from a chain, entry type and entry. a ChainHeader is immutable, but the chain is mutable if chain.push() is used. this means that a header becomes invalid and useless as soon as the chain is mutated the only valid usage of a header is to immediately push it onto a chain in a Pair. normally (outside unit tests) the generation of valid headers is internal to the chain::SourceChain trait and should not need to be handled manually",7,[[["entrytype"],["address"],["signature"],["option"],["option"],["iso8601"]],["self"]]],[11,"from_json_str","","",7,[[["str"]],["result"]]],[11,"entry_type","","entry_type getter",7,[[["self"]],["entrytype"]]],[11,"timestamp","","timestamp getter",7,[[["self"]],["iso8601"]]],[11,"link","","link getter",7,[[["self"]],["option",["address"]]]],[11,"entry_address","","entry_address getter",7,[[["self"]],["address"]]],[11,"link_same_type","","link_same_type getter",7,[[["self"]],["option",["address"]]]],[11,"entry_signature","","entry_signature getter",7,[[["self"]],["signature"]]],[0,"crud_status","holochain_core_types","",N,N],[3,"CrudStatus","holochain_core_types::crud_status","the CRUD status of a Pair is stored as EntryMeta in the hash table, NOT in the entry itself statuses are represented as bitflags so we can easily build masks for filtering lookups",N,N],[17,"STATUS_NAME","","",N,N],[17,"LINK_NAME","","",N,N],[18,"LIVE","","",8,N],[18,"REJECTED","","",8,N],[18,"DELETED","","",8,N],[18,"MODIFIED","","",8,N],[18,"LOCKED","","CRDT resolution in progress",8,N],[11,"empty","","Returns an empty set of flags.",8,[[],["crudstatus"]]],[11,"all","","Returns the set containing all flags.",8,[[],["crudstatus"]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,[[["u8"]],["option",["crudstatus"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,[[["u8"]],["crudstatus"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",8,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,[[["self"],["crudstatus"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,[[["self"],["crudstatus"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["self"],["crudstatus"]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["self"],["crudstatus"]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["self"],["crudstatus"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",8,[[["self"],["crudstatus"],["bool"]]]],[0,"eav","holochain_core_types","",N,N],[3,"EntityAttributeValue","holochain_core_types::eav","",N,N],[3,"ExampleEntityAttributeValueStorageNonSync","","",N,N],[3,"ExampleEntityAttributeValueStorage","","",N,N],[5,"test_eav_entity","","",N,[[],["entry"]]],[5,"test_eav_attribute","","",N,[[],["string"]]],[5,"test_eav_value","","",N,[[],["entry"]]],[5,"test_eav","","",N,[[],["entityattributevalue"]]],[5,"test_eav_content","","",N,[[],["content"]]],[5,"test_eav_address","","",N,[[],["address"]]],[5,"eav_round_trip_test_runner","","",N,N],[6,"Entity","","EAV (entity-attribute-value) data ostensibly for metadata about entries in the DHT defines relationships between AddressableContent values implemented on top of cas::storage::ContentAddressableStorage @see https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model Address of AddressableContent representing the EAV entity",N,N],[6,"Attribute","","using String for EAV attributes (not e.g. an enum) keeps it simple and open",N,N],[6,"Value","","Address of AddressableContent representing the EAV value",N,N],[8,"EntityAttributeValueStorage","","eav storage does NOT provide storage for AddressableContent use cas::storage::ContentAddressableStorage to store AddressableContent provides a simple and flexible interface to define relationships between AddressableContent",N,N],[10,"add_eav","","adds the given EntityAttributeValue to the EntityAttributeValueStorage append only storage eavs are retrieved through constraint based lookups @see fetch_eav",9,[[["self"],["entityattributevalue"]],["result",["holochainerror"]]]],[10,"fetch_eav","","fetches the set of EntityAttributeValues that match constraints None = no constraint Some(Entity) = requires the given entity (e.g. all a/v pairs for the entity) Some(Attribute) = requires the given attribute (e.g. all links) Some(Value) = requires the given value (e.g. all entities referencing an Address)",9,[[["self"],["option",["entity"]],["option",["attribute"]],["option",["value"]]],["result",["hashset","holochainerror"]]]],[11,"new","","",10,[[["entity"],["attribute"],["value"]],["entityattributevalue"]]],[11,"entity","","",10,[[["self"]],["entity"]]],[11,"attribute","","",10,[[["self"]],["attribute"]]],[11,"value","","",10,[[["self"]],["value"]]],[11,"filter_on_eav","","",10,[[["t"],["option"]],["bool"]]],[11,"new","","",11,[[],["exampleentityattributevaluestoragenonsync"]]],[11,"new","","",12,[[],["hcresult",["exampleentityattributevaluestorage"]]]],[0,"entry","holochain_core_types","",N,N],[3,"Entry","holochain_core_types::entry","Structure holding actual data in a source chain \"Item\" data is stored as a JSON string",N,N],[5,"test_entry_value","","dummy entry value",N,[[],["string"]]],[5,"test_entry_content","","",N,[[],["content"]]],[5,"test_entry_value_a","","dummy entry content, same as test_entry_content()",N,[[],["string"]]],[5,"test_entry_value_b","","dummy entry content, differs from test_entry_content()",N,[[],["string"]]],[5,"test_sys_entry_value","","",N,[[],["string"]]],[5,"test_entry","","dummy entry",N,[[],["entry"]]],[5,"test_entry_address","","the correct hash for test_entry()",N,[[],["address"]]],[5,"test_entry_a","","dummy entry, same as test_entry()",N,[[],["entry"]]],[5,"test_entry_b","","dummy entry, differs from test_entry()",N,[[],["entry"]]],[5,"test_entry_unique","","dummy entry with unique string content",N,[[],["entry"]]],[5,"test_sys_entry","","",N,[[],["entry"]]],[5,"test_sys_entry_address","","",N,[[],["address"]]],[5,"test_unpublishable_entry","","",N,[[],["entry"]]],[8,"ToEntry","","",N,N],[10,"to_entry","","",13,[[["self"]],["entry"]]],[10,"from_entry","","",13,[[["entry"]],["self"]]],[11,"value","","",14,[[["self"]],["content"]]],[11,"entry_type","","",14,[[["self"]],["entrytype"]]],[11,"new","","",14,[[["entrytype"],["content"]],["entry"]]],[0,"entry_type","holochain_core_types","",N,N],[4,"EntryType","holochain_core_types::entry_type","",N,N],[13,"AgentId","","",15,N],[13,"Deletion","","",15,N],[13,"App","","",15,N],[13,"Dna","","",15,N],[13,"ChainHeader","","",15,N],[13,"Key","","",15,N],[13,"Link","","",15,N],[13,"Migration","","",15,N],[13,"LinkList","","TODO #339 - This is different kind of SystemEntry for the DHT only. Should be moved into a different enum for DHT entry types.",15,N],[5,"test_entry_type","","dummy entry type",N,[[],["entrytype"]]],[5,"test_entry_type_a","","dummy entry type, same as test_type()",N,[[],["entrytype"]]],[5,"test_entry_type_b","","dummy entry type, differs from test_type()",N,[[],["entrytype"]]],[5,"test_sys_entry_type","","",N,[[],["entrytype"]]],[5,"test_unpublishable_entry_type","","",N,[[],["entrytype"]]],[11,"is_app","","",15,[[["self"]],["bool"]]],[11,"is_sys","","",15,[[["self"]],["bool"]]],[11,"can_publish","","",15,[[["self"]],["bool"]]],[11,"has_valid_app_name","","Checks entry_type_name is valid",15,[[["str"]],["bool"]]],[11,"as_str","","",15,[[["self"]],["str"]]],[0,"error","holochain_core_types","",N,N],[4,"HolochainError","holochain_core_types::error","Enum holding all Holochain specific errors",N,N],[13,"ErrorGeneric","","",16,N],[13,"InstanceNotActive","","",16,N],[13,"InstanceActive","","",16,N],[13,"NotImplemented","","",16,N],[13,"LoggingError","","",16,N],[13,"DnaMissing","","",16,N],[13,"DnaError","","",16,N],[13,"IoError","","",16,N],[13,"SerializationError","","",16,N],[13,"InvalidOperationOnSysEntry","","",16,N],[13,"DoesNotHaveCapabilityToken","","",16,N],[13,"ValidationFailed","","",16,N],[4,"DnaError","","",N,N],[13,"ZomeNotFound","","",17,N],[13,"CapabilityNotFound","","",17,N],[13,"ZomeFunctionNotFound","","",17,N],[6,"HcResult","","",N,N],[11,"new","","",16,[[["str"]],["holochainerror"]]],[0,"file_validation","holochain_core_types","",N,N],[5,"validate_canonical_path","holochain_core_types::file_validation","",N,[[["str"]],["result",["string","holochainerror"]]]],[0,"get_links_args","holochain_core_types","",N,N],[3,"GetLinksArgs","holochain_core_types::get_links_args","",N,N],[12,"entry_address","","",18,N],[12,"tag","","",18,N],[11,"to_attribute_name","","",18,[[["self"]],["string"]]],[0,"hash","holochain_core_types","",N,N],[3,"HashString","holochain_core_types::hash","",N,N],[11,"new","","",19,[[],["hashstring"]]],[11,"encode_from_bytes","","convert bytes to a b58 hashed string",19,N],[11,"encode_from_str","","convert a string as bytes to a b58 hashed string",19,[[["str"],["hash"]],["hashstring"]]],[11,"encode_from_serializable","","magic all in one fn, take a serializable something + hash type and get a hashed b58 string back",19,[[["s"],["hash"]],["hashstring"]]],[0,"json","holochain_core_types","",N,N],[8,"ToJson","holochain_core_types::json","",N,N],[10,"to_json","","serialize self to a canonical JSON string",20,[[["self"]],["result",["string","holochainerror"]]]],[8,"FromJson","","",N,N],[10,"from_json","","deserialize a Pair from a canonical JSON string",21,[[["str"]],["result",["holochainerror"]]]],[8,"RoundTripJson","","",N,N],[0,"keys","holochain_core_types","",N,N],[3,"Key","holochain_core_types::keys","represents a single Key e.g. private + public keys would be two Key structs",N,N],[3,"Keys","","represents a set of Keys for an agent includes both public and private keys also includes the node id of the agent with these keys",N,N],[5,"test_key","","generates a new key suitable for testing",N,[[],["key"]]],[5,"test_public_key","","dummy public key",N,[[],["key"]]],[5,"test_private_key","","dummy private key",N,[[],["key"]]],[5,"test_node_id","","generates a new node id suitable for testing",N,[[],["string"]]],[5,"test_keys","","generates new id/pub/priv keys suitable for testing",N,[[],["keys"]]],[11,"new","","returns a new agent Key",22,[[],["key"]]],[11,"new","","returns a new set of agent Keys",23,[[["key"],["key"],["s"]],["keys"]]],[11,"public_key","","getter for the public key",23,[[["self"]],["key"]]],[11,"private_key","","getter for the private key",23,[[["self"]],["key"]]],[11,"node_id","","getter for the node id",23,[[["self"]],["string"]]],[0,"links_entry","holochain_core_types","",N,N],[3,"Link","holochain_core_types::links_entry","",N,N],[3,"LinkEntry","","",N,N],[3,"LinkListEntry","","",N,N],[4,"LinkActionKind","","",N,N],[13,"ADD","","",24,N],[13,"DELETE","","",24,N],[11,"new","","",25,[[["address"],["address"],["str"]],["self"]]],[11,"base","","",25,[[["self"]],["address"]]],[11,"target","","",25,[[["self"]],["address"]]],[11,"tag","","",25,[[["self"]],["string"]]],[11,"new","","",26,[[["linkactionkind"],["address"],["address"],["str"]],["self"]]],[11,"action_kind","","",26,[[["self"]],["linkactionkind"]]],[11,"link","","",26,[[["self"]],["link"]]],[11,"from_link","","",26,[[["linkactionkind"],["link"]],["self"]]],[11,"new","","",27,N],[11,"links","","",27,[[["self"]],["vec"]]],[0,"signature","holochain_core_types","",N,N],[3,"Signature","holochain_core_types::signature","",N,N],[5,"test_signature","","",N,[[],["signature"]]],[5,"test_signature_b","","",N,[[],["signature"]]],[0,"time","holochain_core_types","",N,N],[3,"Iso8601","holochain_core_types::time","",N,N],[5,"test_iso_8601","","",N,[[],["iso8601"]]],[0,"validation","holochain_core_types","",N,N],[3,"ValidationData","holochain_core_types::validation","",N,N],[12,"chain_header","","",28,N],[12,"sources","","",28,N],[12,"source_chain_entries","","",28,N],[12,"source_chain_headers","","",28,N],[12,"custom","","",28,N],[12,"lifecycle","","",28,N],[12,"action","","",28,N],[4,"HcEntryLifecycle","","",N,N],[13,"Chain","","",29,N],[13,"Dht","","",29,N],[13,"Meta","","",29,N],[4,"HcEntryAction","","",N,N],[13,"Commit","","",30,N],[13,"Modify","","",30,N],[13,"Delete","","",30,N],[4,"HcLinkAction","","",N,N],[13,"Commit","","",31,N],[13,"Delete","","",31,N],[11,"from","holochain_core_types::cas::content","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"equivalent","","",32,[[["self"],["k"]],["bool"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","holochain_core_types::cas::storage","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","holochain_core_types::chain_header","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","holochain_core_types::crud_status","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"equivalent","","",8,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core_types::eav","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"equivalent","","",10,[[["self"],["k"]],["bool"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","holochain_core_types::entry","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","holochain_core_types::entry_type","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","holochain_core_types::error","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"equivalent","","",16,[[["self"],["k"]],["bool"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"equivalent","","",17,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core_types::get_links_args","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"equivalent","","",18,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core_types::hash","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"equivalent","","",19,[[["self"],["k"]],["bool"]]],[11,"from","holochain_core_types::keys","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","holochain_core_types::links_entry","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"equivalent","","",25,[[["self"],["k"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","holochain_core_types::signature","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","holochain_core_types::time","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","holochain_core_types::validation","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"content","holochain_core_types","",36,[[["self"]],["content"]]],[11,"from_content","","",36,[[["content"]],["self"]]],[11,"content","holochain_core_types::cas::content","",32,[[["self"]],["content"]]],[11,"from_content","","",32,[[["content"]],["self"]]],[11,"address","","",33,[[["self"]],["address"]]],[11,"content","","",33,[[["self"]],["content"]]],[11,"from_content","","",33,[[["content"]],["self"]]],[11,"content","holochain_core_types::chain_header","",7,[[["self"]],["content"]]],[11,"from_content","","",7,[[["content"]],["self"]]],[11,"content","holochain_core_types::crud_status","",8,[[["self"]],["content"]]],[11,"from_content","","",8,[[["content"]],["self"]]],[11,"content","holochain_core_types::eav","",10,[[["self"]],["content"]]],[11,"from_content","","",10,[[["content"]],["self"]]],[11,"content","holochain_core_types::entry","",14,[[["self"]],["content"]]],[11,"from_content","","",14,[[["content"]],["self"]]],[11,"add","holochain_core_types::cas::storage","",4,[[["self"],["addressablecontent"]],["result",["holochainerror"]]]],[11,"contains","","",4,[[["self"],["address"]],["result",["bool","holochainerror"]]]],[11,"fetch","","",4,[[["self"],["address"]],["result",["option","holochainerror"]]]],[11,"add_eav","holochain_core_types::eav","",12,[[["self"],["entityattributevalue"]],["hcresult"]]],[11,"fetch_eav","","",12,[[["self"],["option",["entity"]],["option",["attribute"]],["option",["value"]]],["result",["hashset","holochainerror"]]]],[11,"to_entry","holochain_core_types::chain_header","",7,[[["self"]],["entry"]]],[11,"from_entry","","",7,[[["entry"]],["self"]]],[11,"to_entry","holochain_core_types::links_entry","",26,[[["self"]],["entry"]]],[11,"from_entry","","",26,[[["entry"]],["self"]]],[11,"to_entry","","",27,[[["self"]],["entry"]]],[11,"from_entry","","",27,[[["entry"]],["self"]]],[11,"to_json","holochain_core_types::chain_header","",7,[[["self"]],["result",["string","holochainerror"]]]],[11,"to_json","holochain_core_types::entry","@TODO return canonical JSON @see https://github.com/holochain/holochain-rust/issues/75",14,[[["self"]],["result",["string","holochainerror"]]]],[11,"to_json","holochain_core_types::error","",16,[[["self"]],["result",["string","holochainerror"]]]],[11,"from_json","holochain_core_types::entry","@TODO accept canonical JSON @see https://github.com/holochain/holochain-rust/issues/75",14,[[["str"]],["result",["holochainerror"]]]],[11,"clone","holochain_core_types::cas::content","",32,[[["self"]],["exampleaddressablecontent"]]],[11,"clone","","",33,[[["self"]],["otherexampleaddressablecontent"]]],[11,"clone","holochain_core_types::cas::storage","",4,[[["self"]],["examplecontentaddressablestorage"]]],[11,"clone","holochain_core_types::chain_header","",7,[[["self"]],["chainheader"]]],[11,"clone","holochain_core_types::crud_status","",8,[[["self"]],["crudstatus"]]],[11,"clone","holochain_core_types::eav","",10,[[["self"]],["entityattributevalue"]]],[11,"clone","","",12,[[["self"]],["exampleentityattributevaluestorage"]]],[11,"clone","holochain_core_types::entry","",14,[[["self"]],["entry"]]],[11,"clone","holochain_core_types::entry_type","",15,[[["self"]],["entrytype"]]],[11,"clone","holochain_core_types::error","",16,[[["self"]],["holochainerror"]]],[11,"clone","","",17,[[["self"]],["dnaerror"]]],[11,"clone","holochain_core_types::get_links_args","",18,[[["self"]],["getlinksargs"]]],[11,"clone","holochain_core_types::hash","",19,[[["self"]],["hashstring"]]],[11,"clone","holochain_core_types::keys","",22,[[["self"]],["key"]]],[11,"clone","","",23,[[["self"]],["keys"]]],[11,"clone","holochain_core_types::links_entry","",25,[[["self"]],["link"]]],[11,"clone","","",24,[[["self"]],["linkactionkind"]]],[11,"clone","","",26,[[["self"]],["linkentry"]]],[11,"clone","","",27,[[["self"]],["linklistentry"]]],[11,"clone","holochain_core_types::signature","",34,[[["self"]],["signature"]]],[11,"clone","holochain_core_types::time","",35,[[["self"]],["iso8601"]]],[11,"extend","holochain_core_types::crud_status","",8,[[["self"],["t"]]]],[11,"from","","",8,[[["string"]],["crudstatus"]]],[11,"from","holochain_core_types::entry","",14,[[["string"]],["self"]]],[11,"from","holochain_core_types::error","",16,[[["ioerror"]],["self"]]],[11,"from","","",16,[[["serdeerror"]],["self"]]],[11,"from","","",16,[[["futurecanceled"]],["self"]]],[11,"from","holochain_core_types::hash","",19,[[["string"]],["hashstring"]]],[11,"from","","",19,[[["str"]],["hashstring"]]],[11,"from","holochain_core_types::links_entry","",26,[[["string"]],["linkentry"]]],[11,"from","","",27,[[["string"]],["linklistentry"]]],[11,"from","holochain_core_types::signature","",34,[[["str"]],["signature"]]],[11,"from","holochain_core_types::time","",35,[[["str"]],["iso8601"]]],[11,"to_string","holochain_core_types::crud_status","",8,[[["self"]],["string"]]],[11,"to_string","holochain_core_types::links_entry","",26,[[["self"]],["string"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"partial_cmp","holochain_core_types::crud_status","",8,[[["self"],["crudstatus"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"le","","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"gt","","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"ge","","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"partial_cmp","holochain_core_types::hash","",19,[[["self"],["hashstring"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["hashstring"]],["bool"]]],[11,"le","","",19,[[["self"],["hashstring"]],["bool"]]],[11,"gt","","",19,[[["self"],["hashstring"]],["bool"]]],[11,"ge","","",19,[[["self"],["hashstring"]],["bool"]]],[11,"default","holochain_core_types::crud_status","",8,[[],["crudstatus"]]],[11,"default","holochain_core_types::get_links_args","",18,[[],["getlinksargs"]]],[11,"default","holochain_core_types::hash","",19,[[],["hashstring"]]],[11,"default","holochain_core_types::keys","",22,[[],["key"]]],[11,"default","","",23,[[],["keys"]]],[11,"eq","holochain_core_types::cas::content","",32,[[["self"],["exampleaddressablecontent"]],["bool"]]],[11,"ne","","",32,[[["self"],["exampleaddressablecontent"]],["bool"]]],[11,"eq","","",33,[[["self"],["otherexampleaddressablecontent"]],["bool"]]],[11,"ne","","",33,[[["self"],["otherexampleaddressablecontent"]],["bool"]]],[11,"eq","holochain_core_types::chain_header","",7,[[["self"],["chainheader"]],["bool"]]],[11,"eq","holochain_core_types::crud_status","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"ne","","",8,[[["self"],["crudstatus"]],["bool"]]],[11,"eq","holochain_core_types::eav","",10,[[["self"],["entityattributevalue"]],["bool"]]],[11,"ne","","",10,[[["self"],["entityattributevalue"]],["bool"]]],[11,"eq","holochain_core_types::entry","",14,[[["self"],["entry"]],["bool"]]],[11,"eq","holochain_core_types::entry_type","",15,[[["self"],["entrytype"]],["bool"]]],[11,"ne","","",15,[[["self"],["entrytype"]],["bool"]]],[11,"eq","holochain_core_types::error","",16,[[["self"],["holochainerror"]],["bool"]]],[11,"ne","","",16,[[["self"],["holochainerror"]],["bool"]]],[11,"eq","","",17,[[["self"],["dnaerror"]],["bool"]]],[11,"ne","","",17,[[["self"],["dnaerror"]],["bool"]]],[11,"eq","holochain_core_types::get_links_args","",18,[[["self"],["getlinksargs"]],["bool"]]],[11,"ne","","",18,[[["self"],["getlinksargs"]],["bool"]]],[11,"eq","holochain_core_types::hash","",19,[[["self"],["hashstring"]],["bool"]]],[11,"ne","","",19,[[["self"],["hashstring"]],["bool"]]],[11,"eq","holochain_core_types::keys","",22,[[["self"],["key"]],["bool"]]],[11,"eq","","",23,[[["self"],["keys"]],["bool"]]],[11,"ne","","",23,[[["self"],["keys"]],["bool"]]],[11,"eq","holochain_core_types::links_entry","",25,[[["self"],["link"]],["bool"]]],[11,"ne","","",25,[[["self"],["link"]],["bool"]]],[11,"eq","","",24,[[["self"],["linkactionkind"]],["bool"]]],[11,"eq","","",26,[[["self"],["linkentry"]],["bool"]]],[11,"ne","","",26,[[["self"],["linkentry"]],["bool"]]],[11,"eq","","",27,[[["self"],["linklistentry"]],["bool"]]],[11,"ne","","",27,[[["self"],["linklistentry"]],["bool"]]],[11,"eq","holochain_core_types::signature","",34,[[["self"],["signature"]],["bool"]]],[11,"ne","","",34,[[["self"],["signature"]],["bool"]]],[11,"eq","holochain_core_types::time","",35,[[["self"],["iso8601"]],["bool"]]],[11,"ne","","",35,[[["self"],["iso8601"]],["bool"]]],[11,"cmp","holochain_core_types::crud_status","",8,[[["self"],["crudstatus"]],["ordering"]]],[11,"cmp","holochain_core_types::hash","",19,[[["self"],["hashstring"]],["ordering"]]],[11,"deref","holochain_core_types::entry","",14,N],[11,"fmt","holochain_core_types::entry_type","",15,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","holochain_core_types::error","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::hash","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::cas::content","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::chain_header","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::crud_status","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::eav","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::entry","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::entry_type","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::error","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::get_links_args","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::hash","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::keys","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::links_entry","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::signature","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_core_types::time","",35,[[["self"],["formatter"]],["result"]]],[11,"sub","holochain_core_types::crud_status","Returns the set difference of the two sets of flags.",8,[[["self"],["crudstatus"]],["crudstatus"]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["self"],["crudstatus"]]]],[11,"not","","Returns the complement of this set of flags.",8,[[["self"]],["crudstatus"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["self"],["crudstatus"]],["crudstatus"]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["self"],["crudstatus"]],["crudstatus"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,[[["self"],["crudstatus"]],["crudstatus"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["self"],["crudstatus"]]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["self"],["crudstatus"]]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["self"],["crudstatus"]]]],[11,"hash","holochain_core_types::cas::content","",32,N],[11,"hash","holochain_core_types::crud_status","",8,N],[11,"hash","holochain_core_types::eav","",10,N],[11,"hash","holochain_core_types::entry_type","",15,N],[11,"hash","holochain_core_types::error","",16,N],[11,"hash","","",17,N],[11,"hash","holochain_core_types::get_links_args","",18,N],[11,"hash","holochain_core_types::hash","",19,N],[11,"hash","holochain_core_types::links_entry","",25,N],[11,"from_iter","holochain_core_types::crud_status","",8,[[["t"]],["crudstatus"]]],[11,"from_str","holochain_core_types::entry_type","",15,[[["str"]],["result"]]],[11,"fmt","holochain_core_types::crud_status","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","holochain_core_types::error","",16,[[["self"]],["str"]]],[11,"description","","",17,[[["self"]],["str"]]],[11,"serialize","holochain_core_types::chain_header","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::eav","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::entry","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::entry_type","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::get_links_args","",18,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::hash","",19,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::links_entry","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::signature","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::time","",35,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_core_types::validation","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",29,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","","",31,[[["self"],["__s"]],["result"]]],[11,"deserialize","holochain_core_types::chain_header","",7,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::eav","",10,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::entry","",14,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::entry_type","",15,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::get_links_args","",18,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::hash","",19,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::links_entry","",25,[[["__d"]],["result"]]],[11,"deserialize","","",24,[[["__d"]],["result"]]],[11,"deserialize","","",26,[[["__d"]],["result"]]],[11,"deserialize","","",27,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::signature","",34,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::time","",35,[[["__d"]],["result"]]],[11,"deserialize","holochain_core_types::validation","",28,[[["__d"]],["result"]]],[11,"deserialize","","",29,[[["__d"]],["result"]]],[11,"deserialize","","",30,[[["__d"]],["result"]]],[11,"deserialize","","",31,[[["__d"]],["result"]]]],"paths":[[8,"AddressableContent"],[3,"AddressableContentTestSuite"],[3,"StorageTestSuite"],[8,"ContentAddressableStorage"],[3,"ExampleContentAddressableStorage"],[3,"ExampleContentAddressableStorageContent"],[3,"EavTestSuite"],[3,"ChainHeader"],[3,"CrudStatus"],[8,"EntityAttributeValueStorage"],[3,"EntityAttributeValue"],[3,"ExampleEntityAttributeValueStorageNonSync"],[3,"ExampleEntityAttributeValueStorage"],[8,"ToEntry"],[3,"Entry"],[4,"EntryType"],[4,"HolochainError"],[4,"DnaError"],[3,"GetLinksArgs"],[3,"HashString"],[8,"ToJson"],[8,"FromJson"],[3,"Key"],[3,"Keys"],[4,"LinkActionKind"],[3,"Link"],[3,"LinkEntry"],[3,"LinkListEntry"],[3,"ValidationData"],[4,"HcEntryLifecycle"],[4,"HcEntryAction"],[4,"HcLinkAction"],[3,"ExampleAddressableContent"],[3,"OtherExampleAddressableContent"],[3,"Signature"],[3,"Iso8601"],[6,"Content"]]};
searchIndex["holochain_dna"]={"doc":"holochain_dna is a library for working with holochain dna files.","items":[[3,"Dna","holochain_dna","Represents the top-level holochain dna object.",N,N],[12,"name","","The top-level \"name\" of a holochain application.",0,N],[12,"description","","The top-level \"description\" of a holochain application.",0,N],[12,"version","","The semantic version of your holochain application.",0,N],[12,"uuid","","A unique identifier to distinguish your holochain application.",0,N],[12,"dna_spec_version","","Which version of the holochain dna spec does this represent?",0,N],[12,"properties","","Any arbitrary application properties can be included in this object.",0,N],[12,"zomes","","An array of zomes associated with your holochain application.",0,N],[0,"wasm","","holochain_dna::wasm is a module for managing webassembly code - within the in-memory dna struct - and serialized to json",N,N],[3,"DnaWasm","holochain_dna::wasm","Represents web assembly code.",N,N],[12,"code","","The actual binary WebAssembly bytecode goes here.",1,N],[11,"new","","Allow sane defaults for `DnaWasm::new()`.",1,[[],["self"]]],[0,"zome","holochain_dna","holochain_dna::zome is a set of structs for working with holochain dna.",N,N],[3,"Config","holochain_dna::zome","Represents the \"config\" object on a \"zome\".",N,N],[12,"error_handling","","How errors should be handled within this zome.",2,N],[3,"Zome","","Represents an individual \"zome\".",N,N],[12,"description","","A description of this zome.",3,N],[12,"config","","Configuration associated with this zome. Note, this should perhaps be a more free-form serde_json::Value, \"throw-errors\" may not make sense for wasm, or other ribosome types.",3,N],[12,"entry_types","","An array of entry_types associated with this zome.",3,N],[12,"capabilities","","An array of capabilities associated with this zome.",3,N],[12,"code","","Validation code for this entry_type.",3,N],[4,"ErrorHandling","","Enum for \"zome\" \"config\" \"error_handling\" property.",N,N],[13,"ThrowErrors","","",4,N],[0,"capabilities","","File holding all the structs for handling capabilities defined in DNA.",N,N],[3,"CapabilityType","holochain_dna::zome::capabilities","Represents the \"capability\" sub-object on a \"zome\" \"capabilities\" object.",N,N],[12,"membrane","","How visibility should be handled for this capability.",5,N],[3,"FnParameter","","",N,N],[12,"parameter_type","","",6,N],[12,"name","","",6,N],[3,"FnDeclaration","","Represents a zome \"fn_declarations\" object.",N,N],[12,"name","","The name of this fn declaration.",7,N],[12,"inputs","","",7,N],[12,"outputs","","",7,N],[3,"Capability","","Represents an individual object in the \"zome\" \"capabilities\" array.",N,N],[12,"cap_type","","\"capability\" sub-object",8,N],[12,"functions","","\"fn_declarations\" array",8,N],[4,"ReservedCapabilityNames","","Enumeration of all Capabilities known and used by HC Core Enumeration converts to str",N,N],[13,"MissingNo","","Development placeholder, no production fn should use MissingNo",9,N],[13,"LifeCycle","","@TODO document what LifeCycle is @see https://github.com/holochain/holochain-rust/issues/204",9,N],[13,"Communication","","@TODO document what Communication is @see https://github.com/holochain/holochain-rust/issues/204",9,N],[4,"Membrane","","Enum for Zome Capability \"membrane\" property.",N,N],[13,"Public","","",10,N],[13,"Agent","","",10,N],[13,"ApiKey","","",10,N],[13,"Zome","","",10,N],[11,"as_str","","",9,[[["self"]],["str"]]],[11,"new","","Allow sane defaults for `CapabilityType::new()`.",5,[[],["self"]]],[11,"new","","Allow sane defaults for `FnDecrlaration::new()`.",7,[[],["self"]]],[11,"new","","Allow sane defaults for `Capability::new()`.",8,[[],["self"]]],[0,"entry_types","holochain_dna::zome","File holding all the structs for handling entry types defined by DNA.",N,N],[3,"LinksTo","holochain_dna::zome::entry_types","An individual object in a \"links_to\" array.",N,N],[12,"target_type","","The target_type of this links_to entry",11,N],[12,"tag","","The tag of this links_to entry",11,N],[3,"LinkedFrom","","An a definition of a link from another type (including anchors and system hashes) to the entry type it is part of.",N,N],[12,"base_type","","The target_type of this links_to entry",12,N],[12,"tag","","The tag of this links_to entry",12,N],[3,"EntryTypeDef","","Represents an individual object in the \"zome\" \"entry_types\" array.",N,N],[12,"description","","A description of this entry type.",13,N],[12,"sharing","","The sharing model of this entry type (public, private, encrypted).",13,N],[12,"links_to","","An array of link definitions associated with this entry type",13,N],[12,"linked_from","","An array of link definitions for links pointing to entries of this type",13,N],[4,"Sharing","","Enum for Zome EntryType \"sharing\" property.",N,N],[13,"Public","","",14,N],[13,"Private","","",14,N],[13,"Encrypted","","",14,N],[11,"can_publish","","",14,[[["self"]],["bool"]]],[11,"new","","Allow sane defaults for `LinksTo::new()`.",11,[[],["self"]]],[11,"new","","Allow sane defaults for `LinkedFrom::new()`.",12,[[],["self"]]],[11,"new","","Allow sane defaults for `EntryType::new()`.",13,[[],["self"]]],[11,"new","holochain_dna::zome","Allow sane defaults for `Config::new()`.",2,[[],["self"]]],[11,"new","","Allow sane defaults for `Zome::new()`.",3,[[["str"],["config"],["hashmap"],["hashmap"],["dnawasm"]],["zome"]]],[11,"new","holochain_dna","Create a new in-memory dna structure with some default values.",0,[[],["self"]]],[11,"from_json_str","","Create a new in-memory dna struct from a json string.",0,[[["str"]],["result"]]],[11,"to_json","","Generate a json string from an in-memory dna struct.",0,[[["self"]],["string"]]],[11,"to_json_pretty","","Generate a pretty-printed json string from an in-memory dna struct.",0,[[["self"]],["result",["string"]]]],[11,"get_zome","","Return a Zome",0,[[["self"],["str"]],["option",["zome"]]]],[11,"get_capability","","Return a Zome's Capability from a Zome and a Capability name.",0,[[["self"],["zome"],["str"]],["option",["capability"]]]],[11,"get_wasm_from_zome_name","","Find a Zome and return it's WASM bytecode for a specified Capability",0,[[["self"],["t"]],["option",["dnawasm"]]]],[11,"get_capability_with_zome_name","","Return a Zome's Capability from a Zome name and Capability name.",0,[[["self"],["str"],["str"]],["result",["capability","dnaerror"]]]],[11,"get_zome_name_for_entry_type","","Return the name of the zome holding a specified app entry_type",0,[[["self"],["str"]],["option",["string"]]]],[11,"get_entry_type_def","","Return the entry_type definition of a specified app entry_type",0,[[["self"],["str"]],["option",["entrytypedef"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","holochain_dna::wasm","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","holochain_dna::zome","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","holochain_dna::zome::capabilities","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","holochain_dna::zome::entry_types","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"clone","holochain_dna::wasm","",1,[[["self"]],["dnawasm"]]],[11,"clone","holochain_dna::zome::capabilities","",10,[[["self"]],["membrane"]]],[11,"clone","","",5,[[["self"]],["capabilitytype"]]],[11,"clone","","",6,[[["self"]],["fnparameter"]]],[11,"clone","","",7,[[["self"]],["fndeclaration"]]],[11,"clone","","",8,[[["self"]],["capability"]]],[11,"clone","holochain_dna::zome::entry_types","",14,[[["self"]],["sharing"]]],[11,"clone","","",11,[[["self"]],["linksto"]]],[11,"clone","","",12,[[["self"]],["linkedfrom"]]],[11,"clone","","",13,[[["self"]],["entrytypedef"]]],[11,"clone","holochain_dna::zome","",4,[[["self"]],["errorhandling"]]],[11,"clone","","",2,[[["self"]],["config"]]],[11,"clone","","",3,[[["self"]],["zome"]]],[11,"clone","holochain_dna","",0,[[["self"]],["dna"]]],[11,"default","holochain_dna::wasm","Provide defaults for wasm entries in dna structs.",1,[[],["self"]]],[11,"default","holochain_dna::zome::capabilities","Default zome capability membrane is \"agent\"",10,[[],["self"]]],[11,"default","","Defaults for a \"capability\" sub-object on a \"zome\" \"capabilities\" object.",5,[[],["self"]]],[11,"default","","Defaults for a \"fn_declarations\" object.",7,[[],["self"]]],[11,"default","","Provide defaults for a \"zome\"s \"capabilities\" object.",8,[[],["self"]]],[11,"default","holochain_dna::zome::entry_types","Default zome entry_type sharing is \"public\"",14,[[],["self"]]],[11,"default","","Provide defaults for a \"links_to\" object.",11,[[],["self"]]],[11,"default","","Provide defaults for a \"links_to\" object.",12,[[],["self"]]],[11,"default","","Provide defaults for a \"zome\"s \"entry_types\" object.",13,[[],["self"]]],[11,"default","holochain_dna::zome","Default zome config error_handling is \"throw-errors\"",4,[[],["self"]]],[11,"default","","Provide defaults for the \"zome\" \"config\" object.",2,[[],["self"]]],[11,"default","","Provide defaults for an individual \"zome\".",3,[[],["self"]]],[11,"default","holochain_dna","Provide defaults for a dna object.",0,[[],["self"]]],[11,"eq","holochain_dna::wasm","",1,[[["self"],["dnawasm"]],["bool"]]],[11,"ne","","",1,[[["self"],["dnawasm"]],["bool"]]],[11,"eq","holochain_dna::zome::capabilities","",9,[[["self"],["reservedcapabilitynames"]],["bool"]]],[11,"eq","","",10,[[["self"],["membrane"]],["bool"]]],[11,"eq","","",5,[[["self"],["capabilitytype"]],["bool"]]],[11,"ne","","",5,[[["self"],["capabilitytype"]],["bool"]]],[11,"eq","","",6,[[["self"],["fnparameter"]],["bool"]]],[11,"ne","","",6,[[["self"],["fnparameter"]],["bool"]]],[11,"eq","","",7,[[["self"],["fndeclaration"]],["bool"]]],[11,"ne","","",7,[[["self"],["fndeclaration"]],["bool"]]],[11,"eq","","",8,[[["self"],["capability"]],["bool"]]],[11,"ne","","",8,[[["self"],["capability"]],["bool"]]],[11,"eq","holochain_dna::zome::entry_types","",14,[[["self"],["sharing"]],["bool"]]],[11,"eq","","",11,[[["self"],["linksto"]],["bool"]]],[11,"ne","","",11,[[["self"],["linksto"]],["bool"]]],[11,"eq","","",12,[[["self"],["linkedfrom"]],["bool"]]],[11,"ne","","",12,[[["self"],["linkedfrom"]],["bool"]]],[11,"eq","","",13,[[["self"],["entrytypedef"]],["bool"]]],[11,"ne","","",13,[[["self"],["entrytypedef"]],["bool"]]],[11,"eq","holochain_dna::zome","",4,[[["self"],["errorhandling"]],["bool"]]],[11,"eq","","",2,[[["self"],["config"]],["bool"]]],[11,"ne","","",2,[[["self"],["config"]],["bool"]]],[11,"eq","","",3,[[["self"],["zome"]],["bool"]]],[11,"ne","","",3,[[["self"],["zome"]],["bool"]]],[11,"eq","holochain_dna","",0,[[["self"],["dna"]],["bool"]]],[11,"fmt","holochain_dna::wasm","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_dna::zome::capabilities","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_dna::zome::entry_types","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_dna::zome","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_dna","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","holochain_dna::wasm","",1,N],[11,"hash","holochain_dna::zome::capabilities","",10,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","holochain_dna::zome::entry_types","",14,N],[11,"hash","","",11,N],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"hash","holochain_dna::zome","",4,N],[11,"hash","","",2,N],[11,"hash","holochain_dna","",0,[[["self"],["h"]]]],[11,"from_str","holochain_dna::zome::capabilities","",9,[[["str"]],["result"]]],[11,"serialize","holochain_dna::wasm","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_dna::zome::capabilities","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_dna::zome::entry_types","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_dna::zome","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_dna","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","holochain_dna::wasm","",1,[[["__d"]],["result"]]],[11,"deserialize","holochain_dna::zome::capabilities","",10,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result"]]],[11,"deserialize","","",8,[[["__d"]],["result"]]],[11,"deserialize","holochain_dna::zome::entry_types","",14,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["__d"]],["result"]]],[11,"deserialize","","",12,[[["__d"]],["result"]]],[11,"deserialize","","",13,[[["__d"]],["result"]]],[11,"deserialize","holochain_dna::zome","",4,[[["__d"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","holochain_dna","",0,[[["__d"]],["result"]]],[11,"to_entry","","",0,[[["self"]],["entry"]]],[11,"from_entry","","",0,[[["entry"]],["self"]]]],"paths":[[3,"Dna"],[3,"DnaWasm"],[3,"Config"],[3,"Zome"],[4,"ErrorHandling"],[3,"CapabilityType"],[3,"FnParameter"],[3,"FnDeclaration"],[3,"Capability"],[4,"ReservedCapabilityNames"],[4,"Membrane"],[3,"LinksTo"],[3,"LinkedFrom"],[3,"EntryTypeDef"],[4,"Sharing"]]};
searchIndex["holochain_dna_c_binding"]={"doc":"This crate is an ffi wrapper to provide a c-compatible dna library.","items":[[3,"CStringVec","holochain_dna_c_binding","",N,N],[5,"holochain_dna_create","","",N,N],[5,"holochain_dna_create_from_json","","",N,N],[5,"holochain_dna_free","","",N,N],[5,"holochain_dna_to_json","","",N,N],[5,"holochain_dna_string_free","","",N,N],[5,"holochain_dna_get_name","","",N,N],[5,"holochain_dna_set_name","","",N,N],[5,"holochain_dna_get_description","","",N,N],[5,"holochain_dna_set_description","","",N,N],[5,"holochain_dna_get_version","","",N,N],[5,"holochain_dna_set_version","","",N,N],[5,"holochain_dna_get_uuid","","",N,N],[5,"holochain_dna_set_uuid","","",N,N],[5,"holochain_dna_get_dna_spec_version","","",N,N],[5,"holochain_dna_set_dna_spec_version","","",N,N],[5,"holochain_dna_get_zome_names","","",N,N],[5,"holochain_dna_free_zome_names","","",N,N],[5,"holochain_dna_get_capabilities_names","","",N,N],[5,"holochain_dna_get_function_names","","",N,N],[5,"holochain_dna_get_function_parameters","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"CStringVec"]]};
searchIndex["holochain_net"]={"doc":"holochain_net is a library that defines an abstract networking layer for different network transports and implements a PeerStore for mapping and managing the topology of transport layers with regard to relay's e.g. for NAT","items":[[0,"error","holochain_net","",N,N],[4,"NetworkError","holochain_net::error","",N,N],[13,"GenericError","","",0,N],[12,"error","holochain_net::error::NetworkError","",0,N],[0,"p2p_network","holochain_net","This module defines the trait for holochain networking / p2p The goal is to make implementing concrete strucs as simple as possible so that we can iterate quickly on the API. All calls will go through one of two api functions, one using json strings, and the other using binary buffers.",N,N],[4,"P2pNetworkState","holochain_net::p2p_network","enum defining the state of this p2p/network connection",N,N],[13,"Pending","","we are still setting up the connection, please wait",1,N],[13,"NeedConfig","","connection established, but needs config, please call `set_config`",1,N],[13,"Running","","connection established and configure, all APIs available",1,N],[6,"ApiFnJson","","callback function type for api methods transporting json data",N,N],[6,"ApiFnBin","","callback function type for api methods transporting binary data",N,N],[6,"DhtHoldCallback","","when the network is requesting we store data this callback will be invoked, expecting the data to be validated",N,N],[6,"GenomeHash","","the identifier for an application",N,N],[17,"BIN_TYPE_TRACK_APP","","binary api function `track_app` uses this leading byte",N,N],[17,"BIN_TYPE_UNTRACK_APP","","binary api function `untrack_app` uses this leading byte",N,N],[17,"BIN_TYPE_APP_SIGNATURE","","binary api function `set_app_signature_callback` uses this leading byte",N,N],[17,"BIN_TYPE_APP_ENCRYPTION","","binary api function `set_app_encryption_callback` uses this leading byte",N,N],[8,"P2pNetwork","","Represents a connection to a peer to peer network module On initial instantiation, only calling `get_state` is valid see P2pNetorkState for usage",N,N],[10,"exec_raw_json","","This is the main backbone api throughput function that must be implemented by structs implementing this trait",2,[[["self"],["str"],["option",["apifnjson"]]],["result",["string","error"]]]],[10,"exec_raw_bin","","This is similar to `exec_raw_json`, but permits binary data transfer",2,N],[11,"get_state","","This call should return a state within: - `pending` - `need_config` - `running`",2,[[["self"]],["result",["p2pnetworkstate","error"]]]],[11,"get_default_config","","This call should return a json configuration blob for the p2p module",2,[[["self"]],["result",["string","error"]]]],[11,"set_config","","pass along configuration to the network module",2,[[["self"],["str"]],["result",["error"]]]],[11,"track_app","","setup an app to be synced on the p2p network side",2,N],[11,"untrack_app","","stop syncing an app on the p2p network side",2,[[["self"],["genomehash"]],["result",["error"]]]],[11,"set_app_signature_callback","","set a signature callback for an app",2,[[["self"],["genomehash"],["apifnbin"]],["result",["error"]]]],[11,"set_app_encryption_callback","","set an encryption callback for an app",2,[[["self"],["genomehash"],["apifnbin"]],["result",["error"]]]],[11,"dht_set_on_hold_callback","","when the network asks us to store a bit of DHT data we first need to make sure it is valid",2,[[["self"],["dhtholdcallback"]],["result",["error"]]]],[11,"dht_publish","","we want to publish a bit of DHT data",2,[[["self"],["genomehash"],["str"]],["result",["error"]]]],[11,"from","holochain_net::error","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","holochain_net::p2p_network","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"fmt","holochain_net::error","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cause","","",0,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]]],"paths":[[4,"NetworkError"],[4,"P2pNetworkState"],[8,"P2pNetwork"]]};
searchIndex["holochain_net_ipc"]={"doc":"Networking / P2P IPC Abstraction","items":[[0,"msg_types","holochain_net_ipc","This module holds message type u8 constants.",N,N],[17,"MSG_PING","holochain_net_ipc::msg_types","client initiated heartbeat",N,N],[17,"MSG_PONG","","response to client initiated heartbeat",N,N],[17,"MSG_CALL","","send a message to either side, await a response",N,N],[17,"MSG_CALL_OK","","success response to a call",N,N],[17,"MSG_CALL_FAIL","","failure response to a call",N,N],[0,"errors","holochain_net_ipc","This module holds net_ipc custom error types.",N,N],[4,"IpcError","holochain_net_ipc::errors","net_ipc-specific error types",N,N],[13,"MissingDataError","","Translate an Option<_> unwrap into a Result::Err",0,N],[13,"Timeout","","Socket timeout",0,N],[13,"GenericError","","Otherwise undefined error message",0,N],[12,"error","holochain_net_ipc::errors::IpcError","",0,N],[6,"Result","holochain_net_ipc::errors","Default result type for net_ipc modules that `use errors::*`.",N,N],[0,"message","holochain_net_ipc","This module contains message serialization structures.",N,N],[3,"MsgPingSend","holochain_net_ipc::message","Send a ping to the IPC server This message is an array of 1 `f64` millisecond epoch timestamp value. - index 0 : the current system timestamp of this system",N,N],[12,"0","","",1,N],[3,"MsgPongRecv","","A server response to a client-intiated `ping` message. This message is an array of 2 `f64` millisecond epoch timestamp values. - index 0 : the echoed initiation time of the originating `ping` message - index 1 : the timestamp at which the server received / responded to the originating `ping` message",N,N],[12,"0","","",2,N],[12,"1","","",2,N],[3,"MsgCallSend","","Client wishes to send a `call` message to another node. This message is an array of 2 `&[u8]` slices. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",3,N],[12,"1","","",3,N],[3,"MsgCallRecv","","This message represents this client receiving a `call` message. This message is an array of 2 `Vec<u8>` values. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",4,N],[12,"1","","",4,N],[3,"MsgCallOkSend","","Client wishes to respond with success to a `call` message. This message is an array of 2 `&[u8]` slices. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",5,N],[12,"1","","",5,N],[3,"MsgCallOkRecv","","This message represents this client receiving a success response message. This message is an array of 2 `Vec<u8>` values. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",6,N],[12,"1","","",6,N],[3,"MsgCallFailSend","","Client wishes to respond with an error to a `call` message. This message is an array of 2 `&[u8]` slices. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",7,N],[12,"1","","",7,N],[3,"MsgCallFailRecv","","This message represents this client receiving an error response message. This message is an array of 2 `Vec<u8>` values. - index 0 : message identifier - index 1 : message data",N,N],[12,"0","","",8,N],[12,"1","","",8,N],[4,"Message","","This enum is an amalgomation of all the server-sent message types to be used as a return type when receiving messages.",N,N],[13,"Pong","","",9,N],[13,"Call","","",9,N],[13,"CallOk","","",9,N],[13,"CallFail","","",9,N],[0,"ipc_client","holochain_net_ipc","This module represents a holochain application's inter-process-communication connection to an external p2p process.",N,N],[3,"IpcClient","holochain_net_ipc::ipc_client","IPC communication client structure. Allows connection to an external process that manages p2p communications.",N,N],[6,"CallResult","","A closure callback type def for getting acknowledgment when performing a `call`.",N,N],[6,"ZmqIpcClient","","The ZeroMQ implementation of IpcClient.",N,N],[11,"destroy_context","","Perform any underlying socket library cleanup. Call this before your application exits.",10,[[],["result"]]],[11,"new","","Get a new IpcClient instance.",10,[[],["result"]]],[11,"close","","Close this specific IpcClient connection.",10,[[["self"]],["result"]]],[11,"connect","","Connect this IpcClient to a p2p ipc server.",10,[[["self"],["str"]],["result"]]],[11,"ping","","Send a heartbeat message to the ipc server.",10,[[["self"]],["result"]]],[11,"call","","invoke an RPC-style `call` on the ipc server",10,N],[11,"respond","","respond to a remote `call`",10,N],[11,"process","","Allow IPC client to do any needed processing. This should be called regularly to make sure any maintenance tasks are executed properly, and to avoid incoming data backing up in memory.",10,[[["self"],["i64"]],["result",["option"]]]],[14,"bail_generic","holochain_net_ipc","Macro akin to `bail!()` but returns an IpcError::GenericError.",N,N],[11,"from","holochain_net_ipc::errors","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","holochain_net_ipc::message","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","holochain_net_ipc::ipc_client","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"clone","holochain_net_ipc::errors","",0,[[["self"]],["ipcerror"]]],[11,"clone","holochain_net_ipc::message","",1,[[["self"]],["msgpingsend"]]],[11,"clone","","",2,[[["self"]],["msgpongrecv"]]],[11,"clone","","",3,[[["self"]],["msgcallsend"]]],[11,"clone","","",4,[[["self"]],["msgcallrecv"]]],[11,"clone","","",5,[[["self"]],["msgcalloksend"]]],[11,"clone","","",6,[[["self"]],["msgcallokrecv"]]],[11,"clone","","",7,[[["self"]],["msgcallfailsend"]]],[11,"clone","","",8,[[["self"]],["msgcallfailrecv"]]],[11,"clone","","",9,[[["self"]],["message"]]],[11,"eq","","",1,[[["self"],["msgpingsend"]],["bool"]]],[11,"ne","","",1,[[["self"],["msgpingsend"]],["bool"]]],[11,"eq","","",2,[[["self"],["msgpongrecv"]],["bool"]]],[11,"ne","","",2,[[["self"],["msgpongrecv"]],["bool"]]],[11,"eq","","",3,[[["self"],["msgcallsend"]],["bool"]]],[11,"ne","","",3,[[["self"],["msgcallsend"]],["bool"]]],[11,"eq","","",4,[[["self"],["msgcallrecv"]],["bool"]]],[11,"ne","","",4,[[["self"],["msgcallrecv"]],["bool"]]],[11,"eq","","",5,[[["self"],["msgcalloksend"]],["bool"]]],[11,"ne","","",5,[[["self"],["msgcalloksend"]],["bool"]]],[11,"eq","","",6,[[["self"],["msgcallokrecv"]],["bool"]]],[11,"ne","","",6,[[["self"],["msgcallokrecv"]],["bool"]]],[11,"eq","","",7,[[["self"],["msgcallfailsend"]],["bool"]]],[11,"ne","","",7,[[["self"],["msgcallfailsend"]],["bool"]]],[11,"eq","","",8,[[["self"],["msgcallfailrecv"]],["bool"]]],[11,"ne","","",8,[[["self"],["msgcallfailrecv"]],["bool"]]],[11,"eq","","",9,[[["self"],["message"]],["bool"]]],[11,"ne","","",9,[[["self"],["message"]],["bool"]]],[11,"fmt","holochain_net_ipc::errors","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_net_ipc::message","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"cause","holochain_net_ipc::errors","",0,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"serialize","holochain_net_ipc::message","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",8,[[["__d"]],["result"]]]],"paths":[[4,"IpcError"],[3,"MsgPingSend"],[3,"MsgPongRecv"],[3,"MsgCallSend"],[3,"MsgCallRecv"],[3,"MsgCallOkSend"],[3,"MsgCallOkRecv"],[3,"MsgCallFailSend"],[3,"MsgCallFailRecv"],[4,"Message"],[3,"IpcClient"]]};
searchIndex["holochain_test_bin"]={"doc":"","items":[],"paths":[]};
searchIndex["holochain_wasm_utils"]={"doc":"Library holding necessary code for the Ribosome  that is also useful for hdk-rust, or more generally for making rust code that the Ribosome can run. Must not have any dependency with any other Holochain crates.","items":[[0,"api_serialization","holochain_wasm_utils","",N,N],[0,"commit","holochain_wasm_utils::api_serialization","This module holds structs for all arguments and return types that get serialized and deserialized between core native and the WASM based ribosome.",N,N],[3,"CommitEntryArgs","holochain_wasm_utils::api_serialization::commit","Struct for input data received when Commit API function is invoked",N,N],[12,"entry_type_name","","",0,N],[12,"entry_value","","",0,N],[3,"CommitEntryResult","","",N,N],[12,"address","","",1,N],[12,"validation_failure","","",1,N],[11,"success","","",1,[[["address"]],["commitentryresult"]]],[11,"failure","","",1,[[["string"]],["commitentryresult"]]],[0,"get_entry","holochain_wasm_utils::api_serialization","",N,N],[3,"GetEntryArgs","holochain_wasm_utils::api_serialization::get_entry","",N,N],[12,"address","","",2,N],[3,"GetEntryResult","","",N,N],[12,"status","","",3,N],[12,"entry","","",3,N],[4,"GetResultStatus","","",N,N],[13,"Found","","",4,N],[13,"NotFound","","",4,N],[11,"found","","",3,[[["string"]],["getentryresult"]]],[11,"not_found","","",3,[[],["getentryresult"]]],[0,"validation","holochain_wasm_utils::api_serialization","",N,N],[3,"ValidationData","holochain_wasm_utils::api_serialization::validation","",N,N],[12,"chain_header","","",5,N],[12,"sources","","",5,N],[12,"source_chain_entries","","",5,N],[12,"source_chain_headers","","",5,N],[12,"custom","","",5,N],[12,"lifecycle","","",5,N],[12,"action","","",5,N],[4,"EntryLifecycle","","",N,N],[13,"Chain","","",6,N],[13,"Dht","","",6,N],[13,"Meta","","",6,N],[4,"EntryAction","","",N,N],[13,"Commit","","",7,N],[13,"Modify","","",7,N],[13,"Delete","","",7,N],[4,"LinkAction","","",N,N],[13,"Commit","","",8,N],[13,"Delete","","",8,N],[0,"error","holochain_wasm_utils","",N,N],[3,"RibosomeErrorReport","holochain_wasm_utils::error","",N,N],[12,"description","","",9,N],[12,"file_name","","",9,N],[12,"line","","",9,N],[4,"RibosomeReturnCode","","Enum of all possible RETURN codes that a Zome API Function could return. Represents an encoded allocation of zero length with the return code as offset. @see SinglePageAllocation",N,N],[13,"Success","","",10,N],[13,"Failure","","",10,N],[4,"RibosomeErrorCode","","Enum of all possible ERROR codes that a Zome API Function could return.",N,N],[13,"Unspecified","","",11,N],[13,"ArgumentDeserializationFailed","","",11,N],[13,"OutOfMemory","","",11,N],[13,"ReceivedWrongActionResult","","",11,N],[13,"CallbackFailed","","",11,N],[13,"RecursiveCallForbidden","","",11,N],[13,"ResponseSerializationFailed","","",11,N],[13,"NotAnAllocation","","",11,N],[13,"ZeroSizedAllocation","","",11,N],[11,"from_error","","",10,[[["ribosomeerrorcode"]],["self"]]],[11,"from_offset","","",10,[[["u16"]],["self"]]],[11,"from_offset","","",11,[[["u16"]],["self"]]],[11,"from_return_code","","",11,[[["ribosomereturncode"]],["self"]]],[0,"memory_allocation","holochain_wasm_utils","",N,N],[3,"SinglePageAllocation","holochain_wasm_utils::memory_allocation","SinglePageAllocation is a memory allocation garanteed to fit in a WASM 64KiB Memory Page",N,N],[3,"SinglePageStack","","Struct for managing a WASM 64KiB memory page as a stack",N,N],[5,"u32_high_bits","","returns the u16 high bits from a u32",N,[[["u32"]],["u16"]]],[5,"u32_low_bits","","returns the u16 low bits from a u32 by doing a lossy cast",N,[[["u32"]],["u16"]]],[5,"u32_split_bits","","splits the high and low bits of u32 into a tuple of u16, for destructuring convenience",N,N],[5,"u32_merge_bits","","merges 2x u16 into a single u32",N,[[["u16"],["u16"]],["u32"]]],[5,"decode_encoded_allocation","","",N,[[["u32"]],["result",["singlepageallocation","ribosomereturncode"]]]],[17,"U16_MAX","","",N,N],[11,"new","","",12,[[["u16"],["u16"]],["result",["ribosomeerrorcode"]]]],[11,"from_encoded_allocation","","An Encoded Allocation is a u32 where 'offset' is first 16-bits and 'length' last 16-bits A valid allocation must not have a length of zero An Encoded Allocation with an offset but no length is actually an encoding of an ErrorCode",12,[[["u32"]],["result",["ribosomeerrorcode"]]]],[11,"encode","","returns a single u32 value encoding both the u16 offset and length values",12,[[["self"]],["u32"]]],[11,"offset","","",12,[[["self"]],["u16"]]],[11,"length","","",12,[[["self"]],["u16"]]],[11,"new","","",13,[[["singlepageallocation"]],["self"]]],[11,"from_encoded_allocation","","Create a SinglePageStack from a valid encoded allocation",13,[[["u32"]],["result",["ribosomeerrorcode"]]]],[11,"allocate","","",13,[[["self"],["u16"]],["u16"]]],[11,"deallocate","","",13,[[["self"],["singlepageallocation"]],["result"]]],[11,"top","","",13,[[["self"]],["u16"]]],[0,"memory_serialization","holochain_wasm_utils","",N,N],[5,"load_json","holochain_wasm_utils::memory_serialization","Expecting to retrieve a struct from an encoded allocation, but return error string in case of error",N,[[["u32"]],["result",["string"]]]],[5,"store_as_json","","Write a data struct as a json string in wasm memory",N,[[["singlepagestack"],["t"]],["result",["singlepageallocation","ribosomeerrorcode"]]]],[5,"store_json_into_encoded_allocation","","",N,[[["singlepagestack"],["t"]],["i32"]]],[5,"load_json_from_raw","","Convert a json string stored in wasm memory into a specified struct If json deserialization of custom struct failed, tries to deserialize a RibosomeErrorReport struct. If that also failed, tries to load a string directly, since we are expecting an error string at this stage.",N,N],[14,"zome_assert","holochain_wasm_utils","Macro for creating a RibosomeErrorCode as a RuntimeValue Result-Option on the spot Will panic! if out or memory or other serialization error occured.",N,N],[14,"ribosome_error_code","","Macro for creating a RibosomeErrorCode as a RuntimeValue Result-Option on the spot",N,N],[14,"ribosome_error_report","","Macro for creating a RibosomeErrorReport on the spot with file!() and line!()",N,N],[11,"from","holochain_wasm_utils::api_serialization::commit","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","holochain_wasm_utils::api_serialization::get_entry","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","holochain_wasm_utils::api_serialization::validation","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","holochain_wasm_utils::error","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","holochain_wasm_utils::memory_allocation","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"clone","holochain_wasm_utils::api_serialization::validation","",5,[[["self"]],["validationdata"]]],[11,"clone","","",6,[[["self"]],["entrylifecycle"]]],[11,"clone","","",7,[[["self"]],["entryaction"]]],[11,"clone","","",8,[[["self"]],["linkaction"]]],[11,"clone","holochain_wasm_utils::error","",10,[[["self"]],["ribosomereturncode"]]],[11,"clone","","",11,[[["self"]],["ribosomeerrorcode"]]],[11,"clone","holochain_wasm_utils::memory_allocation","",12,[[["self"]],["singlepageallocation"]]],[11,"clone","","",13,[[["self"]],["singlepagestack"]]],[11,"to_string","holochain_wasm_utils::error","",10,[[["self"]],["string"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"default","holochain_wasm_utils::api_serialization::commit","",0,[[],["commitentryargs"]]],[11,"default","","",1,[[],["commitentryresult"]]],[11,"default","holochain_wasm_utils::api_serialization::get_entry","",2,[[],["getentryargs"]]],[11,"default","holochain_wasm_utils::memory_allocation","",13,[[],["singlepagestack"]]],[11,"eq","holochain_wasm_utils::error","",10,[[["self"],["ribosomereturncode"]],["bool"]]],[11,"ne","","",10,[[["self"],["ribosomereturncode"]],["bool"]]],[11,"eq","","",11,[[["self"],["ribosomeerrorcode"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_wasm_utils::api_serialization::commit","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_wasm_utils::api_serialization::get_entry","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_wasm_utils::error","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","holochain_wasm_utils::memory_allocation","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"serialize","holochain_wasm_utils::api_serialization::commit","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_wasm_utils::api_serialization::get_entry","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_wasm_utils::api_serialization::validation","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","holochain_wasm_utils::error","",9,[[["self"],["__s"]],["result"]]],[11,"deserialize","holochain_wasm_utils::api_serialization::commit","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","holochain_wasm_utils::api_serialization::get_entry","",2,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","holochain_wasm_utils::api_serialization::validation","",5,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result"]]],[11,"deserialize","","",8,[[["__d"]],["result"]]],[11,"deserialize","holochain_wasm_utils::error","",9,[[["__d"]],["result"]]]],"paths":[[3,"CommitEntryArgs"],[3,"CommitEntryResult"],[3,"GetEntryArgs"],[3,"GetEntryResult"],[4,"GetResultStatus"],[3,"ValidationData"],[4,"EntryLifecycle"],[4,"EntryAction"],[4,"LinkAction"],[3,"RibosomeErrorReport"],[4,"RibosomeReturnCode"],[4,"RibosomeErrorCode"],[3,"SinglePageAllocation"],[3,"SinglePageStack"]]};
searchIndex["indexmap"]={"doc":"[`IndexMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[0,"set","indexmap","A hash set implemented using `IndexMap`",N,N],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is independent of their hash values.",N,N],[3,"IntoIter","","",N,N],[3,"Iter","","",N,N],[3,"Drain","","",N,N],[3,"Difference","","",N,N],[3,"Intersection","","",N,N],[3,"SymmetricDifference","","",N,N],[3,"Union","","",N,N],[11,"new","","Create a new set. (Does not allocate.)",0,[[],["self"]]],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of elements in the set.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new set with `hash_builder`",0,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the set's `BuildHasher`.",0,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",0,[[["self"]],["usize"]]],[11,"clear","","Remove all elements in the set, while preserving its capacity.",0,[[["self"]]]],[11,"reserve","","FIXME Not implemented fully yet",0,[[["self"],["usize"]]]],[11,"insert","","Insert the value into the set.",0,[[["self"],["t"]],["bool"]]],[11,"iter","","Return an iterator over the values of the set, in their order",0,[[["self"]],["iter"]]],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",0,[[["self"],["indexset"]],["difference"]]],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",0,[[["self"],["indexset"]],["symmetricdifference"]]],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",0,[[["self"],["indexset"]],["intersection"]]],[11,"union","","Return an iterator over all values that are in `self` or `other`.",0,[[["self"],["indexset"]],["union"]]],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",0,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",0,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index and value",0,[[["self"],["q"]],["option"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",0,[[["self"],["t"]],["option"]]],[11,"remove","","FIXME Same as .swap_remove",0,[[["self"],["q"]],["bool"]]],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",0,[[["self"],["q"]],["bool"]]],[11,"take","","FIXME Same as .swap_take",0,[[["self"],["q"]],["option"]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",0,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",0,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last value",0,[[["self"]],["option"]]],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",0,[[["self"],["f"]]]],[11,"sort","","Sort the set’s values by their default ordering.",0,[[["self"]]]],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",0,[[["self"],["f"]]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",0,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",0,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a value by index",0,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",0,[[["self"],["usize"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",0,[[["self"],["indexset"]],["bool"]]],[0,"map","indexmap","`IndexMap` is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"IndexMap","indexmap::map","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"OccupiedEntry","","",N,N],[3,"VacantEntry","","",N,N],[3,"Keys","","",N,N],[3,"Values","","",N,N],[3,"ValuesMut","","",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[3,"IntoIter","","",N,N],[3,"Drain","","",N,N],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",N,N],[13,"Occupied","","Existing slot with equivalent key.",1,N],[13,"Vacant","","Vacant slot (no equivalent key in the map).",1,N],[8,"MutableKeys","","Opt-in mutable access to keys.",N,N],[16,"Key","","",2,N],[16,"Value","","",2,N],[10,"get_full_mut2","","Return item index, mutable reference to key and value",2,[[["self"],["q"]],["option"]]],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",2,[[["self"],["f"]]]],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",2,[[["self"]],["privatemarker"]]],[11,"new","","Create a new map. (Does not allocate.)",3,[[],["self"]]],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",3,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",3,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of key-value pairs in the map.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",3,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new map with `hash_builder`",3,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the map's `BuildHasher`.",3,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",3,[[["self"]],["usize"]]],[11,"or_insert","","Computes in O(1) time (amortized average).",1,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Computes in O(1) time (amortized average).",1,[[["self"],["f"]],["v"]]],[11,"key","","",1,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair exists or will be inserted.",1,[[["self"]],["usize"]]],[11,"key","","",4,[[["self"]],["k"]]],[11,"get","","",4,[[["self"]],["v"]]],[11,"get_mut","","",4,[[["self"]],["v"]]],[11,"index","","Return the index of the key-value pair",4,[[["self"]],["usize"]]],[11,"into_mut","","",4,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry to `value`, and returns the entry's old value.",4,[[["self"],["v"]],["v"]]],[11,"remove","","",4,[[["self"]],["v"]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",4,N],[11,"key","","",5,[[["self"]],["k"]]],[11,"into_key","","",5,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair will be inserted.",5,[[["self"]],["usize"]]],[11,"insert","","",5,[[["self"],["v"]],["v"]]],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",3,[[["self"]]]],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",3,[[["self"],["usize"]]]],[11,"insert","","Insert a key-value pair in the map.",3,[[["self"],["k"],["v"]],["option"]]],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",3,[[["self"],["k"]],["entry"]]],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",3,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",3,[[["self"]],["itermut"]]],[11,"keys","","Return an iterator over the keys of the map, in their order",3,[[["self"]],["keys"]]],[11,"values","","Return an iterator over the values of the map, in their order",3,[[["self"]],["values"]]],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",3,[[["self"]],["valuesmut"]]],[11,"contains_key","","Return `true` if an equivalent to `key` exists in the map.",3,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",3,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index, key and value",3,[[["self"],["q"]],["option"]]],[11,"get_mut","","",3,[[["self"],["q"]],["option"]]],[11,"get_full_mut","","",3,[[["self"],["q"]],["option"]]],[11,"remove","","NOTE: Same as .swap_remove",3,[[["self"],["q"]],["option"]]],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",3,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",3,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last key-value pair",3,[[["self"]],["option"]]],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",3,[[["self"],["f"]]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",3,[[["self"]]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",3,[[["self"],["f"]]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",3,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",3,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a key-value pair by index",3,[[["self"],["usize"]],["option"]]],[11,"get_index_mut","","Get a key-value pair by index",3,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",3,[[["self"],["usize"]],["option"]]],[8,"Equivalent","indexmap","Key equivalence trait.",N,N],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",6,[[["self"],["k"]],["bool"]]],[14,"indexmap","","Create an `IndexMap` from a list of key-value pairs",N,N],[14,"indexset","","Create an `IndexSet` from a list of values",N,N],[11,"from","indexmap::set","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","indexmap::map","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_full_mut2","","",3,[[["self"],["q"]],["option"]]],[11,"retain2","","",3,[[["self"],["f"]]]],[11,"__private_marker","","",3,[[["self"]],["privatemarker"]]],[11,"clone","indexmap::set","",0,[[["self"]],["indexset"]]],[11,"clone","indexmap::map","",3,[[["self"]],["indexmap"]]],[11,"extend","indexmap::set","",0,[[["self"],["i"]]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"extend","indexmap::map","Extend the map with all key-value pairs in the iterable.",3,[[["self"],["i"]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",3,[[["self"],["i"]]]],[11,"next","indexmap::set","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"count","","",7,[[["self"]],["usize"]]],[11,"nth","","",7,[[["self"],["usize"]],["option"]]],[11,"last","","",7,[[["self"]],["option"]]],[11,"collect","","",7,[[["self"]],["c"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"count","","",8,[[["self"]],["usize"]]],[11,"nth","","",8,[[["self"],["usize"]],["option"]]],[11,"last","","",8,[[["self"]],["option"]]],[11,"collect","","",8,[[["self"]],["c"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"count","","",9,[[["self"]],["usize"]]],[11,"nth","","",9,[[["self"],["usize"]],["option"]]],[11,"last","","",9,[[["self"]],["option"]]],[11,"collect","","",9,[[["self"]],["c"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fold","","",12,[[["self"],["b"],["f"]],["b"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"fold","","",13,[[["self"],["b"],["f"]],["b"]]],[11,"next","indexmap::map","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"count","","",14,[[["self"]],["usize"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"last","","",14,[[["self"]],["option"]]],[11,"collect","","",14,[[["self"]],["c"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"count","","",15,[[["self"]],["usize"]]],[11,"nth","","",15,[[["self"],["usize"]],["option"]]],[11,"last","","",15,[[["self"]],["option"]]],[11,"collect","","",15,[[["self"]],["c"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"last","","",16,[[["self"]],["option"]]],[11,"collect","","",16,[[["self"]],["c"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"count","","",17,[[["self"]],["usize"]]],[11,"nth","","",17,[[["self"],["usize"]],["option"]]],[11,"last","","",17,[[["self"]],["option"]]],[11,"collect","","",17,[[["self"]],["c"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"count","","",18,[[["self"]],["usize"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"collect","","",18,[[["self"]],["c"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"nth","","",19,[[["self"],["usize"]],["option"]]],[11,"last","","",19,[[["self"]],["option"]]],[11,"collect","","",19,[[["self"]],["c"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"count","","",20,[[["self"]],["usize"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"last","","",20,[[["self"]],["option"]]],[11,"collect","","",20,[[["self"]],["c"]]],[11,"len","indexmap::set","",7,[[["self"]],["usize"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"len","indexmap::map","",14,[[["self"]],["usize"]]],[11,"len","","",15,[[["self"]],["usize"]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"len","","",17,[[["self"]],["usize"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"default","indexmap::set","Return an empty `IndexSet`",0,[[],["self"]]],[11,"default","indexmap::map","Return an empty `IndexMap`",3,[[],["self"]]],[11,"eq","indexmap::set","",0,[[["self"],["indexset"]],["bool"]]],[11,"eq","indexmap::map","",3,[[["self"],["indexmap"]],["bool"]]],[11,"next_back","indexmap::set","",7,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"next_back","indexmap::map","",14,[[["self"]],["option"]]],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"next_back","","",16,[[["self"]],["option"]]],[11,"next_back","","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"into_iter","indexmap::set","",0,N],[11,"into_iter","indexmap::map","",3,N],[11,"fmt","indexmap::set","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","indexmap::map","",3,[[["self"],["formatter"]],["result"]]],[11,"index","","Panics if `key` is not present in the map.",3,[[["self"],["q"]],["v"]]],[11,"index_mut","","Panics if `key` is not present in the map.",3,[[["self"],["q"]],["v"]]],[11,"from_iter","indexmap::set","",0,[[["i"]],["self"]]],[11,"from_iter","indexmap::map","Create an `IndexMap` from the sequence of key-value pairs in the iterable.",3,[[["i"]],["self"]]]],"paths":[[3,"IndexSet"],[4,"Entry"],[8,"MutableKeys"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Equivalent"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"default","","",0,[[],["buffer"]]]],"paths":[[3,"Buffer"]]};
searchIndex["kernel32"]={"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_len","","",20,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_len","","",21,N],[12,"sin6_family","","",21,N],[12,"sin6_port","","",21,N],[12,"sin6_flowinfo","","",21,N],[12,"sin6_addr","","",21,N],[12,"sin6_scope_id","","",21,N],[3,"sockaddr_un","","",N,N],[12,"sun_len","","",22,N],[12,"sun_family","","",22,N],[12,"sun_path","","",22,N],[3,"passwd","","",N,N],[12,"pw_name","","",23,N],[12,"pw_passwd","","",23,N],[12,"pw_uid","","",23,N],[12,"pw_gid","","",23,N],[12,"pw_change","","",23,N],[12,"pw_class","","",23,N],[12,"pw_gecos","","",23,N],[12,"pw_dir","","",23,N],[12,"pw_shell","","",23,N],[12,"pw_expire","","",23,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",24,N],[12,"ifa_name","","",24,N],[12,"ifa_flags","","",24,N],[12,"ifa_addr","","",24,N],[12,"ifa_netmask","","",24,N],[12,"ifa_dstaddr","","",24,N],[12,"ifa_data","","",24,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",25,N],[12,"tm_min","","",25,N],[12,"tm_hour","","",25,N],[12,"tm_mday","","",25,N],[12,"tm_mon","","",25,N],[12,"tm_year","","",25,N],[12,"tm_wday","","",25,N],[12,"tm_yday","","",25,N],[12,"tm_isdst","","",25,N],[12,"tm_gmtoff","","",25,N],[12,"tm_zone","","",25,N],[3,"utsname","","",N,N],[12,"sysname","","",26,N],[12,"nodename","","",26,N],[12,"release","","",26,N],[12,"version","","",26,N],[12,"machine","","",26,N],[3,"msghdr","","",N,N],[12,"msg_name","","",27,N],[12,"msg_namelen","","",27,N],[12,"msg_iov","","",27,N],[12,"msg_iovlen","","",27,N],[12,"msg_control","","",27,N],[12,"msg_controllen","","",27,N],[12,"msg_flags","","",27,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",28,N],[12,"cmsg_level","","",28,N],[12,"cmsg_type","","",28,N],[3,"fsid_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",29,N],[12,"if_name","","",29,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",30,N],[12,"aio_offset","","",30,N],[12,"aio_buf","","",30,N],[12,"aio_nbytes","","",30,N],[12,"aio_reqprio","","",30,N],[12,"aio_sigevent","","",30,N],[12,"aio_lio_opcode","","",30,N],[3,"utmpx","","",N,N],[12,"ut_user","","",31,N],[12,"ut_id","","",31,N],[12,"ut_line","","",31,N],[12,"ut_pid","","",31,N],[12,"ut_type","","",31,N],[12,"ut_tv","","",31,N],[12,"ut_host","","",31,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",32,N],[12,"gl_offs","","",32,N],[12,"gl_pathv","","",32,N],[3,"sockaddr_storage","","",N,N],[12,"ss_len","","",33,N],[12,"ss_family","","",33,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",34,N],[12,"ai_family","","",34,N],[12,"ai_socktype","","",34,N],[12,"ai_protocol","","",34,N],[12,"ai_addrlen","","",34,N],[12,"ai_canonname","","",34,N],[12,"ai_addr","","",34,N],[12,"ai_next","","",34,N],[3,"mach_timebase_info","","",N,N],[12,"numer","","",35,N],[12,"denom","","",35,N],[3,"stat","","",N,N],[12,"st_dev","","",36,N],[12,"st_mode","","",36,N],[12,"st_nlink","","",36,N],[12,"st_ino","","",36,N],[12,"st_uid","","",36,N],[12,"st_gid","","",36,N],[12,"st_rdev","","",36,N],[12,"st_atime","","",36,N],[12,"st_atime_nsec","","",36,N],[12,"st_mtime","","",36,N],[12,"st_mtime_nsec","","",36,N],[12,"st_ctime","","",36,N],[12,"st_ctime_nsec","","",36,N],[12,"st_birthtime","","",36,N],[12,"st_birthtime_nsec","","",36,N],[12,"st_size","","",36,N],[12,"st_blocks","","",36,N],[12,"st_blksize","","",36,N],[12,"st_flags","","",36,N],[12,"st_gen","","",36,N],[12,"st_lspare","","",36,N],[12,"st_qspare","","",36,N],[3,"dirent","","",N,N],[12,"d_ino","","",37,N],[12,"d_seekoff","","",37,N],[12,"d_reclen","","",37,N],[12,"d_namlen","","",37,N],[12,"d_type","","",37,N],[12,"d_name","","",37,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",38,N],[12,"si_errno","","",38,N],[12,"si_code","","",38,N],[12,"si_pid","","",38,N],[12,"si_uid","","",38,N],[12,"si_status","","",38,N],[12,"si_addr","","",38,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",39,N],[12,"sa_mask","","",39,N],[12,"sa_flags","","",39,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",40,N],[12,"ss_size","","",40,N],[12,"ss_flags","","",40,N],[3,"fstore_t","","",N,N],[12,"fst_flags","","",41,N],[12,"fst_posmode","","",41,N],[12,"fst_offset","","",41,N],[12,"fst_length","","",41,N],[12,"fst_bytesalloc","","",41,N],[3,"radvisory","","",N,N],[12,"ra_offset","","",42,N],[12,"ra_count","","",42,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",43,N],[12,"f_frsize","","",43,N],[12,"f_blocks","","",43,N],[12,"f_bfree","","",43,N],[12,"f_bavail","","",43,N],[12,"f_files","","",43,N],[12,"f_ffree","","",43,N],[12,"f_favail","","",43,N],[12,"f_fsid","","",43,N],[12,"f_flag","","",43,N],[12,"f_namemax","","",43,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",44,N],[12,"dli_fbase","","",44,N],[12,"dli_sname","","",44,N],[12,"dli_saddr","","",44,N],[3,"sockaddr_in","","",N,N],[12,"sin_len","","",45,N],[12,"sin_family","","",45,N],[12,"sin_port","","",45,N],[12,"sin_addr","","",45,N],[12,"sin_zero","","",45,N],[3,"statfs","","",N,N],[12,"f_bsize","","",46,N],[12,"f_iosize","","",46,N],[12,"f_blocks","","",46,N],[12,"f_bfree","","",46,N],[12,"f_bavail","","",46,N],[12,"f_files","","",46,N],[12,"f_ffree","","",46,N],[12,"f_fsid","","",46,N],[12,"f_owner","","",46,N],[12,"f_type","","",46,N],[12,"f_flags","","",46,N],[12,"f_fssubtype","","",46,N],[12,"f_fstypename","","",46,N],[12,"f_mntonname","","",46,N],[12,"f_mntfromname","","",46,N],[12,"f_reserved","","",46,N],[3,"kevent","","",N,N],[12,"ident","","",47,N],[12,"filter","","",47,N],[12,"flags","","",47,N],[12,"fflags","","",47,N],[12,"data","","",47,N],[12,"udata","","",47,N],[3,"kevent64_s","","",N,N],[12,"ident","","",48,N],[12,"filter","","",48,N],[12,"flags","","",48,N],[12,"fflags","","",48,N],[12,"data","","",48,N],[12,"udata","","",48,N],[12,"ext","","",48,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",49,N],[12,"dqb_bsoftlimit","","",49,N],[12,"dqb_curbytes","","",49,N],[12,"dqb_ihardlimit","","",49,N],[12,"dqb_isoftlimit","","",49,N],[12,"dqb_curinodes","","",49,N],[12,"dqb_btime","","",49,N],[12,"dqb_itime","","",49,N],[12,"dqb_id","","",49,N],[12,"dqb_spare","","",49,N],[3,"if_msghdr","","",N,N],[12,"ifm_msglen","","",50,N],[12,"ifm_version","","",50,N],[12,"ifm_type","","",50,N],[12,"ifm_addrs","","",50,N],[12,"ifm_flags","","",50,N],[12,"ifm_index","","",50,N],[12,"ifm_data","","",50,N],[3,"termios","","",N,N],[12,"c_iflag","","",51,N],[12,"c_oflag","","",51,N],[12,"c_cflag","","",51,N],[12,"c_lflag","","",51,N],[12,"c_cc","","",51,N],[12,"c_ispeed","","",51,N],[12,"c_ospeed","","",51,N],[3,"flock","","",N,N],[12,"l_start","","",52,N],[12,"l_len","","",52,N],[12,"l_pid","","",52,N],[12,"l_type","","",52,N],[12,"l_whence","","",52,N],[3,"sf_hdtr","","",N,N],[12,"headers","","",53,N],[12,"hdr_cnt","","",53,N],[12,"trailers","","",53,N],[12,"trl_cnt","","",53,N],[3,"lconv","","",N,N],[12,"decimal_point","","",54,N],[12,"thousands_sep","","",54,N],[12,"grouping","","",54,N],[12,"int_curr_symbol","","",54,N],[12,"currency_symbol","","",54,N],[12,"mon_decimal_point","","",54,N],[12,"mon_thousands_sep","","",54,N],[12,"mon_grouping","","",54,N],[12,"positive_sign","","",54,N],[12,"negative_sign","","",54,N],[12,"int_frac_digits","","",54,N],[12,"frac_digits","","",54,N],[12,"p_cs_precedes","","",54,N],[12,"p_sep_by_space","","",54,N],[12,"n_cs_precedes","","",54,N],[12,"n_sep_by_space","","",54,N],[12,"p_sign_posn","","",54,N],[12,"n_sign_posn","","",54,N],[12,"int_p_cs_precedes","","",54,N],[12,"int_n_cs_precedes","","",54,N],[12,"int_p_sep_by_space","","",54,N],[12,"int_n_sep_by_space","","",54,N],[12,"int_p_sign_posn","","",54,N],[12,"int_n_sign_posn","","",54,N],[3,"sigevent","","",N,N],[12,"sigev_notify","","",55,N],[12,"sigev_signo","","",55,N],[12,"sigev_value","","",55,N],[12,"sigev_notify_attributes","","",55,N],[3,"proc_taskinfo","","",N,N],[12,"pti_virtual_size","","",56,N],[12,"pti_resident_size","","",56,N],[12,"pti_total_user","","",56,N],[12,"pti_total_system","","",56,N],[12,"pti_threads_user","","",56,N],[12,"pti_threads_system","","",56,N],[12,"pti_policy","","",56,N],[12,"pti_faults","","",56,N],[12,"pti_pageins","","",56,N],[12,"pti_cow_faults","","",56,N],[12,"pti_messages_sent","","",56,N],[12,"pti_messages_received","","",56,N],[12,"pti_syscalls_mach","","",56,N],[12,"pti_syscalls_unix","","",56,N],[12,"pti_csw","","",56,N],[12,"pti_threadnum","","",56,N],[12,"pti_numrunning","","",56,N],[12,"pti_priority","","",56,N],[3,"proc_bsdinfo","","",N,N],[12,"pbi_flags","","",57,N],[12,"pbi_status","","",57,N],[12,"pbi_xstatus","","",57,N],[12,"pbi_pid","","",57,N],[12,"pbi_ppid","","",57,N],[12,"pbi_uid","","",57,N],[12,"pbi_gid","","",57,N],[12,"pbi_ruid","","",57,N],[12,"pbi_rgid","","",57,N],[12,"pbi_svuid","","",57,N],[12,"pbi_svgid","","",57,N],[12,"rfu_1","","",57,N],[12,"pbi_comm","","",57,N],[12,"pbi_name","","",57,N],[12,"pbi_nfiles","","",57,N],[12,"pbi_pgid","","",57,N],[12,"pbi_pjobc","","",57,N],[12,"e_tdev","","",57,N],[12,"e_tpgid","","",57,N],[12,"pbi_nice","","",57,N],[12,"pbi_start_tvsec","","",57,N],[12,"pbi_start_tvusec","","",57,N],[3,"proc_taskallinfo","","",N,N],[12,"pbsd","","",58,N],[12,"ptinfo","","",58,N],[3,"proc_threadinfo","","",N,N],[12,"pth_user_time","","",59,N],[12,"pth_system_time","","",59,N],[12,"pth_cpu_usage","","",59,N],[12,"pth_policy","","",59,N],[12,"pth_run_state","","",59,N],[12,"pth_flags","","",59,N],[12,"pth_sleep_time","","",59,N],[12,"pth_curpri","","",59,N],[12,"pth_priority","","",59,N],[12,"pth_maxpriority","","",59,N],[12,"pth_name","","",59,N],[3,"xsw_usage","","",N,N],[12,"xsu_total","","",60,N],[12,"xsu_avail","","",60,N],[12,"xsu_used","","",60,N],[12,"xsu_pagesize","","",60,N],[12,"xsu_encrypted","","",60,N],[3,"xucred","","",N,N],[12,"cr_version","","",61,N],[12,"cr_uid","","",61,N],[12,"cr_ngroups","","",61,N],[12,"cr_groups","","",61,N],[3,"mach_header","","",N,N],[12,"magic","","",62,N],[12,"cputype","","",62,N],[12,"cpusubtype","","",62,N],[12,"filetype","","",62,N],[12,"ncmds","","",62,N],[12,"sizeofcmds","","",62,N],[12,"flags","","",62,N],[3,"mach_header_64","","",N,N],[12,"magic","","",63,N],[12,"cputype","","",63,N],[12,"cpusubtype","","",63,N],[12,"filetype","","",63,N],[12,"ncmds","","",63,N],[12,"sizeofcmds","","",63,N],[12,"flags","","",63,N],[12,"reserved","","",63,N],[3,"segment_command","","",N,N],[12,"cmd","","",64,N],[12,"cmdsize","","",64,N],[12,"segname","","",64,N],[12,"vmaddr","","",64,N],[12,"vmsize","","",64,N],[12,"fileoff","","",64,N],[12,"filesize","","",64,N],[12,"maxprot","","",64,N],[12,"initprot","","",64,N],[12,"nsects","","",64,N],[12,"flags","","",64,N],[3,"segment_command_64","","",N,N],[12,"cmd","","",65,N],[12,"cmdsize","","",65,N],[12,"segname","","",65,N],[12,"vmaddr","","",65,N],[12,"vmsize","","",65,N],[12,"fileoff","","",65,N],[12,"filesize","","",65,N],[12,"maxprot","","",65,N],[12,"initprot","","",65,N],[12,"nsects","","",65,N],[12,"flags","","",65,N],[3,"load_command","","",N,N],[12,"cmd","","",66,N],[12,"cmdsize","","",66,N],[3,"sockaddr_dl","","",N,N],[12,"sdl_len","","",67,N],[12,"sdl_family","","",67,N],[12,"sdl_index","","",67,N],[12,"sdl_type","","",67,N],[12,"sdl_nlen","","",67,N],[12,"sdl_alen","","",67,N],[12,"sdl_slen","","",67,N],[12,"sdl_data","","",67,N],[3,"sockaddr_inarp","","",N,N],[12,"sin_len","","",68,N],[12,"sin_family","","",68,N],[12,"sin_port","","",68,N],[12,"sin_addr","","",68,N],[12,"sin_srcaddr","","",68,N],[12,"sin_tos","","",68,N],[12,"sin_other","","",68,N],[3,"sockaddr_ctl","","",N,N],[12,"sc_len","","",69,N],[12,"sc_family","","",69,N],[12,"ss_sysaddr","","",69,N],[12,"sc_id","","",69,N],[12,"sc_unit","","",69,N],[12,"sc_reserved","","",69,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",70,N],[12,"ipi_spec_dst","","",70,N],[12,"ipi_addr","","",70,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",71,N],[12,"ipi6_ifindex","","",71,N],[3,"ipc_perm","","",N,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[12,"cuid","","",72,N],[12,"cgid","","",72,N],[12,"mode","","",72,N],[12,"_seq","","",72,N],[12,"_key","","",72,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",73,N],[12,"shm_segsz","","",73,N],[12,"shm_lpid","","",73,N],[12,"shm_cpid","","",73,N],[12,"shm_nattch","","",73,N],[12,"shm_atime","","",73,N],[12,"shm_dtime","","",73,N],[12,"shm_ctime","","",73,N],[12,"shm_internal","","",73,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",74,N],[12,"ar_pro","","",74,N],[12,"ar_hln","","",74,N],[12,"ar_pln","","",74,N],[12,"ar_op","","",74,N],[3,"pthread_attr_t","","",N,N],[3,"timeval32","","",N,N],[12,"tv_sec","","",75,N],[12,"tv_usec","","",75,N],[3,"if_data","","",N,N],[12,"ifi_type","","",76,N],[12,"ifi_typelen","","",76,N],[12,"ifi_physical","","",76,N],[12,"ifi_addrlen","","",76,N],[12,"ifi_hdrlen","","",76,N],[12,"ifi_recvquota","","",76,N],[12,"ifi_xmitquota","","",76,N],[12,"ifi_unused1","","",76,N],[12,"ifi_mtu","","",76,N],[12,"ifi_metric","","",76,N],[12,"ifi_baudrate","","",76,N],[12,"ifi_ipackets","","",76,N],[12,"ifi_ierrors","","",76,N],[12,"ifi_opackets","","",76,N],[12,"ifi_oerrors","","",76,N],[12,"ifi_collisions","","",76,N],[12,"ifi_ibytes","","",76,N],[12,"ifi_obytes","","",76,N],[12,"ifi_imcasts","","",76,N],[12,"ifi_omcasts","","",76,N],[12,"ifi_iqdrops","","",76,N],[12,"ifi_noproto","","",76,N],[12,"ifi_recvtiming","","",76,N],[12,"ifi_xmittiming","","",76,N],[12,"ifi_lastchange","","",76,N],[12,"ifi_unused2","","",76,N],[12,"ifi_hwassist","","",76,N],[12,"ifi_reserved1","","",76,N],[12,"ifi_reserved2","","",76,N],[3,"bpf_hdr","","",N,N],[12,"bh_tstamp","","",77,N],[12,"bh_caplen","","",77,N],[12,"bh_datalen","","",77,N],[12,"bh_hdrlen","","",77,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"_WSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"setgroups","","",N,N],[5,"ioctl","","",N,N],[5,"kqueue","","",N,N],[5,"unmount","","",N,N],[5,"syscall","","",N,N],[5,"getpwent","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"getprogname","","",N,N],[5,"setprogname","","",N,N],[5,"getloadavg","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"getpeereid","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"sync","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"lio_listio","","",N,N],[5,"dirfd","","",N,N],[5,"lutimes","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"utmpxname","","",N,N],[5,"getnameinfo","","",N,N],[5,"mincore","","",N,N],[5,"sysctlnametomib","","",N,N],[5,"mprotect","","",N,N],[5,"shm_open","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"shmget","","",N,N],[5,"sysctl","","",N,N],[5,"sysctlbyname","","",N,N],[5,"mach_absolute_time","","",N,N],[5,"mach_timebase_info","","",N,N],[5,"pthread_setname_np","","",N,N],[5,"pthread_get_stackaddr_np","","",N,N],[5,"pthread_get_stacksize_np","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"__error","","",N,N],[5,"backtrace","","",N,N],[5,"statfs","","",N,N],[5,"fstatfs","","",N,N],[5,"kevent","","",N,N],[5,"kevent64","","",N,N],[5,"mount","","",N,N],[5,"ptrace","","",N,N],[5,"quotactl","","",N,N],[5,"sethostname","","",N,N],[5,"sendfile","","",N,N],[5,"openpty","","",N,N],[5,"forkpty","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"localeconv_l","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"querylocale","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"getxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"renamex_np","","",N,N],[5,"renameatx_np","","",N,N],[5,"fremovexattr","","",N,N],[5,"getgrouplist","","",N,N],[5,"initgroups","","",N,N],[5,"waitid","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"settimeofday","","",N,N],[5,"_dyld_image_count","","",N,N],[5,"_dyld_get_image_header","","",N,N],[5,"_dyld_get_image_vmaddr_slide","","",N,N],[5,"_dyld_get_image_name","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"wchar_t","","",N,N],[6,"off_t","","",N,N],[6,"useconds_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"socklen_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_t","","",N,N],[6,"nfds_t","","",N,N],[6,"c_char","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"ino_t","","",N,N],[6,"mode_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"rlim_t","","",N,N],[6,"mach_timebase_info_data_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"sigset_t","","",N,N],[6,"clockid_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"nl_item","","",N,N],[6,"id_t","","",N,N],[6,"sem_t","","",N,N],[6,"idtype_t","","",N,N],[6,"integer_t","","",N,N],[6,"cpu_type_t","","",N,N],[6,"cpu_subtype_t","","",N,N],[6,"vm_prot_t","","",N,N],[6,"posix_spawnattr_t","","",N,N],[6,"posix_spawn_file_actions_t","","",N,N],[6,"key_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[6,"boolean_t","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PATH_MAX","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGINFO","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"NCCS","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"O_SHLOCK","","",N,N],[17,"O_EXLOCK","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"VEOF","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VERASE","","",N,N],[17,"VWERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VREPRINT","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VSUSP","","",N,N],[17,"VDSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VLNEXT","","",N,N],[17,"VDISCARD","","",N,N],[17,"VMIN","","",N,N],[17,"VTIME","","",N,N],[17,"VSTATUS","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"ONLCR","","",N,N],[17,"OXTABS","","",N,N],[17,"ONOEOT","","",N,N],[17,"CIGNORE","","",N,N],[17,"CSIZE","","",N,N],[17,"CS5","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHO","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"ALTWERASE","","",N,N],[17,"IEXTEN","","",N,N],[17,"EXTPROC","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"NOKERNINFO","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"MDMBUF","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_SELF","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"_UTX_USERSIZE","","",N,N],[17,"_UTX_LINESIZE","","",N,N],[17,"_UTX_IDSIZE","","",N,N],[17,"_UTX_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"SIGNATURE","","",N,N],[17,"SHUTDOWN_TIME","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"CODESET","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"D_MD_ORDER","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"BUFSIZ","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"TMP_MAX","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGEMT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_ANON","","",N,N],[17,"VM_FLAGS_FIXED","","",N,N],[17,"VM_FLAGS_ANYWHERE","","",N,N],[17,"VM_FLAGS_PURGABLE","","",N,N],[17,"VM_FLAGS_RANDOM_ADDR","","",N,N],[17,"VM_FLAGS_NO_CACHE","","",N,N],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",N,N],[17,"VM_FLAGS_RESILIENT_MEDIA","","",N,N],[17,"VM_FLAGS_OVERWRITE","","",N,N],[17,"VM_FLAGS_SUPERPAGE_MASK","","",N,N],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",N,N],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",N,N],[17,"VM_FLAGS_ALIAS_MASK","","",N,N],[17,"VM_FLAGS_USER_ALLOCATE","","",N,N],[17,"VM_FLAGS_USER_MAP","","",N,N],[17,"VM_FLAGS_USER_REMAP","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",N,N],[17,"SUPERPAGE_NONE","","",N,N],[17,"SUPERPAGE_SIZE_ANY","","",N,N],[17,"VM_FLAGS_SUPERPAGE_NONE","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",N,N],[17,"SUPERPAGE_SIZE_2MB","","",N,N],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",N,N],[17,"VM_MEMORY_MALLOC","","",N,N],[17,"VM_MEMORY_MALLOC_SMALL","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE","","",N,N],[17,"VM_MEMORY_MALLOC_HUGE","","",N,N],[17,"VM_MEMORY_SBRK","","",N,N],[17,"VM_MEMORY_REALLOC","","",N,N],[17,"VM_MEMORY_MALLOC_TINY","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",N,N],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",N,N],[17,"VM_MEMORY_ANALYSIS_TOOL","","",N,N],[17,"VM_MEMORY_MALLOC_NANO","","",N,N],[17,"VM_MEMORY_MACH_MSG","","",N,N],[17,"VM_MEMORY_IOKIT","","",N,N],[17,"VM_MEMORY_STACK","","",N,N],[17,"VM_MEMORY_GUARD","","",N,N],[17,"VM_MEMORY_SHARED_PMAP","","",N,N],[17,"VM_MEMORY_DYLIB","","",N,N],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",N,N],[17,"VM_MEMORY_UNSHARED_PMAP","","",N,N],[17,"VM_MEMORY_APPKIT","","",N,N],[17,"VM_MEMORY_FOUNDATION","","",N,N],[17,"VM_MEMORY_COREGRAPHICS","","",N,N],[17,"VM_MEMORY_CORESERVICES","","",N,N],[17,"VM_MEMORY_CARBON","","",N,N],[17,"VM_MEMORY_JAVA","","",N,N],[17,"VM_MEMORY_COREDATA","","",N,N],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",N,N],[17,"VM_MEMORY_ATS","","",N,N],[17,"VM_MEMORY_LAYERKIT","","",N,N],[17,"VM_MEMORY_CGIMAGE","","",N,N],[17,"VM_MEMORY_TCMALLOC","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",N,N],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",N,N],[17,"VM_MEMORY_DYLD","","",N,N],[17,"VM_MEMORY_DYLD_MALLOC","","",N,N],[17,"VM_MEMORY_SQLITE","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",N,N],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",N,N],[17,"VM_MEMORY_GLSL","","",N,N],[17,"VM_MEMORY_OPENCL","","",N,N],[17,"VM_MEMORY_COREIMAGE","","",N,N],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",N,N],[17,"VM_MEMORY_IMAGEIO","","",N,N],[17,"VM_MEMORY_COREPROFILE","","",N,N],[17,"VM_MEMORY_ASSETSD","","",N,N],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",N,N],[17,"VM_MEMORY_LIBDISPATCH","","",N,N],[17,"VM_MEMORY_ACCELERATE","","",N,N],[17,"VM_MEMORY_COREUI","","",N,N],[17,"VM_MEMORY_COREUIFILE","","",N,N],[17,"VM_MEMORY_GENEALOGY","","",N,N],[17,"VM_MEMORY_RAWCAMERA","","",N,N],[17,"VM_MEMORY_CORPSEINFO","","",N,N],[17,"VM_MEMORY_ASL","","",N,N],[17,"VM_MEMORY_SWIFT_RUNTIME","","",N,N],[17,"VM_MEMORY_SWIFT_METADATA","","",N,N],[17,"VM_MEMORY_DHMM","","",N,N],[17,"VM_MEMORY_SCENEKIT","","",N,N],[17,"VM_MEMORY_SKYWALK","","",N,N],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",N,N],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_KILLPAGES","","",N,N],[17,"MS_DEACTIVATE","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EAGAIN","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"EALREADY","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"ELOOP","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"EPROCLIM","","",N,N],[17,"EUSERS","","",N,N],[17,"EDQUOT","","",N,N],[17,"ESTALE","","",N,N],[17,"EREMOTE","","",N,N],[17,"EBADRPC","","",N,N],[17,"ERPCMISMATCH","","",N,N],[17,"EPROGUNAVAIL","","",N,N],[17,"EPROGMISMATCH","","",N,N],[17,"EPROCUNAVAIL","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"EFTYPE","","",N,N],[17,"EAUTH","","",N,N],[17,"ENEEDAUTH","","",N,N],[17,"EPWROFF","","",N,N],[17,"EDEVERR","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"EBADEXEC","","",N,N],[17,"EBADARCH","","",N,N],[17,"ESHLIBVERS","","",N,N],[17,"EBADMACHO","","",N,N],[17,"ECANCELED","","",N,N],[17,"EIDRM","","",N,N],[17,"ENOMSG","","",N,N],[17,"EILSEQ","","",N,N],[17,"ENOATTR","","",N,N],[17,"EBADMSG","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"ENODATA","","",N,N],[17,"ENOLINK","","",N,N],[17,"ENOSR","","",N,N],[17,"ENOSTR","","",N,N],[17,"EPROTO","","",N,N],[17,"ETIME","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"ENOPOLICY","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"EQFULL","","",N,N],[17,"ELAST","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_PREALLOCATE","","",N,N],[17,"F_RDADVISE","","",N,N],[17,"F_RDAHEAD","","",N,N],[17,"F_NOCACHE","","",N,N],[17,"F_GETPATH","","",N,N],[17,"F_FULLFSYNC","","",N,N],[17,"F_FREEZE_FS","","",N,N],[17,"F_THAW_FS","","",N,N],[17,"F_GLOBAL_NOCACHE","","",N,N],[17,"F_NODIRECT","","",N,N],[17,"F_ALLOCATECONTIG","","",N,N],[17,"F_ALLOCATEALL","","",N,N],[17,"F_PEOFPOSMODE","","",N,N],[17,"F_VOLPOSMODE","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_EACCESS","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"TIOCMODG","","",N,N],[17,"TIOCMODS","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCFLUSH","","",N,N],[17,"TIOCGETD","","",N,N],[17,"TIOCSETD","","",N,N],[17,"TIOCIXON","","",N,N],[17,"TIOCIXOFF","","",N,N],[17,"TIOCSBRK","","",N,N],[17,"TIOCCBRK","","",N,N],[17,"TIOCSDTR","","",N,N],[17,"TIOCCDTR","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCNOTTY","","",N,N],[17,"TIOCPKT","","",N,N],[17,"TIOCPKT_DATA","","",N,N],[17,"TIOCPKT_FLUSHREAD","","",N,N],[17,"TIOCPKT_FLUSHWRITE","","",N,N],[17,"TIOCPKT_STOP","","",N,N],[17,"TIOCPKT_START","","",N,N],[17,"TIOCPKT_NOSTOP","","",N,N],[17,"TIOCPKT_DOSTOP","","",N,N],[17,"TIOCPKT_IOCTL","","",N,N],[17,"TIOCSTOP","","",N,N],[17,"TIOCSTART","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCREMOTE","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"TIOCUCNTL","","",N,N],[17,"TIOCSTAT","","",N,N],[17,"TIOCSCONS","","",N,N],[17,"TIOCCONS","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCEXT","","",N,N],[17,"TIOCSIG","","",N,N],[17,"TIOCDRAIN","","",N,N],[17,"TIOCMSDTRWAIT","","",N,N],[17,"TIOCMGDTRWAIT","","",N,N],[17,"TIOCSDRAINWAIT","","",N,N],[17,"TIOCGDRAINWAIT","","",N,N],[17,"TIOCDSIMICROCODE","","",N,N],[17,"TIOCPTYGRANT","","",N,N],[17,"TIOCPTYGNAME","","",N,N],[17,"TIOCPTYUNLK","","",N,N],[17,"FIONCLEX","","",N,N],[17,"FIONREAD","","",N,N],[17,"FIOASYNC","","",N,N],[17,"FIOSETOWN","","",N,N],[17,"FIOGETOWN","","",N,N],[17,"FIODTYPE","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"B7200","","",N,N],[17,"B14400","","",N,N],[17,"B28800","","",N,N],[17,"B57600","","",N,N],[17,"B76800","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"SIGTRAP","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIM_NLIMITS","","",N,N],[17,"_RLIMIT_POSIX_FLAG","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_ZERO_WIRED_PAGES","","",N,N],[17,"MADV_FREE_REUSABLE","","",N,N],[17,"MADV_FREE_REUSE","","",N,N],[17,"MADV_CAN_REUSE","","",N,N],[17,"MINCORE_INCORE","","",N,N],[17,"MINCORE_REFERENCED","","",N,N],[17,"MINCORE_MODIFIED","","",N,N],[17,"MINCORE_REFERENCED_OTHER","","",N,N],[17,"MINCORE_MODIFIED_OTHER","","",N,N],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_GGP","","gateway2 (deprecated)",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_ST","","Stream protocol II.",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PIGP","","private interior gateway",N,N],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",N,N],[17,"IPPROTO_NVPII","","network voice protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_ARGUS","","Argus",N,N],[17,"IPPROTO_EMCON","","EMCON",N,N],[17,"IPPROTO_XNET","","Cross Net Debugger",N,N],[17,"IPPROTO_CHAOS","","Chaos",N,N],[17,"IPPROTO_MUX","","Multiplexing",N,N],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",N,N],[17,"IPPROTO_HMP","","Host Monitoring",N,N],[17,"IPPROTO_PRM","","Packet Radio Measurement",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TRUNK1","","Trunk-1",N,N],[17,"IPPROTO_TRUNK2","","Trunk-2",N,N],[17,"IPPROTO_LEAF1","","Leaf-1",N,N],[17,"IPPROTO_LEAF2","","Leaf-2",N,N],[17,"IPPROTO_RDP","","Reliable Data",N,N],[17,"IPPROTO_IRTP","","Reliable Transaction",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_BLT","","Bulk Data Transfer",N,N],[17,"IPPROTO_NSP","","Network Services",N,N],[17,"IPPROTO_INP","","Merit Internodal",N,N],[17,"IPPROTO_SEP","","Sequential Exchange",N,N],[17,"IPPROTO_3PC","","Third Party Connect",N,N],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",N,N],[17,"IPPROTO_XTP","","XTP",N,N],[17,"IPPROTO_DDP","","Datagram Delivery",N,N],[17,"IPPROTO_CMTP","","Control Message Transport",N,N],[17,"IPPROTO_TPXX","","TP++ Transport",N,N],[17,"IPPROTO_IL","","IL transport protocol",N,N],[17,"IPPROTO_SDRP","","Source Demand Routing",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_IDRP","","InterDomain Routing",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_MHRP","","Mobile Host Routing",N,N],[17,"IPPROTO_BHA","","BHA",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",N,N],[17,"IPPROTO_SWIPE","","IP with encryption",N,N],[17,"IPPROTO_NHRP","","Next Hop Resolution",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_AHIP","","any host internal protocol",N,N],[17,"IPPROTO_CFTP","","CFTP",N,N],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",N,N],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",N,N],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",N,N],[17,"IPPROTO_RVD","","Remote Virtual Disk",N,N],[17,"IPPROTO_IPPC","","Pluribus Packet Core",N,N],[17,"IPPROTO_ADFS","","Any distributed FS",N,N],[17,"IPPROTO_SATMON","","Satnet Monitoring",N,N],[17,"IPPROTO_VISA","","VISA Protocol",N,N],[17,"IPPROTO_IPCV","","Packet Core Utility",N,N],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",N,N],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",N,N],[17,"IPPROTO_WSN","","Wang Span Network",N,N],[17,"IPPROTO_PVP","","Packet Video Protocol",N,N],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",N,N],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",N,N],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",N,N],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",N,N],[17,"IPPROTO_EON","","ISO cnlp",N,N],[17,"IPPROTO_VMTP","","VMTP",N,N],[17,"IPPROTO_SVMTP","","Secure VMTP",N,N],[17,"IPPROTO_VINES","","Banyon VINES",N,N],[17,"IPPROTO_TTP","","TTP",N,N],[17,"IPPROTO_IGP","","NSFNET-IGP",N,N],[17,"IPPROTO_DGP","","dissimilar gateway prot.",N,N],[17,"IPPROTO_TCF","","TCF",N,N],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",N,N],[17,"IPPROTO_OSPFIGP","","OSPFIGP",N,N],[17,"IPPROTO_SRPC","","Strite RPC protocol",N,N],[17,"IPPROTO_LARP","","Locus Address Resoloution",N,N],[17,"IPPROTO_MTP","","Multicast Transport",N,N],[17,"IPPROTO_AX25","","AX.25 Frames",N,N],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",N,N],[17,"IPPROTO_MICP","","Mobile Int.ing control",N,N],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",N,N],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_APES","","any private encr. scheme",N,N],[17,"IPPROTO_GMTP","","GMTP",N,N],[17,"IPPROTO_PIM","","Protocol Independent Mcast",N,N],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",N,N],[17,"IPPROTO_PGM","","PGM",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_IMPLINK","","",N,N],[17,"AF_PUP","","",N,N],[17,"AF_CHAOS","","",N,N],[17,"AF_NS","","",N,N],[17,"AF_ISO","","",N,N],[17,"AF_OSI","","",N,N],[17,"AF_ECMA","","",N,N],[17,"AF_DATAKIT","","",N,N],[17,"AF_CCITT","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_DLI","","",N,N],[17,"AF_LAT","","",N,N],[17,"AF_HYLINK","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_LINK","","",N,N],[17,"pseudo_AF_XTP","","",N,N],[17,"AF_COIP","","",N,N],[17,"AF_CNT","","",N,N],[17,"pseudo_AF_RTIP","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_SIP","","",N,N],[17,"pseudo_AF_PIP","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_E164","","",N,N],[17,"pseudo_AF_KEY","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_NATM","","",N,N],[17,"AF_SYSTEM","","",N,N],[17,"AF_NETBIOS","","",N,N],[17,"AF_PPP","","",N,N],[17,"pseudo_AF_HDRCMPLT","","",N,N],[17,"AF_SYS_CONTROL","","",N,N],[17,"SYSPROTO_EVENT","","",N,N],[17,"SYSPROTO_CONTROL","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_IMPLINK","","",N,N],[17,"PF_PUP","","",N,N],[17,"PF_CHAOS","","",N,N],[17,"PF_NS","","",N,N],[17,"PF_ISO","","",N,N],[17,"PF_OSI","","",N,N],[17,"PF_ECMA","","",N,N],[17,"PF_DATAKIT","","",N,N],[17,"PF_CCITT","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_DLI","","",N,N],[17,"PF_LAT","","",N,N],[17,"PF_HYLINK","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_LINK","","",N,N],[17,"PF_XTP","","",N,N],[17,"PF_COIP","","",N,N],[17,"PF_CNT","","",N,N],[17,"PF_SIP","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_RTIP","","",N,N],[17,"PF_PIP","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_NATM","","",N,N],[17,"PF_SYSTEM","","",N,N],[17,"PF_NETBIOS","","",N,N],[17,"PF_PPP","","",N,N],[17,"NET_RT_DUMP","","",N,N],[17,"NET_RT_FLAGS","","",N,N],[17,"NET_RT_IFLIST","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"SOCK_MAXADDRLEN","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IPV6_JOIN_GROUP","","",N,N],[17,"IPV6_LEAVE_GROUP","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_KEEPALIVE","","",N,N],[17,"SOL_LOCAL","","",N,N],[17,"LOCAL_PEERCRED","","",N,N],[17,"LOCAL_PEERPID","","",N,N],[17,"LOCAL_PEEREPID","","",N,N],[17,"LOCAL_PEERUUID","","",N,N],[17,"LOCAL_PEEREUUID","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_USELOOPBACK","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_TIMESTAMP_MONOTONIC","","",N,N],[17,"SO_DONTTRUNC","","",N,N],[17,"SO_WANTMORE","","",N,N],[17,"SO_WANTOOBFLAG","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_LABEL","","",N,N],[17,"SO_PEERLABEL","","",N,N],[17,"SO_NREAD","","",N,N],[17,"SO_NKE","","",N,N],[17,"SO_NOSIGPIPE","","",N,N],[17,"SO_NOADDRERR","","",N,N],[17,"SO_NWRITE","","",N,N],[17,"SO_REUSESHAREUID","","",N,N],[17,"SO_NOTIFYCONFLICT","","",N,N],[17,"SO_RANDOMPORT","","",N,N],[17,"SO_NP_EXTENSIONS","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOF","","",N,N],[17,"MSG_FLUSH","","",N,N],[17,"MSG_HOLD","","",N,N],[17,"MSG_SEND","","",N,N],[17,"MSG_HAVEMORE","","",N,N],[17,"MSG_RCVMORE","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SCM_CREDS","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_OACTIVE","","",N,N],[17,"IFF_SIMPLEX","","",N,N],[17,"IFF_LINK0","","",N,N],[17,"IFF_LINK1","","",N,N],[17,"IFF_LINK2","","",N,N],[17,"IFF_ALTPHYS","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"MAP_COPY","","",N,N],[17,"MAP_RENAME","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_NOEXTEND","","",N,N],[17,"MAP_HASSEMAPHORE","","",N,N],[17,"MAP_NOCACHE","","",N,N],[17,"MAP_JIT","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"_PTHREAD_MUTEX_SIG_init","","",N,N],[17,"_PTHREAD_COND_SIG_init","","",N,N],[17,"_PTHREAD_RWLOCK_SIG_init","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"EVFILT_READ","","",N,N],[17,"EVFILT_WRITE","","",N,N],[17,"EVFILT_AIO","","",N,N],[17,"EVFILT_VNODE","","",N,N],[17,"EVFILT_PROC","","",N,N],[17,"EVFILT_SIGNAL","","",N,N],[17,"EVFILT_TIMER","","",N,N],[17,"EVFILT_MACHPORT","","",N,N],[17,"EVFILT_FS","","",N,N],[17,"EVFILT_USER","","",N,N],[17,"EVFILT_VM","","",N,N],[17,"EV_ADD","","",N,N],[17,"EV_DELETE","","",N,N],[17,"EV_ENABLE","","",N,N],[17,"EV_DISABLE","","",N,N],[17,"EV_ONESHOT","","",N,N],[17,"EV_CLEAR","","",N,N],[17,"EV_RECEIPT","","",N,N],[17,"EV_DISPATCH","","",N,N],[17,"EV_FLAG0","","",N,N],[17,"EV_POLL","","",N,N],[17,"EV_FLAG1","","",N,N],[17,"EV_OOBAND","","",N,N],[17,"EV_ERROR","","",N,N],[17,"EV_EOF","","",N,N],[17,"EV_SYSFLAGS","","",N,N],[17,"NOTE_TRIGGER","","",N,N],[17,"NOTE_FFNOP","","",N,N],[17,"NOTE_FFAND","","",N,N],[17,"NOTE_FFOR","","",N,N],[17,"NOTE_FFCOPY","","",N,N],[17,"NOTE_FFCTRLMASK","","",N,N],[17,"NOTE_FFLAGSMASK","","",N,N],[17,"NOTE_LOWAT","","",N,N],[17,"NOTE_DELETE","","",N,N],[17,"NOTE_WRITE","","",N,N],[17,"NOTE_EXTEND","","",N,N],[17,"NOTE_ATTRIB","","",N,N],[17,"NOTE_LINK","","",N,N],[17,"NOTE_RENAME","","",N,N],[17,"NOTE_REVOKE","","",N,N],[17,"NOTE_NONE","","",N,N],[17,"NOTE_EXIT","","",N,N],[17,"NOTE_FORK","","",N,N],[17,"NOTE_EXEC","","",N,N],[17,"NOTE_REAP","","",N,N],[17,"NOTE_SIGNAL","","",N,N],[17,"NOTE_EXITSTATUS","","",N,N],[17,"NOTE_EXIT_DETAIL","","",N,N],[17,"NOTE_PDATAMASK","","",N,N],[17,"NOTE_PCTRLMASK","","",N,N],[17,"NOTE_EXIT_REPARENTED","","",N,N],[17,"NOTE_EXIT_DETAIL_MASK","","",N,N],[17,"NOTE_EXIT_DECRYPTFAIL","","",N,N],[17,"NOTE_EXIT_MEMORY","","",N,N],[17,"NOTE_EXIT_CSERROR","","",N,N],[17,"NOTE_VM_PRESSURE","","",N,N],[17,"NOTE_VM_PRESSURE_TERMINATE","","",N,N],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",N,N],[17,"NOTE_VM_ERROR","","",N,N],[17,"NOTE_SECONDS","","",N,N],[17,"NOTE_USECONDS","","",N,N],[17,"NOTE_NSECONDS","","",N,N],[17,"NOTE_ABSOLUTE","","",N,N],[17,"NOTE_LEEWAY","","",N,N],[17,"NOTE_CRITICAL","","",N,N],[17,"NOTE_BACKGROUND","","",N,N],[17,"NOTE_TRACK","","",N,N],[17,"NOTE_TRACKERR","","",N,N],[17,"NOTE_CHILD","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"NLDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"OFDEL","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"CR0","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF0","","",N,N],[17,"FF1","","",N,N],[17,"BS0","","",N,N],[17,"BS1","","",N,N],[17,"TAB3","","",N,N],[17,"VT0","","",N,N],[17,"VT1","","",N,N],[17,"IUTF8","","",N,N],[17,"CRTSCTS","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"RENAME_SWAP","","",N,N],[17,"RENAME_EXCL","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_FIRST","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"_WSTOPPED","","",N,N],[17,"LOG_NETINFO","","",N,N],[17,"LOG_REMOTEAUTH","","",N,N],[17,"LOG_INSTALL","","",N,N],[17,"LOG_RAS","","",N,N],[17,"LOG_LAUNCHD","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"CTLTYPE","","",N,N],[17,"CTLTYPE_NODE","","",N,N],[17,"CTLTYPE_INT","","",N,N],[17,"CTLTYPE_STRING","","",N,N],[17,"CTLTYPE_QUAD","","",N,N],[17,"CTLTYPE_OPAQUE","","",N,N],[17,"CTLTYPE_STRUCT","","",N,N],[17,"CTLFLAG_RD","","",N,N],[17,"CTLFLAG_WR","","",N,N],[17,"CTLFLAG_RW","","",N,N],[17,"CTLFLAG_NOLOCK","","",N,N],[17,"CTLFLAG_ANYBODY","","",N,N],[17,"CTLFLAG_SECURE","","",N,N],[17,"CTLFLAG_MASKED","","",N,N],[17,"CTLFLAG_NOAUTO","","",N,N],[17,"CTLFLAG_KERN","","",N,N],[17,"CTLFLAG_LOCKED","","",N,N],[17,"CTLFLAG_OID2","","",N,N],[17,"CTL_UNSPEC","","",N,N],[17,"CTL_KERN","","",N,N],[17,"CTL_VM","","",N,N],[17,"CTL_VFS","","",N,N],[17,"CTL_NET","","",N,N],[17,"CTL_DEBUG","","",N,N],[17,"CTL_HW","","",N,N],[17,"CTL_MACHDEP","","",N,N],[17,"CTL_USER","","",N,N],[17,"CTL_MAXID","","",N,N],[17,"KERN_OSTYPE","","",N,N],[17,"KERN_OSRELEASE","","",N,N],[17,"KERN_OSREV","","",N,N],[17,"KERN_VERSION","","",N,N],[17,"KERN_MAXVNODES","","",N,N],[17,"KERN_MAXPROC","","",N,N],[17,"KERN_MAXFILES","","",N,N],[17,"KERN_ARGMAX","","",N,N],[17,"KERN_SECURELVL","","",N,N],[17,"KERN_HOSTNAME","","",N,N],[17,"KERN_HOSTID","","",N,N],[17,"KERN_CLOCKRATE","","",N,N],[17,"KERN_VNODE","","",N,N],[17,"KERN_PROC","","",N,N],[17,"KERN_FILE","","",N,N],[17,"KERN_PROF","","",N,N],[17,"KERN_POSIX1","","",N,N],[17,"KERN_NGROUPS","","",N,N],[17,"KERN_JOB_CONTROL","","",N,N],[17,"KERN_SAVED_IDS","","",N,N],[17,"KERN_BOOTTIME","","",N,N],[17,"KERN_NISDOMAINNAME","","",N,N],[17,"KERN_DOMAINNAME","","",N,N],[17,"KERN_MAXPARTITIONS","","",N,N],[17,"KERN_KDEBUG","","",N,N],[17,"KERN_UPDATEINTERVAL","","",N,N],[17,"KERN_OSRELDATE","","",N,N],[17,"KERN_NTP_PLL","","",N,N],[17,"KERN_BOOTFILE","","",N,N],[17,"KERN_MAXFILESPERPROC","","",N,N],[17,"KERN_MAXPROCPERUID","","",N,N],[17,"KERN_DUMPDEV","","",N,N],[17,"KERN_IPC","","",N,N],[17,"KERN_DUMMY","","",N,N],[17,"KERN_PS_STRINGS","","",N,N],[17,"KERN_USRSTACK32","","",N,N],[17,"KERN_LOGSIGEXIT","","",N,N],[17,"KERN_SYMFILE","","",N,N],[17,"KERN_PROCARGS","","",N,N],[17,"KERN_NETBOOT","","",N,N],[17,"KERN_SYSV","","",N,N],[17,"KERN_AFFINITY","","",N,N],[17,"KERN_TRANSLATE","","",N,N],[17,"KERN_CLASSIC","","",N,N],[17,"KERN_EXEC","","",N,N],[17,"KERN_CLASSICHANDLER","","",N,N],[17,"KERN_AIOMAX","","",N,N],[17,"KERN_AIOPROCMAX","","",N,N],[17,"KERN_AIOTHREADS","","",N,N],[17,"KERN_COREFILE","","",N,N],[17,"KERN_COREDUMP","","",N,N],[17,"KERN_SUGID_COREDUMP","","",N,N],[17,"KERN_PROCDELAYTERM","","",N,N],[17,"KERN_SHREG_PRIVATIZABLE","","",N,N],[17,"KERN_LOW_PRI_WINDOW","","",N,N],[17,"KERN_LOW_PRI_DELAY","","",N,N],[17,"KERN_POSIX","","",N,N],[17,"KERN_USRSTACK64","","",N,N],[17,"KERN_NX_PROTECTION","","",N,N],[17,"KERN_TFP","","",N,N],[17,"KERN_PROCNAME","","",N,N],[17,"KERN_THALTSTACK","","",N,N],[17,"KERN_SPECULATIVE_READS","","",N,N],[17,"KERN_OSVERSION","","",N,N],[17,"KERN_SAFEBOOT","","",N,N],[17,"KERN_RAGEVNODE","","",N,N],[17,"KERN_TTY","","",N,N],[17,"KERN_CHECKOPENEVT","","",N,N],[17,"KERN_THREADNAME","","",N,N],[17,"KERN_MAXID","","",N,N],[17,"KERN_RAGE_PROC","","",N,N],[17,"KERN_RAGE_THREAD","","",N,N],[17,"KERN_UNRAGE_PROC","","",N,N],[17,"KERN_UNRAGE_THREAD","","",N,N],[17,"KERN_OPENEVT_PROC","","",N,N],[17,"KERN_UNOPENEVT_PROC","","",N,N],[17,"KERN_TFP_POLICY","","",N,N],[17,"KERN_TFP_POLICY_DENY","","",N,N],[17,"KERN_TFP_POLICY_DEFAULT","","",N,N],[17,"KERN_KDEFLAGS","","",N,N],[17,"KERN_KDDFLAGS","","",N,N],[17,"KERN_KDENABLE","","",N,N],[17,"KERN_KDSETBUF","","",N,N],[17,"KERN_KDGETBUF","","",N,N],[17,"KERN_KDSETUP","","",N,N],[17,"KERN_KDREMOVE","","",N,N],[17,"KERN_KDSETREG","","",N,N],[17,"KERN_KDGETREG","","",N,N],[17,"KERN_KDREADTR","","",N,N],[17,"KERN_KDPIDTR","","",N,N],[17,"KERN_KDTHRMAP","","",N,N],[17,"KERN_KDPIDEX","","",N,N],[17,"KERN_KDSETRTCDEC","","",N,N],[17,"KERN_KDGETENTROPY","","",N,N],[17,"KERN_KDWRITETR","","",N,N],[17,"KERN_KDWRITEMAP","","",N,N],[17,"KERN_KDENABLE_BG_TRACE","","",N,N],[17,"KERN_KDDISABLE_BG_TRACE","","",N,N],[17,"KERN_KDREADCURTHRMAP","","",N,N],[17,"KERN_KDSET_TYPEFILTER","","",N,N],[17,"KERN_KDBUFWAIT","","",N,N],[17,"KERN_KDCPUMAP","","",N,N],[17,"KERN_PROC_ALL","","",N,N],[17,"KERN_PROC_PID","","",N,N],[17,"KERN_PROC_PGRP","","",N,N],[17,"KERN_PROC_SESSION","","",N,N],[17,"KERN_PROC_TTY","","",N,N],[17,"KERN_PROC_UID","","",N,N],[17,"KERN_PROC_RUID","","",N,N],[17,"KERN_PROC_LCID","","",N,N],[17,"KIPC_MAXSOCKBUF","","",N,N],[17,"KIPC_SOCKBUF_WASTE","","",N,N],[17,"KIPC_SOMAXCONN","","",N,N],[17,"KIPC_MAX_LINKHDR","","",N,N],[17,"KIPC_MAX_PROTOHDR","","",N,N],[17,"KIPC_MAX_HDR","","",N,N],[17,"KIPC_MAX_DATALEN","","",N,N],[17,"KIPC_MBSTAT","","",N,N],[17,"KIPC_NMBCLUSTERS","","",N,N],[17,"KIPC_SOQLIMITCOMPAT","","",N,N],[17,"VM_METER","","",N,N],[17,"VM_LOADAVG","","",N,N],[17,"VM_MACHFACTOR","","",N,N],[17,"VM_SWAPUSAGE","","",N,N],[17,"VM_MAXID","","",N,N],[17,"HW_MACHINE","","",N,N],[17,"HW_MODEL","","",N,N],[17,"HW_NCPU","","",N,N],[17,"HW_BYTEORDER","","",N,N],[17,"HW_PHYSMEM","","",N,N],[17,"HW_USERMEM","","",N,N],[17,"HW_PAGESIZE","","",N,N],[17,"HW_DISKNAMES","","",N,N],[17,"HW_DISKSTATS","","",N,N],[17,"HW_EPOCH","","",N,N],[17,"HW_FLOATINGPT","","",N,N],[17,"HW_MACHINE_ARCH","","",N,N],[17,"HW_VECTORUNIT","","",N,N],[17,"HW_BUS_FREQ","","",N,N],[17,"HW_CPU_FREQ","","",N,N],[17,"HW_CACHELINE","","",N,N],[17,"HW_L1ICACHESIZE","","",N,N],[17,"HW_L1DCACHESIZE","","",N,N],[17,"HW_L2SETTINGS","","",N,N],[17,"HW_L2CACHESIZE","","",N,N],[17,"HW_L3SETTINGS","","",N,N],[17,"HW_L3CACHESIZE","","",N,N],[17,"HW_TB_FREQ","","",N,N],[17,"HW_MEMSIZE","","",N,N],[17,"HW_AVAILCPU","","",N,N],[17,"HW_MAXID","","",N,N],[17,"USER_CS_PATH","","",N,N],[17,"USER_BC_BASE_MAX","","",N,N],[17,"USER_BC_DIM_MAX","","",N,N],[17,"USER_BC_SCALE_MAX","","",N,N],[17,"USER_BC_STRING_MAX","","",N,N],[17,"USER_COLL_WEIGHTS_MAX","","",N,N],[17,"USER_EXPR_NEST_MAX","","",N,N],[17,"USER_LINE_MAX","","",N,N],[17,"USER_RE_DUP_MAX","","",N,N],[17,"USER_POSIX2_VERSION","","",N,N],[17,"USER_POSIX2_C_BIND","","",N,N],[17,"USER_POSIX2_C_DEV","","",N,N],[17,"USER_POSIX2_CHAR_TERM","","",N,N],[17,"USER_POSIX2_FORT_DEV","","",N,N],[17,"USER_POSIX2_FORT_RUN","","",N,N],[17,"USER_POSIX2_LOCALEDEF","","",N,N],[17,"USER_POSIX2_SW_DEV","","",N,N],[17,"USER_POSIX2_UPE","","",N,N],[17,"USER_STREAM_MAX","","",N,N],[17,"USER_TZNAME_MAX","","",N,N],[17,"USER_MAXID","","",N,N],[17,"CTL_DEBUG_NAME","","",N,N],[17,"CTL_DEBUG_VALUE","","",N,N],[17,"CTL_DEBUG_MAXID","","",N,N],[17,"PRIO_DARWIN_THREAD","","",N,N],[17,"PRIO_DARWIN_PROCESS","","",N,N],[17,"PRIO_DARWIN_BG","","",N,N],[17,"PRIO_DARWIN_NONUI","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"AIO_LISTIO_MAX","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"WEXITED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"XATTR_NOFOLLOW","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"XATTR_NOSECURITY","","",N,N],[17,"XATTR_NODEFAULT","","",N,N],[17,"XATTR_SHOWCOMPRESSION","","",N,N],[17,"NET_RT_IFLIST2","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_DONE","","",N,N],[17,"RTF_DELCLONE","","",N,N],[17,"RTF_CLONING","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_LLINFO","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_BLACKHOLE","","",N,N],[17,"RTF_NOIFREF","","",N,N],[17,"RTF_PROTO2","","",N,N],[17,"RTF_PROTO1","","",N,N],[17,"RTF_PRCLONING","","",N,N],[17,"RTF_WASCLONED","","",N,N],[17,"RTF_PROTO3","","",N,N],[17,"RTF_PINNED","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_IFSCOPE","","",N,N],[17,"RTF_CONDEMNED","","",N,N],[17,"RTF_IFREF","","",N,N],[17,"RTF_PROXY","","",N,N],[17,"RTF_ROUTER","","",N,N],[17,"RTM_VERSION","","",N,N],[17,"RTM_ADD","","",N,N],[17,"RTM_DELETE","","",N,N],[17,"RTM_CHANGE","","",N,N],[17,"RTM_GET","","",N,N],[17,"RTM_LOSING","","",N,N],[17,"RTM_REDIRECT","","",N,N],[17,"RTM_MISS","","",N,N],[17,"RTM_LOCK","","",N,N],[17,"RTM_OLDADD","","",N,N],[17,"RTM_OLDDEL","","",N,N],[17,"RTM_RESOLVE","","",N,N],[17,"RTM_NEWADDR","","",N,N],[17,"RTM_DELADDR","","",N,N],[17,"RTM_IFINFO","","",N,N],[17,"RTM_NEWMADDR","","",N,N],[17,"RTM_DELMADDR","","",N,N],[17,"RTM_IFINFO2","","",N,N],[17,"RTM_NEWMADDR2","","",N,N],[17,"RTM_GET2","","",N,N],[17,"RTV_MTU","","",N,N],[17,"RTV_HOPCOUNT","","",N,N],[17,"RTV_EXPIRE","","",N,N],[17,"RTV_RPIPE","","",N,N],[17,"RTV_SPIPE","","",N,N],[17,"RTV_SSTHRESH","","",N,N],[17,"RTV_RTT","","",N,N],[17,"RTV_RTTVAR","","",N,N],[17,"RTA_DST","","",N,N],[17,"RTA_GATEWAY","","",N,N],[17,"RTA_NETMASK","","",N,N],[17,"RTA_GENMASK","","",N,N],[17,"RTA_IFP","","",N,N],[17,"RTA_IFA","","",N,N],[17,"RTA_AUTHOR","","",N,N],[17,"RTA_BRD","","",N,N],[17,"RTAX_DST","","",N,N],[17,"RTAX_GATEWAY","","",N,N],[17,"RTAX_NETMASK","","",N,N],[17,"RTAX_GENMASK","","",N,N],[17,"RTAX_IFP","","",N,N],[17,"RTAX_IFA","","",N,N],[17,"RTAX_AUTHOR","","",N,N],[17,"RTAX_BRD","","",N,N],[17,"RTAX_MAX","","",N,N],[17,"KERN_PROCARGS2","","",N,N],[17,"PROC_PIDTASKALLINFO","","",N,N],[17,"PROC_PIDTASKINFO","","",N,N],[17,"PROC_PIDTHREADINFO","","",N,N],[17,"MAXCOMLEN","","",N,N],[17,"MAXTHREADNAMESIZE","","",N,N],[17,"XUCRED_VERSION","","",N,N],[17,"LC_SEGMENT","","",N,N],[17,"LC_SEGMENT_64","","",N,N],[17,"MH_MAGIC","","",N,N],[17,"MH_MAGIC_64","","",N,N],[17,"UTUN_OPT_FLAGS","","",N,N],[17,"UTUN_OPT_IFNAME","","",N,N],[17,"DLT_NULL","","",N,N],[17,"DLT_EN10MB","","",N,N],[17,"DLT_EN3MB","","",N,N],[17,"DLT_AX25","","",N,N],[17,"DLT_PRONET","","",N,N],[17,"DLT_CHAOS","","",N,N],[17,"DLT_IEEE802","","",N,N],[17,"DLT_ARCNET","","",N,N],[17,"DLT_SLIP","","",N,N],[17,"DLT_PPP","","",N,N],[17,"DLT_FDDI","","",N,N],[17,"DLT_ATM_RFC1483","","",N,N],[17,"DLT_RAW","","",N,N],[17,"DLT_LOOP","","",N,N],[17,"BPF_ALIGNMENT","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETEXEC","","",N,N],[17,"POSIX_SPAWN_START_SUSPENDED","","",N,N],[17,"POSIX_SPAWN_CLOEXEC_DEFAULT","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_R","","",N,N],[17,"IPC_W","","",N,N],[17,"IPC_M","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHMLBA","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"__PTHREAD_MUTEX_SIZE__","","",N,N],[17,"__PTHREAD_COND_SIZE__","","",N,N],[17,"__PTHREAD_CONDATTR_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCK_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",N,N],[17,"TIOCTIMESTAMP","","",N,N],[17,"TIOCDCDTIMESTAMP","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",22,[[["self"]],["sockaddr_un"]]],[11,"clone","","",23,[[["self"]],["passwd"]]],[11,"clone","","",24,[[["self"]],["ifaddrs"]]],[11,"clone","","",78,[[["self"]],["fd_set"]]],[11,"clone","","",25,[[["self"]],["tm"]]],[11,"clone","","",26,[[["self"]],["utsname"]]],[11,"clone","","",27,[[["self"]],["msghdr"]]],[11,"clone","","",28,[[["self"]],["cmsghdr"]]],[11,"clone","","",79,[[["self"]],["fsid_t"]]],[11,"clone","","",29,[[["self"]],["if_nameindex"]]],[11,"clone","","",30,[[["self"]],["aiocb"]]],[11,"clone","","",31,[[["self"]],["utmpx"]]],[11,"clone","","",32,[[["self"]],["glob_t"]]],[11,"clone","","",33,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",34,[[["self"]],["addrinfo"]]],[11,"clone","","",35,[[["self"]],["mach_timebase_info"]]],[11,"clone","","",36,[[["self"]],["stat"]]],[11,"clone","","",37,[[["self"]],["dirent"]]],[11,"clone","","",80,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",81,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",82,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",83,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",84,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",85,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",38,[[["self"]],["siginfo_t"]]],[11,"clone","","",39,[[["self"]],["sigaction"]]],[11,"clone","","",40,[[["self"]],["stack_t"]]],[11,"clone","","",41,[[["self"]],["fstore_t"]]],[11,"clone","","",42,[[["self"]],["radvisory"]]],[11,"clone","","",43,[[["self"]],["statvfs"]]],[11,"clone","","",44,[[["self"]],["dl_info"]]],[11,"clone","","",45,[[["self"]],["sockaddr_in"]]],[11,"clone","","",46,[[["self"]],["statfs"]]],[11,"clone","","",47,[[["self"]],["kevent"]]],[11,"clone","","",48,[[["self"]],["kevent64_s"]]],[11,"clone","","",49,[[["self"]],["dqblk"]]],[11,"clone","","",50,[[["self"]],["if_msghdr"]]],[11,"clone","","",51,[[["self"]],["termios"]]],[11,"clone","","",52,[[["self"]],["flock"]]],[11,"clone","","",53,[[["self"]],["sf_hdtr"]]],[11,"clone","","",54,[[["self"]],["lconv"]]],[11,"clone","","",55,[[["self"]],["sigevent"]]],[11,"clone","","",56,[[["self"]],["proc_taskinfo"]]],[11,"clone","","",57,[[["self"]],["proc_bsdinfo"]]],[11,"clone","","",58,[[["self"]],["proc_taskallinfo"]]],[11,"clone","","",59,[[["self"]],["proc_threadinfo"]]],[11,"clone","","",60,[[["self"]],["xsw_usage"]]],[11,"clone","","",61,[[["self"]],["xucred"]]],[11,"clone","","",62,[[["self"]],["mach_header"]]],[11,"clone","","",63,[[["self"]],["mach_header_64"]]],[11,"clone","","",64,[[["self"]],["segment_command"]]],[11,"clone","","",65,[[["self"]],["segment_command_64"]]],[11,"clone","","",66,[[["self"]],["load_command"]]],[11,"clone","","",67,[[["self"]],["sockaddr_dl"]]],[11,"clone","","",68,[[["self"]],["sockaddr_inarp"]]],[11,"clone","","",69,[[["self"]],["sockaddr_ctl"]]],[11,"clone","","",70,[[["self"]],["in_pktinfo"]]],[11,"clone","","",71,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",72,[[["self"]],["ipc_perm"]]],[11,"clone","","",73,[[["self"]],["shmid_ds"]]],[11,"clone","","",74,[[["self"]],["arphdr"]]],[11,"clone","","",86,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",75,[[["self"]],["timeval32"]]],[11,"clone","","",76,[[["self"]],["if_data"]]],[11,"clone","","",77,[[["self"]],["bpf_hdr"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"arphdr"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"fd_set"],[3,"fsid_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_attr_t"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"],[4,"DIR"],[4,"locale_t"],[4,"timezone"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[0,"serde","","An optional implementation of serialization/deserialization. Reference implementations used:",N,N],[3,"LinkedHashMapVisitor","linked_hash_map::serde","`serde::de::Visitor` for a linked hash map.",N,N],[11,"new","","Creates a new visitor for a linked hash map.",0,[[],["self"]]],[11,"new","linked_hash_map","Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,[[["self"]]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",1,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",1,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",1,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,[[["self"]],["values"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","linked_hash_map::serde","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","linked_hash_map","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"drop","","",1,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",5,[[["self"]],["usize"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"ne","","",1,[[["self"],["self"]],["bool"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,[[["self"],["formatter"]],["result"]]],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"deserialize","","",1,[[["d"]],["result",["linkedhashmap"]]]],[11,"visit_unit","linked_hash_map::serde","",0,[[["self"]],["result"]]],[11,"visit_map","","",0,[[["self"],["visitor"]],["result"]]],[11,"serialize","linked_hash_map","",1,[[["self"],["t"]],["result"]]]],"paths":[[3,"LinkedHashMapVisitor"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for searching bytes.","items":[[3,"Memchr","memchr","An iterator for `memchr`.",N,N],[3,"Memchr2","","An iterator for `memchr2`.",N,N],[3,"Memchr3","","An iterator for `memchr3`.",N,N],[5,"memchr_iter","","An iterator over all occurrences of the needle in a haystack.",N,N],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a haystack, in reverse.",N,N],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memchr","","Search for the first occurrence of a byte in a slice.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",N,N],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",N,N],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memory_units"]={"doc":"Crate for safe conversion between units of memory.","items":[[3,"Bytes","memory_units","Memory size specified in bytes.",N,N],[12,"0","","",0,N],[5,"size_of","","Returns the size of a type in [`Bytes`].",N,[[],["bytes"]]],[0,"wasm32","","WebAssembly-specific sizes and units.",N,N],[3,"Words","memory_units::wasm32","Memory size specified in `wasm32` words.",N,N],[12,"0","","",1,N],[3,"Pages","","Memory size specified in WebAssembly [memory pages][memory page].",N,N],[12,"0","","",2,N],[0,"target","memory_units","Sizes and units for the current compilation target.",N,N],[3,"Words","memory_units::target","Memory size specified in words.",N,N],[12,"0","","",3,N],[3,"Pages","","Memory size specified in [memory pages][memory page].",N,N],[12,"0","","",4,N],[8,"RoundUpTo","memory_units","A trait defining round up conversion between various memory units.",N,N],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space occupied by `self`.",5,[[["self"]],["t"]]],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",N,N],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",6,[[],["bytes"]]],[11,"round_up_to","","",0,[[["self"]],["bytes"]]],[11,"round_up_to","","",0,[[["self"]],["words"]]],[11,"round_up_to","","",0,[[["self"]],["pages"]]],[11,"round_up_to","","",0,[[["self"]],["words"]]],[11,"round_up_to","","",0,[[["self"]],["pages"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"round_up_to","memory_units::wasm32","",1,[[["self"]],["bytes"]]],[11,"round_up_to","","",1,[[["self"]],["words"]]],[11,"round_up_to","","",1,[[["self"]],["pages"]]],[11,"round_up_to","","",1,[[["self"]],["words"]]],[11,"round_up_to","","",1,[[["self"]],["pages"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"round_up_to","","",2,[[["self"]],["bytes"]]],[11,"round_up_to","","",2,[[["self"]],["words"]]],[11,"round_up_to","","",2,[[["self"]],["pages"]]],[11,"round_up_to","","",2,[[["self"]],["words"]]],[11,"round_up_to","","",2,[[["self"]],["pages"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"round_up_to","memory_units::target","",3,[[["self"]],["bytes"]]],[11,"round_up_to","","",3,[[["self"]],["words"]]],[11,"round_up_to","","",3,[[["self"]],["pages"]]],[11,"round_up_to","","",3,[[["self"]],["words"]]],[11,"round_up_to","","",3,[[["self"]],["pages"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"round_up_to","","",4,[[["self"]],["bytes"]]],[11,"round_up_to","","",4,[[["self"]],["words"]]],[11,"round_up_to","","",4,[[["self"]],["pages"]]],[11,"round_up_to","","",4,[[["self"]],["words"]]],[11,"round_up_to","","",4,[[["self"]],["pages"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"byte_size","memory_units","",0,[[],["bytes"]]],[11,"byte_size","memory_units::wasm32","",1,[[],["bytes"]]],[11,"byte_size","","",2,[[],["bytes"]]],[11,"byte_size","memory_units::target","",3,[[],["bytes"]]],[11,"byte_size","","",4,[[],["bytes"]]],[11,"from","memory_units","",0,[[["words"]],["bytes"]]],[11,"from","","",0,[[["pages"]],["bytes"]]],[11,"from","","",0,[[["words"]],["bytes"]]],[11,"from","","",0,[[["pages"]],["bytes"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","memory_units::wasm32","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","memory_units::target","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"sub","memory_units","",0,[[["self"],["t"]],["self"]]],[11,"sub","memory_units::wasm32","",1,[[["self"],["t"]],["self"]]],[11,"sub","","",2,[[["self"],["t"]],["self"]]],[11,"sub","memory_units::target","",3,[[["self"],["t"]],["self"]]],[11,"sub","","",4,[[["self"],["t"]],["self"]]],[11,"eq","memory_units","",0,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytes"]],["bool"]]],[11,"eq","memory_units::wasm32","",1,[[["self"],["words"]],["bool"]]],[11,"ne","","",1,[[["self"],["words"]],["bool"]]],[11,"eq","","",2,[[["self"],["pages"]],["bool"]]],[11,"ne","","",2,[[["self"],["pages"]],["bool"]]],[11,"eq","memory_units::target","",3,[[["self"],["words"]],["bool"]]],[11,"ne","","",3,[[["self"],["words"]],["bool"]]],[11,"eq","","",4,[[["self"],["pages"]],["bool"]]],[11,"ne","","",4,[[["self"],["pages"]],["bool"]]],[11,"cmp","memory_units","",0,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","memory_units::wasm32","",1,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["pages"]],["ordering"]]],[11,"cmp","memory_units::target","",3,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["pages"]],["ordering"]]],[11,"partial_cmp","memory_units","",0,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"le","","",0,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",0,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","memory_units::wasm32","",1,[[["self"],["words"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["words"]],["bool"]]],[11,"le","","",1,[[["self"],["words"]],["bool"]]],[11,"gt","","",1,[[["self"],["words"]],["bool"]]],[11,"ge","","",1,[[["self"],["words"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["pages"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["pages"]],["bool"]]],[11,"le","","",2,[[["self"],["pages"]],["bool"]]],[11,"gt","","",2,[[["self"],["pages"]],["bool"]]],[11,"ge","","",2,[[["self"],["pages"]],["bool"]]],[11,"partial_cmp","memory_units::target","",3,[[["self"],["words"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["words"]],["bool"]]],[11,"le","","",3,[[["self"],["words"]],["bool"]]],[11,"gt","","",3,[[["self"],["words"]],["bool"]]],[11,"ge","","",3,[[["self"],["words"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["pages"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["pages"]],["bool"]]],[11,"le","","",4,[[["self"],["pages"]],["bool"]]],[11,"gt","","",4,[[["self"],["pages"]],["bool"]]],[11,"ge","","",4,[[["self"],["pages"]],["bool"]]],[11,"add","memory_units","",0,[[["self"],["t"]],["self"]]],[11,"add","memory_units::wasm32","",1,[[["self"],["t"]],["self"]]],[11,"add","","",2,[[["self"],["t"]],["self"]]],[11,"add","memory_units::target","",3,[[["self"],["t"]],["self"]]],[11,"add","","",4,[[["self"],["t"]],["self"]]],[11,"mul","memory_units","",0,[[["self"],["t"]],["self"]]],[11,"mul","memory_units::wasm32","",1,[[["self"],["t"]],["self"]]],[11,"mul","","",2,[[["self"],["t"]],["self"]]],[11,"mul","memory_units::target","",3,[[["self"],["t"]],["self"]]],[11,"mul","","",4,[[["self"],["t"]],["self"]]],[11,"div","memory_units","",0,[[["self"],["t"]],["self"]]],[11,"div","memory_units::wasm32","",1,[[["self"],["t"]],["self"]]],[11,"div","","",2,[[["self"],["t"]],["self"]]],[11,"div","memory_units::target","",3,[[["self"],["t"]],["self"]]],[11,"div","","",4,[[["self"],["t"]],["self"]]],[11,"clone","memory_units","",0,[[["self"]],["bytes"]]],[11,"clone","memory_units::wasm32","",1,[[["self"]],["words"]]],[11,"clone","","",2,[[["self"]],["pages"]]],[11,"clone","memory_units::target","",3,[[["self"]],["words"]]],[11,"clone","","",4,[[["self"]],["pages"]]]],"paths":[[3,"Bytes"],[3,"Words"],[3,"Pages"],[3,"Words"],[3,"Pages"],[8,"RoundUpTo"],[8,"ByteSize"]]};
searchIndex["multihash"]={"doc":"","items":[[3,"Multihash","multihash","Represents a valid multihash, by associating the hash algorithm with the data",N,N],[12,"alg","","",0,N],[12,"digest","","",0,N],[4,"Hash","","List of types currently supported in the multihash spec.",N,N],[13,"SHA1","","SHA-1 (20-byte hash size)",1,N],[13,"SHA2256","","SHA-256 (32-byte hash size)",1,N],[13,"SHA2512","","SHA-512 (64-byte hash size)",1,N],[13,"SHA3512","","SHA3-512 (64-byte hash size)",1,N],[13,"SHA3384","","SHA3-384 (48-byte hash size)",1,N],[13,"SHA3256","","SHA3-256 (32-byte hash size)",1,N],[13,"SHA3224","","SHA3-224 (28-byte hash size)",1,N],[13,"Keccak224","","Keccak-224 (28-byte hash size)",1,N],[13,"Keccak256","","Keccak-256 (32-byte hash size)",1,N],[13,"Keccak384","","Keccak-384 (48-byte hash size)",1,N],[13,"Keccak512","","Keccak-512 (64-byte hash size)",1,N],[13,"Blake2b","","Encoding unsupported",1,N],[13,"Blake2s","","Encoding unsupported",1,N],[4,"Error","","",N,N],[13,"UnsupportedType","","",2,N],[13,"BadInputLength","","",2,N],[13,"UnknownCode","","",2,N],[5,"encode","","Encodes data into a multihash.",N,N],[5,"decode","","Decodes bytes into a multihash",N,N],[5,"to_hex","","Convert bytes to a hex representation",N,N],[11,"code","","Get the corresponding hash code",1,[[["self"]],["u8"]]],[11,"size","","Get the hash length in bytes",1,[[["self"]],["u8"]]],[11,"name","","Get the human readable name",1,[[["self"]],["str"]]],[11,"from_code","","",1,[[["u8"]],["result",["hash","error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["hash"]]],[11,"clone","","",0,[[["self"]],["multihash"]]],[11,"eq","","",1,[[["self"],["hash"]],["bool"]]],[11,"eq","","",0,[[["self"],["multihash"]],["bool"]]],[11,"ne","","",0,[[["self"],["multihash"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[3,"Multihash"],[4,"Hash"],[4,"Error"]]};
searchIndex["nan_preserving_float"]={"doc":"","items":[[3,"F32","nan_preserving_float","",N,N],[3,"F64","","",N,N],[11,"from_bits","","",0,[[["u32"]],["self"]]],[11,"to_bits","","",0,[[["self"]],["u32"]]],[11,"from_float","","",0,[[["f32"]],["self"]]],[11,"to_float","","",0,[[["self"]],["f32"]]],[11,"is_nan","","",0,[[["self"]],["bool"]]],[11,"abs","","",0,[[["self"]],["self"]]],[11,"fract","","",0,[[["self"]],["self"]]],[11,"min","","",0,[[["self"],["self"]],["self"]]],[11,"max","","",0,[[["self"],["self"]],["self"]]],[11,"from_bits","","",1,[[["u64"]],["self"]]],[11,"to_bits","","",1,[[["self"]],["u64"]]],[11,"from_float","","",1,[[["f64"]],["self"]]],[11,"to_float","","",1,[[["self"]],["f64"]]],[11,"is_nan","","",1,[[["self"]],["bool"]]],[11,"abs","","",1,[[["self"]],["self"]]],[11,"fract","","",1,[[["self"]],["self"]]],[11,"min","","",1,[[["self"],["self"]],["self"]]],[11,"max","","",1,[[["self"],["self"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["f32"]]],[11,"clone","","",1,[[["self"]],["f64"]]],[11,"from","","",0,[[["f32"]],["f32"]]],[11,"from","","",1,[[["f64"]],["f64"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"partial_cmp","","",0,[[["self"],["t"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["t"]],["bool"]]],[11,"eq","","",1,[[["self"],["t"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["self"],["t"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"add","","",0,[[["self"],["t"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"mul","","",0,[[["self"],["t"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"div","","",0,[[["self"],["t"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"rem","","",0,[[["self"],["t"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"neg","","",0,[[["self"]],["self"]]],[11,"neg","","",1,[[["self"]],["self"]]]],"paths":[[3,"F32"],[3,"F64"]]};
searchIndex["nom"]={"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",N,N],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",N,N],[3,"FileProducer","","",N,N],[3,"MapConsumer","","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S",N,N],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result",N,N],[4,"ErrorKind","","indicates which parser returned an error",N,N],[13,"Custom","","",0,N],[13,"Tag","","",0,N],[13,"MapRes","","",0,N],[13,"MapOpt","","",0,N],[13,"Alt","","",0,N],[13,"IsNot","","",0,N],[13,"IsA","","",0,N],[13,"SeparatedList","","",0,N],[13,"SeparatedNonEmptyList","","",0,N],[13,"Many0","","",0,N],[13,"Many1","","",0,N],[13,"ManyTill","","",0,N],[13,"Count","","",0,N],[13,"TakeUntilAndConsume","","",0,N],[13,"TakeUntil","","",0,N],[13,"TakeUntilEitherAndConsume","","",0,N],[13,"TakeUntilEither","","",0,N],[13,"LengthValue","","",0,N],[13,"TagClosure","","",0,N],[13,"Alpha","","",0,N],[13,"Digit","","",0,N],[13,"HexDigit","","",0,N],[13,"OctDigit","","",0,N],[13,"AlphaNumeric","","",0,N],[13,"Space","","",0,N],[13,"MultiSpace","","",0,N],[13,"LengthValueFn","","",0,N],[13,"Eof","","",0,N],[13,"ExprOpt","","",0,N],[13,"ExprRes","","",0,N],[13,"CondReduce","","",0,N],[13,"Switch","","",0,N],[13,"TagBits","","",0,N],[13,"OneOf","","",0,N],[13,"NoneOf","","",0,N],[13,"Char","","",0,N],[13,"CrLf","","",0,N],[13,"RegexpMatch","","",0,N],[13,"RegexpMatches","","",0,N],[13,"RegexpFind","","",0,N],[13,"RegexpCapture","","",0,N],[13,"RegexpCaptures","","",0,N],[13,"TakeWhile1","","",0,N],[13,"Complete","","",0,N],[13,"Fix","","",0,N],[13,"Escaped","","",0,N],[13,"EscapedTransform","","",0,N],[13,"TagStr","","",0,N],[13,"IsNotStr","","",0,N],[13,"IsAStr","","",0,N],[13,"TakeWhile1Str","","",0,N],[13,"NonEmpty","","",0,N],[13,"ManyMN","","",0,N],[13,"TakeUntilAndConsumeStr","","",0,N],[13,"TakeUntilStr","","",0,N],[13,"Not","","",0,N],[13,"Permutation","","",0,N],[13,"Verify","","",0,N],[13,"TakeTill1","","",0,N],[4,"CompareResult","","indicates wether a comparison was successful, an error, or if more data was needed",N,N],[13,"Ok","","",1,N],[13,"Incomplete","","",1,N],[13,"Error","","",1,N],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",N,N],[13,"Unknown","","needs more data, but we do not know how much",2,N],[13,"Size","","contains the required data size",2,N],[4,"IResult","","Holds the result of parsing functions",N,N],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,N],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,N],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,N],[4,"IError","","This is the same as IResult, but without Done",N,N],[13,"Error","","",4,N],[13,"Incomplete","","",4,N],[4,"Endianness","","Configurable endianness",N,N],[13,"Big","","",5,N],[13,"Little","","",5,N],[4,"Input","","",N,N],[13,"Element","","",6,N],[13,"Empty","","",6,N],[13,"Eof","","",6,N],[4,"ConsumerState","","Stores a consumer's current computation state",N,N],[13,"Done","","A value of type O has been produced",7,N],[13,"Error","","An error of type E has been encountered",7,N],[13,"Continue","","Continue applying, and pass a message of type M to the data source",7,N],[4,"Move","","",N,N],[13,"Consume","","indcates how much data was consumed",8,N],[13,"Seek","","indicates where in the input the consumer must seek",8,N],[13,"Await","","indicates more data is needed",8,N],[4,"FileProducerState","","",N,N],[13,"Normal","","",9,N],[13,"Error","","",9,N],[13,"Eof","","",9,N],[5,"slice_to_offsets","","",N,N],[5,"code_from_offset","","",N,N],[5,"reset_color","","",N,[[["vec"]]]],[5,"write_color","","",N,[[["vec"],["u8"]]]],[5,"print_codes","","",N,[[["hashmap",["u32","u8"]],["hashmap",["u32","str"]]],["string"]]],[5,"error_to_u32","","",N,[[["errorkind"]],["u32"]]],[5,"tag_cl","","",N,N],[5,"print","","",N,[[["t"]],["iresult"]]],[5,"begin","","",N,N],[5,"crlf","","",N,[[["t"]],["iresult"]]],[5,"not_line_ending","","",N,[[["t"]],["iresult"]]],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",N,[[["t"]],["iresult"]]],[5,"eol","","",N,[[["t"]],["iresult"]]],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",N,[[["u8"]],["bool"]]],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",N,[[["u8"]],["bool"]]],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",N,[[["u8"]],["bool"]]],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",N,[[["u8"]],["bool"]]],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",N,[[["u8"]],["bool"]]],[5,"is_space","","Tests if byte is ASCII space or tab",N,[[["u8"]],["bool"]]],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult"]]],[5,"digit","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"space","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"sized_buffer","","",N,N],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",N,N],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",N,N],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",N,N],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",N,N],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",N,N],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",N,N],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",N,N],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",N,N],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",N,N],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",N,N],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",N,N],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",N,N],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",N,N],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",N,N],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",N,N],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",N,N],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",N,N],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",N,N],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",N,N],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",N,N],[5,"hex_u32","","Recognizes a hex-encoded integer",N,N],[5,"non_empty","","Recognizes non empty buffers",N,[[["t"]],["iresult"]]],[5,"rest","","Return the remaining input.",N,N],[5,"rest_s","","Return the remaining input, for strings.",N,[[["str"]],["iresult",["str","str"]]]],[5,"float","","Recognizes floating point number in a byte string and returns a f32",N,N],[5,"float_s","","Recognizes floating point number in a string and returns a f32",N,[[["str"]],["iresult",["str","f32"]]]],[5,"double","","Recognizes floating point number in a byte string and returns a f64",N,N],[5,"double_s","","Recognizes floating point number in a string and returns a f64",N,[[["str"]],["iresult",["str","f64"]]]],[5,"newline","","Matches a newline character '\\n'",N,N],[5,"tab","","Matches a tab character '\\t'",N,N],[5,"anychar","","",N,[[["t"]],["iresult",["char"]]]],[5,"shift","","",N,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"into_error_kind","","Convert Err into an ErrorKind.",0,[[["self"]],["errorkind"]]],[0,"simple_errors","","Error management",N,N],[6,"Err","nom::simple_errors","",N,N],[11,"map_err","nom","Maps a `IResult<I, O, E>` to `IResult<I, O, N>` by appling a function to a contained `Error` value, leaving `Done` and `Incomplete` value untouched.",3,[[["self"],["f"]],["iresult"]]],[11,"unwrap_err","","Unwrap the contained `Error(E)` value, or panic if the `IResult` is not `Error`.",3,[[["self"]],["err"]]],[11,"to_full_result","","Convert the IResult to a std::result::Result",3,[[["self"]],["result",["ierror"]]]],[11,"to_result","","Convert the IResult to a std::result::Result, or panic if the `IResult` is `Incomplete`",3,[[["self"]],["result",["err"]]]],[11,"is_known","","",2,[[["self"]],["bool"]]],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,[[["self"],["f"]],["needed"]]],[11,"is_done","","",3,[[["self"]],["bool"]]],[11,"is_err","","",3,[[["self"]],["bool"]]],[11,"is_incomplete","","",3,[[["self"]],["bool"]]],[11,"or","","",3,[[["self"],["iresult"]],["iresult"]]],[11,"map","","Maps a `IResult<I, O, E>` to `IResult<I, N, E>` by appling a function to a contained `Done` value, leaving `Error` and `Incomplete` value untouched.",3,[[["self"],["f"]],["iresult"]]],[11,"map_inc","","Maps a `IResult<I, O, E>` to `IResult<I, O, E>` by appling a function to a contained `Incomplete` value, leaving `Done` and `Error` value untouched.",3,[[["self"],["f"]],["iresult"]]],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not `Done`.",3,N],[11,"unwrap_or","","Unwrap the contained `Done(I, O)` value or a default if the `IResult` is not `Done`.",3,N],[11,"unwrap_inc","","Unwrap the contained `Incomplete(n)` value, or panic if the `IResult` is not `Incomplete`.",3,[[["self"]],["needed"]]],[0,"methods","","Method macro combinators",N,N],[0,"bits","","Bit level parsers and combinators",N,N],[0,"whitespace","","Support for whitespace delimited formats",N,N],[5,"sp","nom::whitespace","",N,[[["t"]],["iresult"]]],[11,"map","nom","",7,[[["self"],["f"]],["consumerstate"]]],[11,"flat_map","","",7,[[["self"],["f"]],["consumerstate"]]],[11,"new","","",10,N],[11,"new","","",11,[[["str"],["usize"]],["result",["fileproducer"]]]],[11,"state","","",11,[[["self"]],["fileproducerstate"]]],[11,"refill","","",11,[[["self"]],["option",["usize"]]]],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",11,[[["self"],["usize"]],["usize"]]],[11,"new","","",12,[[["c"],["f"]],["mapconsumer"]]],[11,"new","","",13,[[["c1"],["c2"]],["chainconsumer"]]],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",N,N],[10,"offset","","offset between the first byte of self and the first byte of the argument",14,[[["self"],["self"]],["usize"]]],[8,"HexDisplay","","",N,N],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",15,[[["self"],["usize"]],["string"]]],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",15,[[["self"],["usize"],["usize"]],["string"]]],[8,"AsBytes","","",N,N],[10,"as_bytes","","",16,N],[8,"InputLength","","abstract method to calculate the input length",N,N],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",17,[[["self"]],["usize"]]],[8,"AsChar","","transforms common types to a char for basic token parsing",N,N],[10,"as_char","","makes a char from self",18,[[["self"]],["char"]]],[10,"is_alpha","","tests that self is an alphabetic character",18,[[["self"]],["bool"]]],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",18,[[["self"]],["bool"]]],[10,"is_dec_digit","","tests that self is a decimal digit",18,[[["self"]],["bool"]]],[10,"is_hex_digit","","tests that self is an hex digit",18,[[["self"]],["bool"]]],[10,"is_oct_digit","","tests that self is an octal digit",18,[[["self"]],["bool"]]],[10,"len","","gets the len in bytes for self",18,[[["self"]],["usize"]]],[8,"InputIter","","abstracts common iteration operations on the input type",N,N],[16,"Item","","",19,N],[16,"RawItem","","",19,N],[16,"Iter","","",19,N],[16,"IterElem","","",19,N],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",19,N],[10,"iter_elements","","returns an iterator over the elements",19,N],[10,"position","","finds the byte position of the element",19,[[["self"],["p"]],["option",["usize"]]]],[10,"slice_index","","get the byte offset from the element's position in the stream",19,[[["self"],["usize"]],["option",["usize"]]]],[8,"InputTake","","abstracts slicing operations",N,N],[10,"take","","returns a slice of `count` bytes",20,[[["self"],["usize"]],["option"]]],[10,"take_split","","split the stream at the `count` byte offset",20,[[["self"],["usize"]],["option"]]],[8,"Compare","","abstracts comparison operations",N,N],[10,"compare","","compares self to another value for equality",21,[[["self"],["t"]],["compareresult"]]],[10,"compare_no_case","","compares self to another value for equality independently of the case.",21,[[["self"],["t"]],["compareresult"]]],[8,"FindToken","","look for self in the given input stream",N,N],[10,"find_token","","",22,[[["self"],["t"]],["bool"]]],[8,"FindSubstring","","look for a substring in self",N,N],[10,"find_substring","","",23,[[["self"],["t"]],["option",["usize"]]]],[8,"ParseTo","","used to integrate str's parse() method",N,N],[10,"parse_to","","",24,[[["self"]],["option"]]],[8,"Slice","","slicing operations using ranges",N,N],[10,"slice","","",25,[[["self"],["r"]],["self"]]],[8,"GetInput","","",N,N],[10,"remaining_input","","",26,[[["self"]],["option"]]],[8,"GetOutput","","",N,N],[10,"output","","",27,[[["self"]],["option"]]],[8,"Consumer","","The Consumer trait wraps a computation and its state",N,N],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",28,[[["self"],["input"]],["consumerstate"]]],[10,"state","","returns the current state",28,[[["self"]],["consumerstate"]]],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",N,N],[10,"apply","","Applies a consumer once on the produced data, and return the consumer's state",29,[[["self"],["consumer"]],["consumerstate"]]],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",29,[[["self"],["consumer"]],["option"]]],[14,"compiler_error","","",N,N],[14,"dbg","","Prints a message if the parser fails",N,N],[14,"dbg_dmp","","Prints a message and the input if the parser fails",N,N],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",N,N],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",N,N],[14,"error_code","","creates a parse error from a `nom::ErrorKind`",N,N],[14,"error_node","","creates a parse error from a `nom::ErrorKind` and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"closure","","Wraps a parser in a closure",N,N],[14,"named","","Makes a function from a parser combination",N,N],[14,"named_args","","Makes a function from a parser combination with arguments.",N,N],[14,"named_attr","","Makes a function from a parser combination, with attributes",N,N],[14,"call","","Used to wrap common expressions and function as macros",N,N],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",N,N],[14,"return_error","","Prevents backtracking if the child parser fails",N,N],[14,"add_return_error","","Add an error if the child parser fails",N,N],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",N,N],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`, and will do an early return for `Error` and `Incomplete` this can provide more flexibility than `do_parse!` if needed",N,N],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",N,N],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",N,N],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",N,N],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",N,N],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",N,N],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",N,N],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a IResult::Done(I,T) if Ok",N,N],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a IResult::Done(I,T) if Some",N,N],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",N,N],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",N,N],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",N,N],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",N,N],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Incomplete does not consume the input",N,N],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",N,N],[14,"eof","","`eof!()` returns its input if it is at the end of input data",N,N],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",N,N],[14,"alt","","Try a list of parsers and return the result of the first successful one",N,N],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",N,N],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",N,N],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",N,N],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",N,N],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",N,N],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",N,N],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",N,N],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",N,N],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",N,N],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",N,N],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec",N,N],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",N,N],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",N,N],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",N,N],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",N,N],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",N,N],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",N,N],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",N,N],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, takes a subslice of the input of that size, then applies the second parser on that subslice. If the second parser returns `Incomplete`, `length_value` will return an error",N,N],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",N,N],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",N,N],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",N,N],[14,"method","","Makes a method from a parser combination",N,N],[14,"call_m","","Used to called methods then move self back into self",N,N],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",N,N],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",N,N],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",N,N],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",N,N],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",N,N],[14,"escaped","","`escaped!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], &[T]>` matches a byte string with escaped characters.",N,N],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",N,N],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",N,N],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",N,N],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",N,N],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",N,N],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",N,N],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",N,N],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",N,N],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",N,N],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",N,N],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",N,N],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>`",N,N],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",N,N],[14,"bits","","`bits!( parser ) => ( &[u8], (&[u8], usize) -> IResult<(&[u8], usize), T> ) -> IResult<&[u8], T>` transforms its byte slice input into a bit stream for the underlying parsers",N,N],[14,"bytes","","Counterpart to bits, `bytes!( parser ) => ( (&[u8], usize), &[u8] -> IResult<&[u8], T> ) -> IResult<(&[u8], usize), T>`, transforms its bits stream input into a byte slice for the underlying parsers. If we start in the middle of a byte throws away the bits until the end of the byte.",N,N],[14,"take_bits","","`take_bits!(type, nb) => ( (&[T], usize), U, usize) -> IResult<(&[T], usize), U>` generates a parser consuming the specified number of bits.",N,N],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",N,N],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",N,N],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",N,N],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",N,N],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",N,N],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",N,N],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",N,N],[14,"one_of","","matches one of the provided characters",N,N],[14,"none_of","","matches anything but the provided characters",N,N],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",N,N],[14,"wrap_sep","","",N,N],[14,"eat_separator","","helper macros to build a separator parser",N,N],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",N,N],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"consumer_from_parser","","",N,N],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",N,N],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",N,N],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",N,N],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",N,N],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",N,N],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",N,N],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",N,N],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",N,N],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",N,N],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",N,N],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",N,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"remaining_input","","",3,[[["self"]],["option"]]],[11,"remaining_input","","",3,[[["self"]],["option"]]],[11,"remaining_input","","",3,[[["self"]],["option",["str"]]]],[11,"output","","",3,[[["self"]],["option"]]],[11,"output","","",3,[[["self"]],["option"]]],[11,"output","","",3,[[["self"]],["option",["str"]]]],[11,"handle","","",12,[[["self"],["input"]],["consumerstate"]]],[11,"state","","",12,[[["self"]],["consumerstate"]]],[11,"handle","","",13,[[["self"],["input"]],["consumerstate"]]],[11,"state","","",13,[[["self"]],["consumerstate"]]],[11,"apply","","",30,[[["self"],["consumer"]],["consumerstate"]]],[11,"apply","","",10,[[["self"],["consumer"]],["consumerstate"]]],[11,"apply","","",11,[[["self"],["consumer"]],["consumerstate"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"clone","","",2,[[["self"]],["needed"]]],[11,"clone","","",3,[[["self"]],["iresult"]]],[11,"clone","","",4,[[["self"]],["ierror"]]],[11,"clone","","",5,[[["self"]],["endianness"]]],[11,"clone","","",6,[[["self"]],["input"]]],[11,"clone","","",7,[[["self"]],["consumerstate"]]],[11,"clone","","",8,[[["self"]],["move"]]],[11,"clone","","",9,[[["self"]],["fileproducerstate"]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",1,[[["self"],["compareresult"]],["bool"]]],[11,"eq","","",2,[[["self"],["needed"]],["bool"]]],[11,"ne","","",2,[[["self"],["needed"]],["bool"]]],[11,"eq","","",3,[[["self"],["iresult"]],["bool"]]],[11,"ne","","",3,[[["self"],["iresult"]],["bool"]]],[11,"eq","","",4,[[["self"],["ierror"]],["bool"]]],[11,"ne","","",4,[[["self"],["ierror"]],["bool"]]],[11,"eq","","",5,[[["self"],["endianness"]],["bool"]]],[11,"eq","","",8,[[["self"],["move"]],["bool"]]],[11,"ne","","",8,[[["self"],["move"]],["bool"]]],[11,"eq","","",9,[[["self"],["fileproducerstate"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"description","","",31,[[["self"]],["str"]]],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",29,[[["self"],["consumer"]],["option"]]]],"paths":[[4,"ErrorKind"],[4,"CompareResult"],[4,"Needed"],[4,"IResult"],[4,"IError"],[4,"Endianness"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"Offset"],[8,"HexDisplay"],[8,"AsBytes"],[8,"InputLength"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"],[3,"ProducerRepeat"],[6,"Err"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",N,N],[3,"BigUint","","A big unsigned integer type.",N,N],[3,"Complex","","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[0,"cast","","",N,N],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"pow","","",N,N],[8,"Pow","num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",18,[[],["self"]]],[10,"infinity","","Returns the infinite value.",18,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",18,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",18,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",18,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",18,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",18,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",18,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",18,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",18,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",18,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",18,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",18,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",18,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",18,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",18,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",18,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",18,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",18,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",18,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",18,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",18,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",18,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",18,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",18,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",18,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",18,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",18,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",18,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",18,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",18,N],[0,"bigint","","",N,N],[3,"ParseBigIntError","num::bigint","",N,N],[3,"BigInt","","A big signed integer type.",N,N],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,[[["self"]],["option",["biguint"]]]],[3,"BigUint","","A big unsigned integer type.",N,N],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",20,[[["self"]],["option",["bigint"]]]],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",21,N],[13,"NoSign","","",21,N],[13,"Plus","","",21,N],[0,"complex","num","",N,N],[3,"Complex","num::complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[3,"ParseComplexError","","",N,N],[0,"integer","num","",N,N],[8,"Integer","num::integer","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",N,N],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",22,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",22,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",22,[[["self"]],["self"]]],[0,"iter","num","",N,N],[3,"Range","num::iter","An iterator over the range [start, stop)",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[0,"traits","num","",N,N],[0,"bounds","num::traits","",N,N],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[0,"cast","num::traits","",N,N],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[0,"float","num::traits","",N,N],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",23,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",23,[[],["self"]]],[10,"nan","","Returns NaN.",23,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",23,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",23,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",23,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",23,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",23,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",23,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",23,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",23,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",23,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",23,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",23,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",23,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",23,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",23,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",23,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",23,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",23,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",23,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",23,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",23,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",23,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",23,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",23,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",23,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",23,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",23,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",18,[[],["self"]]],[10,"infinity","","Returns the infinite value.",18,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",18,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",18,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",18,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",18,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",18,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",18,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",18,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",18,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",18,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",18,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",18,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",18,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",18,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",18,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",18,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",18,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",18,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",18,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",18,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",18,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",18,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",18,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",18,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",18,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",18,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",18,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",18,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",18,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",18,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",24,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",24,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",24,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",24,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",24,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",24,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",24,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",24,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",24,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",24,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",24,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",24,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",24,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",24,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",24,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",24,[[],["self"]]],[0,"identities","num::traits","",N,N],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","num::traits","",N,N],[8,"PrimInt","num::traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[0,"ops","num::traits","",N,N],[0,"checked","num::traits::ops","",N,N],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,[[["self"],["u32"]],["option"]]],[0,"inv","num::traits::ops","",N,N],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",29,N],[10,"inv","","Returns the multiplicative inverse of `self`.",29,N],[0,"mul_add","num::traits::ops","",N,N],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",30,N],[10,"mul_add","","Performs the fused multiply-add operation.",30,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",31,N],[0,"saturating","num::traits::ops","",N,N],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[0,"wrapping","num::traits::ops","",N,N],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",32,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",33,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",34,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",35,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",36,[[["self"],["u32"]],["self"]]],[0,"pow","num::traits","",N,N],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","num::traits","",N,N],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",37,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",37,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",37,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",37,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",37,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",37,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",37,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",37,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",37,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",37,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",37,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",37,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",37,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",37,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",37,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",37,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",37,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",37,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",37,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",37,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",37,[[["self"]],["self"]]],[0,"sign","num::traits","",N,N],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",38,N],[13,"Invalid","","",38,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",39,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"rational","num","",N,N],[3,"Ratio","num::rational","Represents the ratio between two numbers.",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[3,"ParseRatioError","","",N,N],[11,"from","num::bigint","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","num::complex","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","num::bigint","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","num::complex","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"from","num::integer","",44,[[["t"]],["t"]]],[11,"into_iter","","",44,[[["self"]],["i"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","num::iter","",45,[[["t"]],["t"]]],[11,"into_iter","","",45,[[["self"]],["i"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"into_iter","","",46,[[["self"]],["i"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"into_iter","","",47,[[["self"]],["i"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"into_iter","","",48,[[["self"]],["i"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","num::traits","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","num::rational","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"checked_sub","num::bigint","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"abs","","",40,[[["self"]],["bigint"]]],[11,"abs_sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",40,[[["self"]],["bigint"]]],[11,"is_positive","","",40,[[["self"]],["bool"]]],[11,"is_negative","","",40,[[["self"]],["bool"]]],[11,"bitxor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",41,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",41,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",41,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",41,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"hash","","",41,N],[11,"hash","","",21,N],[11,"hash","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"from_str_radix","","Creates and initializes a `BigUint`.",41,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",40,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"shl","","",41,[[["self"],["usize"]],["biguint"]]],[11,"shl","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"from_i64","","",41,[[["i64"]],["option",["biguint"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["biguint"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["biguint"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["biguint"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["biguint"]]]],[11,"from_i64","","",40,[[["i64"]],["option",["bigint"]]]],[11,"from_i128","","",40,[[["i128"]],["option",["bigint"]]]],[11,"from_u64","","",40,[[["u64"]],["option",["bigint"]]]],[11,"from_u128","","",40,[[["u128"]],["option",["bigint"]]]],[11,"from_f64","","",40,[[["f64"]],["option",["bigint"]]]],[11,"to_biguint","","",41,[[["self"]],["option",["biguint"]]]],[11,"to_biguint","","",40,[[["self"]],["option",["biguint"]]]],[11,"clone","","",42,[[["self"]],["parsebiginterror"]]],[11,"clone","","",40,[[["self"]],["bigint"]]],[11,"clone","","",41,[[["self"]],["biguint"]]],[11,"clone","","",21,[[["self"]],["sign"]]],[11,"bitand","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitand","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"checked_mul","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"bitor_assign","","",41,N],[11,"bitor_assign","","",40,N],[11,"bitor_assign","","",41,N],[11,"bitor_assign","","",40,N],[11,"div_rem","","",40,N],[11,"div_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",40,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,[[["self"]],["bool"]]],[11,"div_rem","","",41,N],[11,"div_floor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",41,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",41,[[["self"],["biguint"]],["biguint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",41,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",41,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",41,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",41,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",41,[[["self"]],["bool"]]],[11,"neg","","Negate Sign value.",21,[[["self"]],["sign"]]],[11,"neg","","",40,[[["self"]],["bigint"]]],[11,"neg","","",41,[[["self"]],["biguint"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",41,[[["i"]],["biguint"]]],[11,"product","","",40,[[["i"]],["bigint"]]],[11,"bitor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_add","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"mul","","",41,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",41,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",21,[[["self"],["sign"]],["sign"]]],[11,"to_bigint","","",40,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",41,[[["self"]],["option",["bigint"]]]],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"shr","","",41,[[["self"],["usize"]],["biguint"]]],[11,"shr","","",40,[[["self"],["usize"]],["bigint"]]],[11,"default","","",40,[[],["bigint"]]],[11,"default","","",41,[[],["biguint"]]],[11,"description","","",42,[[["self"]],["str"]]],[11,"shl_assign","","",41,N],[11,"shl_assign","","",40,N],[11,"zero","","",41,[[],["biguint"]]],[11,"is_zero","","",41,[[["self"]],["bool"]]],[11,"zero","","",40,[[],["bigint"]]],[11,"is_zero","","",40,[[["self"]],["bool"]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"bitxor_assign","","",41,N],[11,"bitxor_assign","","",40,N],[11,"bitxor_assign","","",40,N],[11,"bitxor_assign","","",41,N],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",41,[[["self"],["usize"]],["biguint"]]],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",41,[[["self"],["u32"]],["biguint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",41,[[["self"],["usize"]],["biguint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",41,[[["self"],["u8"]],["biguint"]]],[11,"div","","",41,[[["self"],["u32"]],["biguint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",41,[[["self"],["u16"]],["biguint"]]],[11,"div","","",41,[[["self"],["u8"]],["biguint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"div","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",41,[[["self"],["u16"]],["biguint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",41,[[["self"],["u64"]],["biguint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",41,[[["self"],["u64"]],["biguint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"not","","",40,[[["self"]],["bigint"]]],[11,"from","","",40,[[["i128"]],["bigint"]]],[11,"from","","",40,[[["biguint"]],["bigint"]]],[11,"from","","",40,[[["u16"]],["bigint"]]],[11,"from","","",40,[[["u128"]],["bigint"]]],[11,"from","","",41,[[["u128"]],["biguint"]]],[11,"from","","",40,[[["u8"]],["bigint"]]],[11,"from","","",41,[[["u8"]],["biguint"]]],[11,"from","","",41,[[["usize"]],["biguint"]]],[11,"from","","",40,[[["i16"]],["bigint"]]],[11,"from","","",41,[[["u16"]],["biguint"]]],[11,"from","","",40,[[["i64"]],["bigint"]]],[11,"from","","",41,[[["u64"]],["biguint"]]],[11,"from","","",40,[[["i32"]],["bigint"]]],[11,"from","","",41,[[["u32"]],["biguint"]]],[11,"from","","",40,[[["usize"]],["bigint"]]],[11,"from","","",40,[[["isize"]],["bigint"]]],[11,"from","","",40,[[["i8"]],["bigint"]]],[11,"from","","",40,[[["u64"]],["bigint"]]],[11,"from","","",40,[[["u32"]],["bigint"]]],[11,"sum","","",41,[[["i"]],["biguint"]]],[11,"sum","","",40,[[["i"]],["bigint"]]],[11,"eq","","",42,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",42,[[["self"],["parsebiginterror"]],["bool"]]],[11,"eq","","",21,[[["self"],["sign"]],["bool"]]],[11,"eq","","",40,[[["self"],["bigint"]],["bool"]]],[11,"eq","","",41,[[["self"],["biguint"]],["bool"]]],[11,"one","","",40,[[],["bigint"]]],[11,"is_one","","",40,[[["self"]],["bool"]]],[11,"one","","",41,[[],["biguint"]]],[11,"is_one","","",41,[[["self"]],["bool"]]],[11,"shr_assign","","",41,N],[11,"shr_assign","","",40,N],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",41,[[["self"],["u8"]],["biguint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",41,[[["self"],["u64"]],["biguint"]]],[11,"add","","",41,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",41,[[["self"],["u32"]],["biguint"]]],[11,"add","","",41,[[["self"],["usize"]],["biguint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",41,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",41,[[["self"],["u8"]],["biguint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",41,[[["self"],["u64"]],["biguint"]]],[11,"add","","",41,[[["self"],["usize"]],["biguint"]]],[11,"add","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",41,[[["self"],["u32"]],["biguint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"to_i64","","",41,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",41,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",41,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",41,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",41,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",41,[[["self"]],["option",["f64"]]]],[11,"to_i64","","",40,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",40,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",40,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",40,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",40,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",40,[[["self"]],["option",["f64"]]]],[11,"bitand_assign","","",40,N],[11,"bitand_assign","","",41,N],[11,"bitand_assign","","",40,N],[11,"bitand_assign","","",41,N],[11,"from_str","","",41,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str","","",40,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"cmp","","",41,[[["self"],["biguint"]],["ordering"]]],[11,"cmp","","",40,[[["self"],["bigint"]],["ordering"]]],[11,"cmp","","",21,[[["self"],["sign"]],["ordering"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",41,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",41,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",41,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"partial_cmp","","",21,[[["self"],["sign"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"partial_cmp","","",41,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"next","num::integer","",44,[[["self"]],["option"]]],[11,"fmt","num::traits","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"one","num::complex","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",0,N],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result",["complex"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result",["complex"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"inv","","",0,[[["self"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"eq","","",43,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",43,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",0,[[],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"clone","num::iter","",46,[[["self"]],["rangeinclusive"]]],[11,"clone","","",47,[[["self"]],["rangestep"]]],[11,"clone","","",48,[[["self"]],["rangestepinclusive"]]],[11,"clone","","",45,[[["self"]],["range"]]],[11,"next_back","","",46,[[["self"]],["option"]]],[11,"next_back","","",45,[[["self"]],["option"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"next","","",48,[[["self"]],["option"]]],[11,"neg","num::rational","",49,[[["self"]],["ratio"]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"clone","","",49,[[["self"]],["ratio"]]],[11,"clone","","",50,[[["self"]],["parseratioerror"]]],[11,"checked_mul","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"zero","","",49,[[],["ratio"]]],[11,"is_zero","","",49,[[["self"]],["bool"]]],[11,"checked_div","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"one","","",49,[[],["ratio"]]],[11,"is_one","","",49,[[["self"]],["bool"]]],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"hash","","",49,N],[11,"rem","","",49,[[["self"],["t"]],["ratio"]]],[11,"rem","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",49,[[["self"],["t"]],["ratio"]]],[11,"into","","",49,N],[11,"partial_cmp","","",49,[[["self"],["ratio"]],["option",["ordering"]]]],[11,"sub","","",49,[[["self"],["t"]],["ratio"]]],[11,"sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",49,[[["self"],["t"]],["ratio"]]],[11,"description","","",50,[[["self"]],["str"]]],[11,"cmp","","",49,[[["self"],["ratio"]],["ordering"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",49,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",49,[[["self"],["t"]],["ratio"]]],[11,"add","","",49,[[["self"],["t"]],["ratio"]]],[11,"eq","","",50,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",50,[[["self"],["parseratioerror"]],["bool"]]],[11,"eq","","",49,[[["self"],["ratio"]],["bool"]]],[11,"inv","","",49,[[["self"]],["ratio"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",49,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"sum","","",49,[[["i"]],["ratio"]]],[11,"sum","","",49,[[["i"]],["ratio"]]],[11,"div","","",49,[[["self"],["t"]],["ratio"]]],[11,"div","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",49,[[["self"],["t"]],["ratio"]]],[11,"div","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"from","","",49,N],[11,"from","","",49,[[["t"]],["ratio"]]],[11,"pow","","",49,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i32"]],["ratio"]]],[11,"checked_add","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"abs","","",49,[[["self"]],["ratio"]]],[11,"abs_sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",49,[[["self"]],["ratio"]]],[11,"is_positive","","",49,[[["self"]],["bool"]]],[11,"is_negative","","",49,[[["self"]],["bool"]]],[11,"mul","","",49,[[["self"],["t"]],["ratio"]]],[11,"mul","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",49,[[["self"],["t"]],["ratio"]]],[11,"mul","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",49,[[["i"]],["ratio"]]],[11,"product","","",49,[[["i"]],["ratio"]]],[11,"new","num::bigint","Creates and initializes a BigInt.",40,[[["sign"],["vec",["u32"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",40,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,[[["self"],["bigint"],["bigint"]],["bigint"]]],[11,"new","","Creates and initializes a `BigUint`.",41,[[["vec",["u32"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",41,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",41,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",41,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",41,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",41,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",41,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",41,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",41,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",41,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",41,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",41,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",41,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",41,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",41,[[["self"],["biguint"],["biguint"]],["biguint"]]],[11,"new","num::complex","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",44,[[["t"]],["iterbinomial"]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",49,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",49,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",49,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",49,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",49,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",49,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",49,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",49,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",49,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",49,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",49,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",49,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",49,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",49,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",49,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",49,[[["t"]],["option",["ratio"]]]],[11,"approximate_float","","",49,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Float"],[8,"ToBigUint"],[8,"ToBigInt"],[4,"Sign"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"]={"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"ParseBigIntError","num_bigint","",N,N],[3,"BigUint","","A big unsigned integer type.",N,N],[3,"BigInt","","A big signed integer type.",N,N],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",0,N],[13,"NoSign","","",0,N],[13,"Plus","","",0,N],[11,"new","","Creates and initializes a `BigUint`.",1,[[["vec",["u32"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",1,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",1,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",1,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",1,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",1,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",1,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",1,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",1,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",1,[[["self"],["self"],["self"]],["self"]]],[11,"new","","Creates and initializes a BigInt.",2,[[["sign"],["vec",["u32"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",2,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",2,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",2,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",2,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",2,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",2,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",2,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",2,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",2,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",2,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",2,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",2,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",2,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",2,[[["self"],["self"],["self"]],["self"]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[["self"]],["option",["biguint"]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[["self"]],["option",["bigint"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"to_biguint","","",1,[[["self"]],["option",["biguint"]]]],[11,"to_biguint","","",2,[[["self"]],["option",["biguint"]]]],[11,"to_bigint","","",2,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",1,[[["self"]],["option",["bigint"]]]],[11,"clone","","",1,[[["self"]],["biguint"]]],[11,"clone","","",0,[[["self"]],["sign"]]],[11,"clone","","",2,[[["self"]],["bigint"]]],[11,"clone","","",5,[[["self"]],["parsebiginterror"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"from","","",1,[[["u128"]],["self"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["i128"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["biguint"]],["self"]]],[11,"partial_cmp","","",1,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["sign"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"default","","",1,[[],["biguint"]]],[11,"default","","",2,[[],["bigint"]]],[11,"eq","","",1,[[["self"],["biguint"]],["bool"]]],[11,"eq","","",0,[[["self"],["sign"]],["bool"]]],[11,"eq","","",2,[[["self"],["bigint"]],["bool"]]],[11,"eq","","",5,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",5,[[["self"],["parsebiginterror"]],["bool"]]],[11,"cmp","","",1,[[["self"],["biguint"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["sign"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["bigint"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"sub","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",1,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",1,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i64"]],["bigint"]]],[11,"add","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",1,[[["self"],["u8"]],["biguint"]]],[11,"add","","",1,[[["self"],["u8"]],["biguint"]]],[11,"add","","",1,[[["self"],["u16"]],["biguint"]]],[11,"add","","",1,[[["self"],["u16"]],["biguint"]]],[11,"add","","",1,[[["self"],["usize"]],["biguint"]]],[11,"add","","",1,[[["self"],["usize"]],["biguint"]]],[11,"add","","",1,[[["self"],["u32"]],["biguint"]]],[11,"add","","",1,[[["self"],["u64"]],["biguint"]]],[11,"add","","",1,[[["self"],["u32"]],["biguint"]]],[11,"add","","",1,[[["self"],["u64"]],["biguint"]]],[11,"add","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",2,[[["self"],["u8"]],["bigint"]]],[11,"add","","",2,[[["self"],["u8"]],["bigint"]]],[11,"add","","",2,[[["self"],["u16"]],["bigint"]]],[11,"add","","",2,[[["self"],["u16"]],["bigint"]]],[11,"add","","",2,[[["self"],["usize"]],["bigint"]]],[11,"add","","",2,[[["self"],["usize"]],["bigint"]]],[11,"add","","",2,[[["self"],["i8"]],["bigint"]]],[11,"add","","",2,[[["self"],["i8"]],["bigint"]]],[11,"add","","",2,[[["self"],["i16"]],["bigint"]]],[11,"add","","",2,[[["self"],["i16"]],["bigint"]]],[11,"add","","",2,[[["self"],["isize"]],["bigint"]]],[11,"add","","",2,[[["self"],["isize"]],["bigint"]]],[11,"add","","",2,[[["self"],["u32"]],["bigint"]]],[11,"add","","",2,[[["self"],["u64"]],["bigint"]]],[11,"add","","",2,[[["self"],["u32"]],["bigint"]]],[11,"add","","",2,[[["self"],["u64"]],["bigint"]]],[11,"add","","",2,[[["self"],["i32"]],["bigint"]]],[11,"add","","",2,[[["self"],["i64"]],["bigint"]]],[11,"add","","",2,[[["self"],["i32"]],["bigint"]]],[11,"add","","",2,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",1,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",1,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",0,[[["self"],["sign"]],["sign"]]],[11,"mul","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i64"]],["bigint"]]],[11,"div","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",1,[[["self"],["u8"]],["biguint"]]],[11,"div","","",1,[[["self"],["u8"]],["biguint"]]],[11,"div","","",1,[[["self"],["u16"]],["biguint"]]],[11,"div","","",1,[[["self"],["u16"]],["biguint"]]],[11,"div","","",1,[[["self"],["usize"]],["biguint"]]],[11,"div","","",1,[[["self"],["usize"]],["biguint"]]],[11,"div","","",1,[[["self"],["u32"]],["biguint"]]],[11,"div","","",1,[[["self"],["u64"]],["biguint"]]],[11,"div","","",1,[[["self"],["u32"]],["biguint"]]],[11,"div","","",1,[[["self"],["u64"]],["biguint"]]],[11,"div","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",2,[[["self"],["u8"]],["bigint"]]],[11,"div","","",2,[[["self"],["u8"]],["bigint"]]],[11,"div","","",2,[[["self"],["u16"]],["bigint"]]],[11,"div","","",2,[[["self"],["u16"]],["bigint"]]],[11,"div","","",2,[[["self"],["usize"]],["bigint"]]],[11,"div","","",2,[[["self"],["usize"]],["bigint"]]],[11,"div","","",2,[[["self"],["i8"]],["bigint"]]],[11,"div","","",2,[[["self"],["i8"]],["bigint"]]],[11,"div","","",2,[[["self"],["i16"]],["bigint"]]],[11,"div","","",2,[[["self"],["i16"]],["bigint"]]],[11,"div","","",2,[[["self"],["isize"]],["bigint"]]],[11,"div","","",2,[[["self"],["isize"]],["bigint"]]],[11,"div","","",2,[[["self"],["u32"]],["bigint"]]],[11,"div","","",2,[[["self"],["u64"]],["bigint"]]],[11,"div","","",2,[[["self"],["u32"]],["bigint"]]],[11,"div","","",2,[[["self"],["u64"]],["bigint"]]],[11,"div","","",2,[[["self"],["i32"]],["bigint"]]],[11,"div","","",2,[[["self"],["i64"]],["bigint"]]],[11,"div","","",2,[[["self"],["i32"]],["bigint"]]],[11,"div","","",2,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",1,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",1,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i64"]],["bigint"]]],[11,"neg","","",1,[[["self"]],["biguint"]]],[11,"neg","","Negate Sign value.",0,[[["self"]],["sign"]]],[11,"neg","","",2,[[["self"]],["bigint"]]],[11,"add_assign","","",1,[[["self"],["biguint"]]]],[11,"add_assign","","",1,[[["self"],["biguint"]]]],[11,"add_assign","","",1,[[["self"],["u8"]]]],[11,"add_assign","","",1,[[["self"],["u16"]]]],[11,"add_assign","","",1,[[["self"],["usize"]]]],[11,"add_assign","","",1,[[["self"],["u32"]]]],[11,"add_assign","","",1,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["bigint"]]]],[11,"add_assign","","",2,[[["self"],["bigint"]]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["self"],["u16"]]]],[11,"add_assign","","",2,[[["self"],["usize"]]]],[11,"add_assign","","",2,[[["self"],["i8"]]]],[11,"add_assign","","",2,[[["self"],["i16"]]]],[11,"add_assign","","",2,[[["self"],["isize"]]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["i32"]]]],[11,"add_assign","","",2,[[["self"],["i64"]]]],[11,"sub_assign","","",1,[[["self"],["biguint"]]]],[11,"sub_assign","","",1,[[["self"],["biguint"]]]],[11,"sub_assign","","",1,[[["self"],["u8"]]]],[11,"sub_assign","","",1,[[["self"],["u16"]]]],[11,"sub_assign","","",1,[[["self"],["usize"]]]],[11,"sub_assign","","",1,[[["self"],["u32"]]]],[11,"sub_assign","","",1,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["bigint"]]]],[11,"sub_assign","","",2,[[["self"],["bigint"]]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["self"],["u16"]]]],[11,"sub_assign","","",2,[[["self"],["usize"]]]],[11,"sub_assign","","",2,[[["self"],["i8"]]]],[11,"sub_assign","","",2,[[["self"],["i16"]]]],[11,"sub_assign","","",2,[[["self"],["isize"]]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["i32"]]]],[11,"sub_assign","","",2,[[["self"],["i64"]]]],[11,"mul_assign","","",1,[[["self"],["biguint"]]]],[11,"mul_assign","","",1,[[["self"],["biguint"]]]],[11,"mul_assign","","",1,[[["self"],["u8"]]]],[11,"mul_assign","","",1,[[["self"],["u16"]]]],[11,"mul_assign","","",1,[[["self"],["usize"]]]],[11,"mul_assign","","",1,[[["self"],["u32"]]]],[11,"mul_assign","","",1,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["bigint"]]]],[11,"mul_assign","","",2,[[["self"],["bigint"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["self"],["u16"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["i16"]]]],[11,"mul_assign","","",2,[[["self"],["isize"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["i32"]]]],[11,"mul_assign","","",2,[[["self"],["i64"]]]],[11,"div_assign","","",1,[[["self"],["biguint"]]]],[11,"div_assign","","",1,[[["self"],["biguint"]]]],[11,"div_assign","","",1,[[["self"],["u8"]]]],[11,"div_assign","","",1,[[["self"],["u16"]]]],[11,"div_assign","","",1,[[["self"],["usize"]]]],[11,"div_assign","","",1,[[["self"],["u32"]]]],[11,"div_assign","","",1,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["bigint"]]]],[11,"div_assign","","",2,[[["self"],["bigint"]]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["self"],["u16"]]]],[11,"div_assign","","",2,[[["self"],["usize"]]]],[11,"div_assign","","",2,[[["self"],["i8"]]]],[11,"div_assign","","",2,[[["self"],["i16"]]]],[11,"div_assign","","",2,[[["self"],["isize"]]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["i32"]]]],[11,"div_assign","","",2,[[["self"],["i64"]]]],[11,"rem_assign","","",1,[[["self"],["biguint"]]]],[11,"rem_assign","","",1,[[["self"],["biguint"]]]],[11,"rem_assign","","",1,[[["self"],["u8"]]]],[11,"rem_assign","","",1,[[["self"],["u16"]]]],[11,"rem_assign","","",1,[[["self"],["usize"]]]],[11,"rem_assign","","",1,[[["self"],["u32"]]]],[11,"rem_assign","","",1,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["bigint"]]]],[11,"rem_assign","","",2,[[["self"],["bigint"]]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["self"],["u16"]]]],[11,"rem_assign","","",2,[[["self"],["usize"]]]],[11,"rem_assign","","",2,[[["self"],["i8"]]]],[11,"rem_assign","","",2,[[["self"],["i16"]]]],[11,"rem_assign","","",2,[[["self"],["isize"]]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["i32"]]]],[11,"rem_assign","","",2,[[["self"],["i64"]]]],[11,"not","","",2,[[["self"]],["bigint"]]],[11,"bitand","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitand","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"shl","","",1,[[["self"],["usize"]],["biguint"]]],[11,"shl","","",2,[[["self"],["usize"]],["bigint"]]],[11,"shr","","",1,[[["self"],["usize"]],["biguint"]]],[11,"shr","","",2,[[["self"],["usize"]],["bigint"]]],[11,"bitand_assign","","",1,[[["self"],["biguint"]]]],[11,"bitand_assign","","",1,[[["self"],["biguint"]]]],[11,"bitand_assign","","",2,[[["self"],["bigint"]]]],[11,"bitand_assign","","",2,[[["self"],["bigint"]]]],[11,"bitor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",2,[[["self"],["bigint"]]]],[11,"shl_assign","","",1,[[["self"],["usize"]]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr_assign","","",1,[[["self"],["usize"]]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"hash","","",1,N],[11,"hash","","",0,N],[11,"hash","","",2,N],[11,"product","","",1,[[["i"]],["self"]]],[11,"product","","",2,[[["i"]],["self"]]],[11,"sum","","",1,[[["i"]],["self"]]],[11,"sum","","",2,[[["i"]],["self"]]],[11,"from_str","","",1,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str","","",2,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"div_rem","","",1,N],[11,"div_floor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",1,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,[[["self"],["self"]],["self"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[["self"]],["bool"]]],[11,"div_rem","","",2,N],[11,"div_floor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",2,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[["self"]],["bool"]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",2,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"to_i64","","",1,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",1,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",1,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",1,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",1,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",1,[[["self"]],["option",["f64"]]]],[11,"to_i64","","",2,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",2,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",2,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",2,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",2,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",2,[[["self"]],["option",["f64"]]]],[11,"from_i64","","",1,[[["i64"]],["option",["biguint"]]]],[11,"from_i128","","",1,[[["i128"]],["option",["biguint"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["biguint"]]]],[11,"from_u128","","",1,[[["u128"]],["option",["biguint"]]]],[11,"from_f64","","",1,[[["f64"]],["option",["biguint"]]]],[11,"from_i64","","",2,[[["i64"]],["option",["bigint"]]]],[11,"from_i128","","",2,[[["i128"]],["option",["bigint"]]]],[11,"from_u64","","",2,[[["u64"]],["option",["bigint"]]]],[11,"from_u128","","",2,[[["u128"]],["option",["bigint"]]]],[11,"from_f64","","",2,[[["f64"]],["option",["bigint"]]]],[11,"zero","","",1,[[],["biguint"]]],[11,"is_zero","","",1,[[["self"]],["bool"]]],[11,"zero","","",2,[[],["bigint"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"one","","",1,[[],["biguint"]]],[11,"is_one","","",1,[[["self"]],["bool"]]],[11,"one","","",2,[[],["bigint"]]],[11,"is_one","","",2,[[["self"]],["bool"]]],[11,"checked_add","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_add","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_div","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_sub","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_mul","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"abs","","",2,[[["self"]],["bigint"]]],[11,"abs_sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",2,[[["self"]],["bigint"]]],[11,"is_positive","","",2,[[["self"]],["bool"]]],[11,"is_negative","","",2,[[["self"]],["bool"]]]],"paths":[[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"ParseBigIntError"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,N],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"inv","","",0,[[["self"]],["complex"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_derive"]={"doc":"Procedural macros to derive numeric traits in Rust.","items":[[24,"FromPrimitive","num_derive","Derives [`num_traits::FromPrimitive`][from] for simple enums and newtypes.",N,N],[24,"ToPrimitive","","Derives [`num_traits::ToPrimitive`][to] for simple enums and newtypes.",N,N],[24,"NumOps","","Derives [`num_traits::NumOps`][num_ops] for newtypes.  The inner type must already implement `NumOps`.",N,N],[24,"NumCast","","Derives [`num_traits::NumCast`][num_cast] for newtypes.  The inner type must already implement `NumCast`.",N,N],[24,"Zero","","Derives [`num_traits::Zero`][zero] for newtypes.  The inner type must already implement `Zero`.",N,N],[24,"One","","Derives [`num_traits::One`][one] for newtypes.  The inner type must already implement `One`.",N,N],[24,"Num","","Derives [`num_traits::Num`][num] for newtypes.  The inner type must already implement `Num`.",N,N],[24,"Float","","Derives [`num_traits::Float`][float] for newtypes.  The inner type must already implement `Float`.",N,N]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",N,N],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"]={"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",N,N],[3,"ParseRatioError","","",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",0,[[["t"]],["option",["bigrational"]]]],[11,"approximate_float","","",0,[[["f"]],["option",["ratio"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,N],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"neg","","",0,[[["self"]],["ratio"]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"into","","",0,N],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"one","","",0,[[],["ratio"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"checked_add","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"inv","","",0,[[["self"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"from","num_traits","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["parity_wasm"]={"doc":"WebAssembly format library","items":[[5,"peek_size","parity_wasm","Returns size of the module in the provided stream",N,N],[0,"elements","","Elements of the WebAssembly binary format.",N,N],[3,"Module","parity_wasm::elements","WebAssembly module",N,N],[3,"FunctionSection","","Section with function signatures definition.",N,N],[3,"CodeSection","","Section with function bodies of the module.",N,N],[3,"MemorySection","","Section with table definition (currently only one entry is allowed).",N,N],[3,"DataSection","","Data entries definitions.",N,N],[3,"ImportSection","","Section of the imports definition.",N,N],[3,"ExportSection","","List of exports definition.",N,N],[3,"GlobalSection","","Globals definition section.",N,N],[3,"TypeSection","","Section with type declarations",N,N],[3,"ElementSection","","Element entries section.",N,N],[3,"TableSection","","Section with table definition (currently only one is allowed).",N,N],[3,"CustomSection","","Custom section",N,N],[3,"ImportEntry","","Import entry.",N,N],[3,"ResizableLimits","","Memory limits",N,N],[3,"MemoryType","","Memory entry.",N,N],[3,"TableType","","Table entry",N,N],[3,"GlobalType","","Global definition struct",N,N],[3,"ExportEntry","","Export entry.",N,N],[3,"GlobalEntry","","Global entry in the module.",N,N],[3,"VarUint32","","Unsigned variable-length integer, limited to 32 bits, represented by at most 5 bytes that may contain padding 0x80 bytes.",N,N],[3,"VarUint7","","7-bit unsigned integer, encoded in LEB128 (always 1 byte length)",N,N],[3,"Uint8","","8-bit unsigned integer, NOT encoded in LEB128; it's just a single byte.",N,N],[3,"VarUint1","","VarUint1, 1-bit value (0/1)",N,N],[3,"VarInt7","","7-bit signed integer, encoded in LEB128 (always 1 byte length)",N,N],[3,"Uint32","","32-bit unsigned integer, encoded in little endian",N,N],[3,"VarInt32","","32-bit signed integer, encoded in LEB128 (can be 1-5 bytes length)",N,N],[3,"VarInt64","","64-bit signed integer, encoded in LEB128 (can be 1-9 bytes length)",N,N],[3,"Uint64","","64-bit unsigned integer, encoded in little endian",N,N],[3,"VarUint64","","Unsigned variable-length integer, limited to 64 bits, represented by at most 9 bytes that may contain padding 0x80 bytes.",N,N],[3,"CountedList","","List for reading sequence of elements typed `T`, given they are preceded by length (serialized as VarUint32)",N,N],[3,"CountedWriter","","Helper struct to write payload which is preceded by it's own length in bytes.",N,N],[3,"CountedListWriter","","Helper struct to write series of `T` preceded by the length of the sequence serialized as VarUint32",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[3,"FunctionType","","Function signature type.",N,N],[3,"Instructions","","List of instructions (usually inside a block section).",N,N],[3,"InitExpr","","Initialization expression.",N,N],[3,"Func","","Function signature (type reference)",N,N],[3,"FuncBody","","Function body definition.",N,N],[3,"Local","","Local definition inside the function body.",N,N],[3,"ElementSegment","","Entry in the element section.",N,N],[3,"DataSegment","","Data segment definition.",N,N],[3,"IndexMap","","A map from non-contiguous `u32` keys to values of type `T`, which is serialized and deserialized ascending order of the keys. Normally used for relative dense maps with occasional \"holes\", and stored as an array.",N,N],[3,"ModuleNameSection","","The name of this module.",N,N],[3,"FunctionNameSection","","The names of the functions in this module.",N,N],[3,"LocalNameSection","","The names of the local variables in this module's functions.",N,N],[3,"RelocSection","","Relocation information.",N,N],[3,"Unparsed","","Unparsed part of the module/section",N,N],[12,"0","","",1,N],[4,"ImportCountType","","Type of the import entry to count",N,N],[13,"Function","","Count functions",2,N],[13,"Global","","Count globals",2,N],[13,"Table","","Count tables",2,N],[13,"Memory","","Count memories",2,N],[4,"Section","","Section in the WebAssembly module.",N,N],[13,"Unparsed","","Section is unparsed.",3,N],[12,"id","parity_wasm::elements::Section","id of the unparsed section",3,N],[12,"payload","","raw bytes of the unparsed section",3,N],[13,"Custom","parity_wasm::elements","Custom section (`id=0`)",3,N],[13,"Type","","Types section",3,N],[13,"Import","","Import section",3,N],[13,"Function","","Function signatures section",3,N],[13,"Table","","Table definition section",3,N],[13,"Memory","","Memory definition section",3,N],[13,"Global","","Global entries section",3,N],[13,"Export","","Export definitions",3,N],[13,"Start","","Entry reference of the module",3,N],[13,"Element","","Elements section",3,N],[13,"Code","","Function bodies section",3,N],[13,"Data","","Data definition section",3,N],[13,"Name","","Name section.",3,N],[13,"Reloc","","Relocation section.",3,N],[4,"External","","External to local binding.",N,N],[13,"Function","","Binds to function with index.",4,N],[13,"Table","","Describes local table definition to be imported as.",4,N],[13,"Memory","","Describes local memory definition to be imported as.",4,N],[13,"Global","","Describes local global entry to be imported as.",4,N],[4,"Internal","","Internal reference of the exported entry.",N,N],[13,"Function","","Function reference.",5,N],[13,"Table","","Table reference.",5,N],[13,"Memory","","Memory reference.",5,N],[13,"Global","","Global reference.",5,N],[4,"Type","","Type definition in types section. Currently can be only of the function type.",N,N],[13,"Function","","Function type.",6,N],[4,"ValueType","","Value type.",N,N],[13,"I32","","32-bit signed integer",7,N],[13,"I64","","64-bit signed integer",7,N],[13,"F32","","32-bit float",7,N],[13,"F64","","64-bit float",7,N],[4,"BlockType","","Block type which is basically `ValueType` + NoResult (to define blocks that have no return type)",N,N],[13,"Value","","Value-type specified block type",8,N],[13,"NoResult","","No specified block type",8,N],[4,"TableElementType","","Table element type.",N,N],[13,"AnyFunc","","A reference to a function with any signature.",9,N],[4,"Instruction","","Instruction",N,N],[13,"Unreachable","","",10,N],[13,"Nop","","",10,N],[13,"Block","","",10,N],[13,"Loop","","",10,N],[13,"If","","",10,N],[13,"Else","","",10,N],[13,"End","","",10,N],[13,"Br","","",10,N],[13,"BrIf","","",10,N],[13,"BrTable","","",10,N],[13,"Return","","",10,N],[13,"Call","","",10,N],[13,"CallIndirect","","",10,N],[13,"Drop","","",10,N],[13,"Select","","",10,N],[13,"GetLocal","","",10,N],[13,"SetLocal","","",10,N],[13,"TeeLocal","","",10,N],[13,"GetGlobal","","",10,N],[13,"SetGlobal","","",10,N],[13,"I32Load","","",10,N],[13,"I64Load","","",10,N],[13,"F32Load","","",10,N],[13,"F64Load","","",10,N],[13,"I32Load8S","","",10,N],[13,"I32Load8U","","",10,N],[13,"I32Load16S","","",10,N],[13,"I32Load16U","","",10,N],[13,"I64Load8S","","",10,N],[13,"I64Load8U","","",10,N],[13,"I64Load16S","","",10,N],[13,"I64Load16U","","",10,N],[13,"I64Load32S","","",10,N],[13,"I64Load32U","","",10,N],[13,"I32Store","","",10,N],[13,"I64Store","","",10,N],[13,"F32Store","","",10,N],[13,"F64Store","","",10,N],[13,"I32Store8","","",10,N],[13,"I32Store16","","",10,N],[13,"I64Store8","","",10,N],[13,"I64Store16","","",10,N],[13,"I64Store32","","",10,N],[13,"CurrentMemory","","",10,N],[13,"GrowMemory","","",10,N],[13,"I32Const","","",10,N],[13,"I64Const","","",10,N],[13,"F32Const","","",10,N],[13,"F64Const","","",10,N],[13,"I32Eqz","","",10,N],[13,"I32Eq","","",10,N],[13,"I32Ne","","",10,N],[13,"I32LtS","","",10,N],[13,"I32LtU","","",10,N],[13,"I32GtS","","",10,N],[13,"I32GtU","","",10,N],[13,"I32LeS","","",10,N],[13,"I32LeU","","",10,N],[13,"I32GeS","","",10,N],[13,"I32GeU","","",10,N],[13,"I64Eqz","","",10,N],[13,"I64Eq","","",10,N],[13,"I64Ne","","",10,N],[13,"I64LtS","","",10,N],[13,"I64LtU","","",10,N],[13,"I64GtS","","",10,N],[13,"I64GtU","","",10,N],[13,"I64LeS","","",10,N],[13,"I64LeU","","",10,N],[13,"I64GeS","","",10,N],[13,"I64GeU","","",10,N],[13,"F32Eq","","",10,N],[13,"F32Ne","","",10,N],[13,"F32Lt","","",10,N],[13,"F32Gt","","",10,N],[13,"F32Le","","",10,N],[13,"F32Ge","","",10,N],[13,"F64Eq","","",10,N],[13,"F64Ne","","",10,N],[13,"F64Lt","","",10,N],[13,"F64Gt","","",10,N],[13,"F64Le","","",10,N],[13,"F64Ge","","",10,N],[13,"I32Clz","","",10,N],[13,"I32Ctz","","",10,N],[13,"I32Popcnt","","",10,N],[13,"I32Add","","",10,N],[13,"I32Sub","","",10,N],[13,"I32Mul","","",10,N],[13,"I32DivS","","",10,N],[13,"I32DivU","","",10,N],[13,"I32RemS","","",10,N],[13,"I32RemU","","",10,N],[13,"I32And","","",10,N],[13,"I32Or","","",10,N],[13,"I32Xor","","",10,N],[13,"I32Shl","","",10,N],[13,"I32ShrS","","",10,N],[13,"I32ShrU","","",10,N],[13,"I32Rotl","","",10,N],[13,"I32Rotr","","",10,N],[13,"I64Clz","","",10,N],[13,"I64Ctz","","",10,N],[13,"I64Popcnt","","",10,N],[13,"I64Add","","",10,N],[13,"I64Sub","","",10,N],[13,"I64Mul","","",10,N],[13,"I64DivS","","",10,N],[13,"I64DivU","","",10,N],[13,"I64RemS","","",10,N],[13,"I64RemU","","",10,N],[13,"I64And","","",10,N],[13,"I64Or","","",10,N],[13,"I64Xor","","",10,N],[13,"I64Shl","","",10,N],[13,"I64ShrS","","",10,N],[13,"I64ShrU","","",10,N],[13,"I64Rotl","","",10,N],[13,"I64Rotr","","",10,N],[13,"F32Abs","","",10,N],[13,"F32Neg","","",10,N],[13,"F32Ceil","","",10,N],[13,"F32Floor","","",10,N],[13,"F32Trunc","","",10,N],[13,"F32Nearest","","",10,N],[13,"F32Sqrt","","",10,N],[13,"F32Add","","",10,N],[13,"F32Sub","","",10,N],[13,"F32Mul","","",10,N],[13,"F32Div","","",10,N],[13,"F32Min","","",10,N],[13,"F32Max","","",10,N],[13,"F32Copysign","","",10,N],[13,"F64Abs","","",10,N],[13,"F64Neg","","",10,N],[13,"F64Ceil","","",10,N],[13,"F64Floor","","",10,N],[13,"F64Trunc","","",10,N],[13,"F64Nearest","","",10,N],[13,"F64Sqrt","","",10,N],[13,"F64Add","","",10,N],[13,"F64Sub","","",10,N],[13,"F64Mul","","",10,N],[13,"F64Div","","",10,N],[13,"F64Min","","",10,N],[13,"F64Max","","",10,N],[13,"F64Copysign","","",10,N],[13,"I32WrapI64","","",10,N],[13,"I32TruncSF32","","",10,N],[13,"I32TruncUF32","","",10,N],[13,"I32TruncSF64","","",10,N],[13,"I32TruncUF64","","",10,N],[13,"I64ExtendSI32","","",10,N],[13,"I64ExtendUI32","","",10,N],[13,"I64TruncSF32","","",10,N],[13,"I64TruncUF32","","",10,N],[13,"I64TruncSF64","","",10,N],[13,"I64TruncUF64","","",10,N],[13,"F32ConvertSI32","","",10,N],[13,"F32ConvertUI32","","",10,N],[13,"F32ConvertSI64","","",10,N],[13,"F32ConvertUI64","","",10,N],[13,"F32DemoteF64","","",10,N],[13,"F64ConvertSI32","","",10,N],[13,"F64ConvertUI32","","",10,N],[13,"F64ConvertSI64","","",10,N],[13,"F64ConvertUI64","","",10,N],[13,"F64PromoteF32","","",10,N],[13,"I32ReinterpretF32","","",10,N],[13,"I64ReinterpretF64","","",10,N],[13,"F32ReinterpretI32","","",10,N],[13,"F64ReinterpretI64","","",10,N],[4,"NameSection","","Debug name information.",N,N],[13,"Module","","Module name section.",11,N],[13,"Function","","Function name section.",11,N],[13,"Local","","Local name section.",11,N],[13,"Unparsed","","Name section is unparsed.",11,N],[12,"name_type","parity_wasm::elements::NameSection","The numeric identifier for this name section type.",11,N],[12,"name_payload","","The contents of this name section, unparsed.",11,N],[4,"RelocationEntry","parity_wasm::elements","Relocation entry.",N,N],[13,"FunctionIndexLeb","","Function index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the function symbol in the symbol table.",12,N],[13,"TableIndexSleb","parity_wasm::elements","Function table index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the function symbol in the symbol table.",12,N],[13,"TableIndexI32","parity_wasm::elements","Function table index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the function symbol in the symbol table.",12,N],[13,"MemoryAddressLeb","parity_wasm::elements","Linear memory index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the data symbol in the symbol table.",12,N],[12,"addend","","Addend to add to the address.",12,N],[13,"MemoryAddressSleb","parity_wasm::elements","Linear memory index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the data symbol in the symbol table.",12,N],[12,"addend","","Addend to add to the address.",12,N],[13,"MemoryAddressI32","parity_wasm::elements","Linear memory index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the data symbol in the symbol table.",12,N],[12,"addend","","Addend to add to the address.",12,N],[13,"TypeIndexLeb","parity_wasm::elements","Type table index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the type used.",12,N],[13,"GlobalIndexLeb","parity_wasm::elements","Global index.",12,N],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,N],[12,"index","","Index of the global symbol in the symbol table.",12,N],[4,"Error","parity_wasm::elements","Deserialization/serialization error",N,N],[13,"UnexpectedEof","","Unexpected end of input",13,N],[13,"InvalidMagic","","Invalid magic",13,N],[13,"UnsupportedVersion","","Unsupported version",13,N],[13,"InconsistentLength","","Inconsistence between declared and actual length",13,N],[12,"expected","parity_wasm::elements::Error","Expected length of the definition",13,N],[12,"actual","","Actual length of the definition",13,N],[13,"Other","parity_wasm::elements","Other static error",13,N],[13,"HeapOther","","Other allocated error",13,N],[13,"UnknownValueType","","Invalid/unknown value type declaration",13,N],[13,"UnknownTableElementType","","Invalid/unknown table element type declaration",13,N],[13,"NonUtf8String","","Non-utf8 string",13,N],[13,"UnknownExternalKind","","Unknown external kind code",13,N],[13,"UnknownInternalKind","","Unknown internal kind code",13,N],[13,"UnknownOpcode","","Unknown opcode encountered",13,N],[13,"InvalidVarUint1","","Invalid VarUint1 value",13,N],[13,"InvalidVarInt32","","Invalid VarInt32 value",13,N],[13,"InvalidVarInt64","","Invalid VarInt64 value",13,N],[13,"InvalidVarUint32","","Invalid VarUint32 value",13,N],[13,"InvalidVarUint64","","Invalid VarUint64 value",13,N],[13,"InconsistentMetadata","","Inconsistent metadata",13,N],[13,"InvalidSectionId","","Invalid section id",13,N],[13,"SectionsOutOfOrder","","Sections are out of order",13,N],[13,"DuplicatedSections","","Duplicated sections",13,N],[13,"InvalidMemoryReference","","Invalid memory reference (should be 0)",13,N],[13,"InvalidTableReference","","Invalid table reference (should be 0)",13,N],[13,"UnknownFunctionForm","","Unknown function form (should be 0x60)",13,N],[13,"InvalidVarInt7","","Invalid varint7 (should be in -64..63 range)",13,N],[13,"InconsistentCode","","Number of function body entries and signatures does not match",13,N],[5,"peek_size","","Returns size of the module in the provided stream",N,N],[5,"deserialize_buffer","","Deserialize deserializable type from buffer.",N,N],[5,"serialize","","Create buffer with serialized value.",N,[[["t"]],["result",["vec"]]]],[5,"deserialize_file","","Deserialize module from the file.",N,[[["p"]],["result",["module","error"]]]],[5,"serialize_to_file","","Serialize module to the file",N,[[["p"],["module"]],["result",["error"]]]],[11,"into_inner","","Destroy counted list returing inner vector.",14,[[["self"]],["vec"]]],[11,"new","","New counted writer on top of the given serial writer",15,[[["w"]],["self"]]],[11,"done","","Finish counted writer routing, which writes accumulated length and actual payload.",15,[[["self"]],["result",["error"]]]],[11,"new","","New module with sections",16,[[["vec",["section"]]],["self"]]],[11,"into_sections","","Destructure the module, yielding sections",16,[[["self"]],["vec",["section"]]]],[11,"version","","Version of module.",16,[[["self"]],["u32"]]],[11,"sections","","Sections list. Each known section is optional and may appear at most once.",16,N],[11,"sections_mut","","Sections list (mutable) Each known section is optional and may appear at most once.",16,[[["self"]],["vec"]]],[11,"code_section","","Code section reference, if any.",16,[[["self"]],["option",["codesection"]]]],[11,"code_section_mut","","Code section mutable reference, if any.",16,[[["self"]],["option",["codesection"]]]],[11,"type_section","","Types section reference, if any.",16,[[["self"]],["option",["typesection"]]]],[11,"type_section_mut","","Types section mutable reference, if any.",16,[[["self"]],["option",["typesection"]]]],[11,"import_section","","Imports section reference, if any.",16,[[["self"]],["option",["importsection"]]]],[11,"import_section_mut","","Imports section mutable reference, if any.",16,[[["self"]],["option",["importsection"]]]],[11,"global_section","","Globals section reference, if any.",16,[[["self"]],["option",["globalsection"]]]],[11,"global_section_mut","","Globals section mutable reference, if any.",16,[[["self"]],["option",["globalsection"]]]],[11,"export_section","","Exports section reference, if any.",16,[[["self"]],["option",["exportsection"]]]],[11,"export_section_mut","","Exports section mutable reference, if any.",16,[[["self"]],["option",["exportsection"]]]],[11,"table_section","","Table section reference, if any.",16,[[["self"]],["option",["tablesection"]]]],[11,"table_section_mut","","Table section mutable reference, if any.",16,[[["self"]],["option",["tablesection"]]]],[11,"data_section","","Data section reference, if any.",16,[[["self"]],["option",["datasection"]]]],[11,"data_section_mut","","Data section mutable reference, if any.",16,[[["self"]],["option",["datasection"]]]],[11,"elements_section","","Element section reference, if any.",16,[[["self"]],["option",["elementsection"]]]],[11,"elements_section_mut","","Element section mutable reference, if any.",16,[[["self"]],["option",["elementsection"]]]],[11,"memory_section","","Memory section reference, if any.",16,[[["self"]],["option",["memorysection"]]]],[11,"memory_section_mut","","Memory section mutable reference, if any.",16,[[["self"]],["option",["memorysection"]]]],[11,"function_section","","Functions signatures section reference, if any.",16,[[["self"]],["option",["functionsection"]]]],[11,"function_section_mut","","Functions signatures section mutable reference, if any.",16,[[["self"]],["option",["functionsection"]]]],[11,"start_section","","Start section, if any.",16,[[["self"]],["option",["u32"]]]],[11,"names_section","","Functions signatures section reference, if any. NOTE: name section is not parsed by default so `names_section` could return None even if name section exists. Call `parse_names` to parse name section",16,[[["self"]],["option",["namesection"]]]],[11,"names_section_mut","","Functions signatures section mutable reference, if any. NOTE: name section is not parsed by default so `names_section` could return None even if name section exists. Call `parse_names` to parse name section",16,[[["self"]],["option",["namesection"]]]],[11,"parse_names","","Try to parse name section in place Corresponding custom section with proper header will convert to name sections If some of them will fail to be decoded, Err variant is returned with the list of (index, Error) tuples of failed sections.",16,[[["self"]],["result"]]],[11,"parse_reloc","","Try to parse reloc section in place Corresponding custom section with proper header will convert to reloc sections If some of them will fail to be decoded, Err variant is returned with the list of (index, Error) tuples of failed sections.",16,[[["self"]],["result"]]],[11,"import_count","","Count imports by provided type",16,[[["self"],["importcounttype"]],["usize"]]],[11,"functions_space","","Query functions space",16,[[["self"]],["usize"]]],[11,"globals_space","","Query globals space",16,[[["self"]],["usize"]]],[11,"table_space","","Query table space",16,[[["self"]],["usize"]]],[11,"memory_space","","Query memory space",16,[[["self"]],["usize"]]],[11,"name","","Name of the custom section",17,[[["self"]],["str"]]],[11,"payload","","Payload of the custom secion",17,N],[11,"name_mut","","Name of the custom section (mutable)",17,[[["self"]],["string"]]],[11,"payload_mut","","Payload of the custom section (mutable)",17,[[["self"]],["vec"]]],[11,"with_types","","New type section with provided types",18,[[["vec",["type"]]],["self"]]],[11,"types","","List of type declarations",18,N],[11,"types_mut","","List of type declarations (mutable)",18,[[["self"]],["vec"]]],[11,"with_entries","","New import section with provided types",19,[[["vec",["importentry"]]],["self"]]],[11,"entries","","List of import entries.",19,N],[11,"entries_mut","","List of import entries (mutable).",19,[[["self"]],["vec"]]],[11,"functions","","Returns number of functions",19,[[["self"]],["usize"]]],[11,"globals","","Returns number of globals",19,[[["self"]],["usize"]]],[11,"with_entries","","New function signatures section with provided entries",20,[[["vec",["func"]]],["self"]]],[11,"entries_mut","","List of all functions in the section, mutable",20,[[["self"]],["vec"]]],[11,"entries","","List of all functions in the section",20,N],[11,"entries","","Table entries.",21,N],[11,"with_entries","","New table section with provided table entries",21,[[["vec",["tabletype"]]],["self"]]],[11,"entries_mut","","Mutable table entries.",21,[[["self"]],["vec"]]],[11,"entries","","List of all memory entries in the section",22,N],[11,"with_entries","","New memory section with memory types",22,[[["vec",["memorytype"]]],["self"]]],[11,"entries_mut","","Mutable list of all memory entries in the section",22,[[["self"]],["vec"]]],[11,"entries","","List of all global entries in the section",23,N],[11,"with_entries","","New global section from list of global entries",23,[[["vec",["globalentry"]]],["self"]]],[11,"entries_mut","","List of all global entries in the section (mutable)",23,[[["self"]],["vec"]]],[11,"entries","","List of all export entries in the section",24,N],[11,"with_entries","","New export section from list of export entries",24,[[["vec",["exportentry"]]],["self"]]],[11,"entries_mut","","List of all export entries in the section (mutable)",24,[[["self"]],["vec"]]],[11,"with_bodies","","New code section with specified function bodies",25,[[["vec",["funcbody"]]],["self"]]],[11,"bodies","","All function bodies in the section.",25,N],[11,"bodies_mut","","All function bodies in the section, mutable.",25,[[["self"]],["vec"]]],[11,"with_entries","","New elements section",26,[[["vec",["elementsegment"]]],["self"]]],[11,"entries","","New elements entries in the section",26,N],[11,"entries_mut","","List of all data entries in the section (mutable)",26,[[["self"]],["vec"]]],[11,"with_entries","","New data section",27,[[["vec",["datasegment"]]],["self"]]],[11,"entries","","List of all data entries in the section",27,N],[11,"entries_mut","","List of all data entries in the section (mutable)",27,[[["self"]],["vec"]]],[11,"new","","New function type given the signature in-params(`params`) and return type (`return_type`)",28,[[["vec",["valuetype"]],["option",["valuetype"]]],["self"]]],[11,"form","","Function form (currently only valid value is `0x60`)",28,[[["self"]],["u8"]]],[11,"params","","Parameters in the function signature.",28,N],[11,"params_mut","","Mutable parameters in the function signature.",28,[[["self"]],["vec"]]],[11,"return_type","","Return type in the function signature, if any.",28,[[["self"]],["option",["valuetype"]]]],[11,"return_type_mut","","Mutable type in the function signature, if any.",28,[[["self"]],["option"]]],[11,"new","","New global type",29,[[["valuetype"],["bool"]],["self"]]],[11,"content_type","","Type of the global entry",29,[[["self"]],["valuetype"]]],[11,"is_mutable","","Is global entry is declared as mutable",29,[[["self"]],["bool"]]],[11,"new","","New table definition",30,[[["u32"],["option",["u32"]]],["self"]]],[11,"limits","","Table memory specification",30,[[["self"]],["resizablelimits"]]],[11,"elem_type","","Table element type",30,[[["self"]],["tableelementtype"]]],[11,"new","","New memory limits definition",31,[[["u32"],["option",["u32"]]],["self"]]],[11,"initial","","Initial size",31,[[["self"]],["u32"]]],[11,"maximum","","Maximum size",31,[[["self"]],["option",["u32"]]]],[11,"new","","New memory definition",32,[[["u32"],["option",["u32"]]],["self"]]],[11,"limits","","Limits of the memory entry.",32,[[["self"]],["resizablelimits"]]],[11,"new","","New import entry.",33,[[["string"],["string"],["external"]],["self"]]],[11,"module","","Module reference of the import entry.",33,[[["self"]],["str"]]],[11,"module_mut","","Module reference of the import entry (mutable).",33,[[["self"]],["string"]]],[11,"field","","Field reference of the import entry.",33,[[["self"]],["str"]]],[11,"field_mut","","Field reference of the import entry (mutable)",33,[[["self"]],["string"]]],[11,"external","","Local binidng of the import entry.",33,[[["self"]],["external"]]],[11,"external_mut","","Local binidng of the import entry (mutable)",33,[[["self"]],["external"]]],[11,"new","","New export entry",34,[[["string"],["internal"]],["self"]]],[11,"field","","Public name",34,[[["self"]],["str"]]],[11,"field_mut","","Public name (mutable)",34,[[["self"]],["string"]]],[11,"internal","","Internal reference of the export entry.",34,[[["self"]],["internal"]]],[11,"internal_mut","","Internal reference of the export entry (mutable).",34,[[["self"]],["internal"]]],[11,"new","","New global entry",35,[[["globaltype"],["initexpr"]],["self"]]],[11,"global_type","","Global type.",35,[[["self"]],["globaltype"]]],[11,"init_expr","","Initialization expression (instructions) for global.",35,[[["self"]],["initexpr"]]],[11,"global_type_mut","","Global type (mutable)",35,[[["self"]],["globaltype"]]],[11,"init_expr_mut","","Initialization expression (instructions) for global (mutable)",35,[[["self"]],["initexpr"]]],[11,"new","","New list of instructions from vector of instructions.",36,[[["vec",["instruction"]]],["self"]]],[11,"empty","","Empty expression with only `Instruction::End` instruction.",36,[[],["self"]]],[11,"elements","","List of individual instructions.",36,N],[11,"elements_mut","","Individual instructions, mutable.",36,[[["self"]],["vec"]]],[11,"new","","New initialization expression from instruction list. `code` must end with the `Instruction::End` instruction!",37,[[["vec",["instruction"]]],["self"]]],[11,"empty","","Empty expression with only `Instruction::End` instruction",37,[[],["self"]]],[11,"code","","List of instructions used in the expression.",37,N],[11,"code_mut","","List of instructions used in the expression.",37,[[["self"]],["vec"]]],[11,"is_block","","Is this instruction starts the new block (which should end with terminal instruction).",10,[[["self"]],["bool"]]],[11,"is_terminal","","Is this instruction determines the termination of instruction sequence `true` for `Instruction::End`",10,[[["self"]],["bool"]]],[11,"new","","New function signature",38,[[["u32"]],["self"]]],[11,"type_ref","","Function signature type reference.",38,[[["self"]],["u32"]]],[11,"type_ref_mut","","Function signature type reference (mutable).",38,[[["self"]],["u32"]]],[11,"new","","New local with `count` and `value_type`.",39,[[["u32"],["valuetype"]],["self"]]],[11,"count","","Number of locals with the shared type.",39,[[["self"]],["u32"]]],[11,"value_type","","Type of the locals.",39,[[["self"]],["valuetype"]]],[11,"new","","New function body with given `locals` and `instructions`",40,[[["vec",["local"]],["instructions"]],["self"]]],[11,"empty","","List of individual instructions",40,[[],["self"]]],[11,"locals","","Locals declared in function body.",40,N],[11,"code","","Instruction list of the function body. Minimal instruction list is just `&[Instruction::End]`",40,[[["self"]],["instructions"]]],[11,"locals_mut","","Locals declared in function body (mutable).",40,[[["self"]],["vec"]]],[11,"code_mut","","Instruction list of the function body (mutable).",40,[[["self"]],["instructions"]]],[11,"new","","New element segment.",41,[[["u32"],["initexpr"],["vec",["u32"]]],["self"]]],[11,"members","","Sequence of function indices.",41,N],[11,"members_mut","","Sequence of function indices (mutable)",41,[[["self"]],["vec"]]],[11,"index","","Table index (currently valid only value of `0`)",41,[[["self"]],["u32"]]],[11,"offset","","An i32 initializer expression that computes the offset at which to place the elements.",41,[[["self"]],["initexpr"]]],[11,"offset_mut","","An i32 initializer expression that computes the offset at which to place the elements (mutable)",41,[[["self"]],["initexpr"]]],[11,"new","","New data segments.",42,[[["u32"],["initexpr"],["vec",["u8"]]],["self"]]],[11,"index","","Linear memory index (currently the only valid value is `0`).",42,[[["self"]],["u32"]]],[11,"offset","","An i32 initializer expression that computes the offset at which to place the data.",42,[[["self"]],["initexpr"]]],[11,"offset_mut","","An i32 initializer expression that computes the offset at which to place the data (mutable)",42,[[["self"]],["initexpr"]]],[11,"value","","Initial value of the data segment.",42,N],[11,"value_mut","","Initial value of the data segment (mutable).",42,[[["self"]],["vec"]]],[11,"with_capacity","","Create an empty `IndexMap`, preallocating enough space to store `capacity` entries without needing to reallocate the underlying memory.",43,[[["usize"]],["indexmap"]]],[11,"clear","","Clear the map.",43,[[["self"]]]],[11,"get","","Return the name for the specified index, if it exists.",43,[[["self"],["u32"]],["option"]]],[11,"contains_key","","Does the map contain an entry for the specified index?",43,[[["self"],["u32"]],["bool"]]],[11,"insert","","Insert a name into our map, returning the existing value if present.",43,[[["self"],["u32"],["t"]],["option"]]],[11,"remove","","Remove an item if present and return it.",43,[[["self"],["u32"]],["option"]]],[11,"len","","The number of items in this map.",43,[[["self"]],["usize"]]],[11,"is_empty","","Is this map empty?",43,[[["self"]],["bool"]]],[11,"iter","","Create a non-consuming iterator over this `IndexMap`'s keys and values.",43,[[["self"]],["iter"]]],[11,"deserialize_with","","Custom deserialization routine.",43,[[["usize"],["f"],["r"]],["result",["indexmap","error"]]]],[11,"deserialize","","Deserialize a map containing simple values that support `Deserialize`. We will allocate an underlying array no larger than `max_entry_space` to hold the data, so the maximum index must be less than `max_entry_space`.",43,[[["usize"],["r"]],["result",["error"]]]],[11,"deserialize","","Deserialize a name section.",11,[[["module"],["r"]],["result",["namesection","error"]]]],[11,"new","","Create a new module name section with the specified name.",44,[[["s"]],["modulenamesection"]]],[11,"name","","The name of this module.",44,[[["self"]],["str"]]],[11,"name_mut","","The name of this module (mutable).",44,[[["self"]],["string"]]],[11,"names","","A map from function indices to names.",45,[[["self"]],["namemap"]]],[11,"names_mut","","A map from function indices to names (mutable).",45,[[["self"]],["namemap"]]],[11,"deserialize","","Deserialize names, making sure that all names correspond to functions.",45,[[["module"],["r"]],["result",["functionnamesection","error"]]]],[11,"local_names","","A map from function indices to a map from variables indices to names.",46,[[["self"]],["indexmap"]]],[11,"local_names_mut","","A map from function indices to a map from variables indices to names (mutable).",46,[[["self"]],["indexmap"]]],[11,"deserialize","","Deserialize names, making sure that all names correspond to local variables.",46,[[["module"],["r"]],["result",["localnamesection","error"]]]],[11,"name","","Name of this section.",47,[[["self"]],["str"]]],[11,"name_mut","","Name of this section (mutable).",47,[[["self"]],["string"]]],[11,"section_id","","ID of the section containing the relocations described in this section.",47,[[["self"]],["u32"]]],[11,"section_id_mut","","ID of the section containing the relocations described in this section (mutable).",47,[[["self"]],["u32"]]],[11,"relocation_section_name","","Name of the section containing the relocations described in this section.",47,[[["self"]],["option",["str"]]]],[11,"relocation_section_name_mut","","Name of the section containing the relocations described in this section (mutable).",47,[[["self"]],["option"]]],[11,"entries","","List of relocation entries.",47,N],[11,"entries_mut","","List of relocation entries (mutable).",47,[[["self"]],["vec"]]],[11,"deserialize","","Deserialize a reloc section.",47,[[["string"],["r"]],["result",["error"]]]],[0,"opcodes","","",N,N],[17,"UNREACHABLE","parity_wasm::elements::opcodes","",N,N],[17,"NOP","","",N,N],[17,"BLOCK","","",N,N],[17,"LOOP","","",N,N],[17,"IF","","",N,N],[17,"ELSE","","",N,N],[17,"END","","",N,N],[17,"BR","","",N,N],[17,"BRIF","","",N,N],[17,"BRTABLE","","",N,N],[17,"RETURN","","",N,N],[17,"CALL","","",N,N],[17,"CALLINDIRECT","","",N,N],[17,"DROP","","",N,N],[17,"SELECT","","",N,N],[17,"GETLOCAL","","",N,N],[17,"SETLOCAL","","",N,N],[17,"TEELOCAL","","",N,N],[17,"GETGLOBAL","","",N,N],[17,"SETGLOBAL","","",N,N],[17,"I32LOAD","","",N,N],[17,"I64LOAD","","",N,N],[17,"F32LOAD","","",N,N],[17,"F64LOAD","","",N,N],[17,"I32LOAD8S","","",N,N],[17,"I32LOAD8U","","",N,N],[17,"I32LOAD16S","","",N,N],[17,"I32LOAD16U","","",N,N],[17,"I64LOAD8S","","",N,N],[17,"I64LOAD8U","","",N,N],[17,"I64LOAD16S","","",N,N],[17,"I64LOAD16U","","",N,N],[17,"I64LOAD32S","","",N,N],[17,"I64LOAD32U","","",N,N],[17,"I32STORE","","",N,N],[17,"I64STORE","","",N,N],[17,"F32STORE","","",N,N],[17,"F64STORE","","",N,N],[17,"I32STORE8","","",N,N],[17,"I32STORE16","","",N,N],[17,"I64STORE8","","",N,N],[17,"I64STORE16","","",N,N],[17,"I64STORE32","","",N,N],[17,"CURRENTMEMORY","","",N,N],[17,"GROWMEMORY","","",N,N],[17,"I32CONST","","",N,N],[17,"I64CONST","","",N,N],[17,"F32CONST","","",N,N],[17,"F64CONST","","",N,N],[17,"I32EQZ","","",N,N],[17,"I32EQ","","",N,N],[17,"I32NE","","",N,N],[17,"I32LTS","","",N,N],[17,"I32LTU","","",N,N],[17,"I32GTS","","",N,N],[17,"I32GTU","","",N,N],[17,"I32LES","","",N,N],[17,"I32LEU","","",N,N],[17,"I32GES","","",N,N],[17,"I32GEU","","",N,N],[17,"I64EQZ","","",N,N],[17,"I64EQ","","",N,N],[17,"I64NE","","",N,N],[17,"I64LTS","","",N,N],[17,"I64LTU","","",N,N],[17,"I64GTS","","",N,N],[17,"I64GTU","","",N,N],[17,"I64LES","","",N,N],[17,"I64LEU","","",N,N],[17,"I64GES","","",N,N],[17,"I64GEU","","",N,N],[17,"F32EQ","","",N,N],[17,"F32NE","","",N,N],[17,"F32LT","","",N,N],[17,"F32GT","","",N,N],[17,"F32LE","","",N,N],[17,"F32GE","","",N,N],[17,"F64EQ","","",N,N],[17,"F64NE","","",N,N],[17,"F64LT","","",N,N],[17,"F64GT","","",N,N],[17,"F64LE","","",N,N],[17,"F64GE","","",N,N],[17,"I32CLZ","","",N,N],[17,"I32CTZ","","",N,N],[17,"I32POPCNT","","",N,N],[17,"I32ADD","","",N,N],[17,"I32SUB","","",N,N],[17,"I32MUL","","",N,N],[17,"I32DIVS","","",N,N],[17,"I32DIVU","","",N,N],[17,"I32REMS","","",N,N],[17,"I32REMU","","",N,N],[17,"I32AND","","",N,N],[17,"I32OR","","",N,N],[17,"I32XOR","","",N,N],[17,"I32SHL","","",N,N],[17,"I32SHRS","","",N,N],[17,"I32SHRU","","",N,N],[17,"I32ROTL","","",N,N],[17,"I32ROTR","","",N,N],[17,"I64CLZ","","",N,N],[17,"I64CTZ","","",N,N],[17,"I64POPCNT","","",N,N],[17,"I64ADD","","",N,N],[17,"I64SUB","","",N,N],[17,"I64MUL","","",N,N],[17,"I64DIVS","","",N,N],[17,"I64DIVU","","",N,N],[17,"I64REMS","","",N,N],[17,"I64REMU","","",N,N],[17,"I64AND","","",N,N],[17,"I64OR","","",N,N],[17,"I64XOR","","",N,N],[17,"I64SHL","","",N,N],[17,"I64SHRS","","",N,N],[17,"I64SHRU","","",N,N],[17,"I64ROTL","","",N,N],[17,"I64ROTR","","",N,N],[17,"F32ABS","","",N,N],[17,"F32NEG","","",N,N],[17,"F32CEIL","","",N,N],[17,"F32FLOOR","","",N,N],[17,"F32TRUNC","","",N,N],[17,"F32NEAREST","","",N,N],[17,"F32SQRT","","",N,N],[17,"F32ADD","","",N,N],[17,"F32SUB","","",N,N],[17,"F32MUL","","",N,N],[17,"F32DIV","","",N,N],[17,"F32MIN","","",N,N],[17,"F32MAX","","",N,N],[17,"F32COPYSIGN","","",N,N],[17,"F64ABS","","",N,N],[17,"F64NEG","","",N,N],[17,"F64CEIL","","",N,N],[17,"F64FLOOR","","",N,N],[17,"F64TRUNC","","",N,N],[17,"F64NEAREST","","",N,N],[17,"F64SQRT","","",N,N],[17,"F64ADD","","",N,N],[17,"F64SUB","","",N,N],[17,"F64MUL","","",N,N],[17,"F64DIV","","",N,N],[17,"F64MIN","","",N,N],[17,"F64MAX","","",N,N],[17,"F64COPYSIGN","","",N,N],[17,"I32WRAPI64","","",N,N],[17,"I32TRUNCSF32","","",N,N],[17,"I32TRUNCUF32","","",N,N],[17,"I32TRUNCSF64","","",N,N],[17,"I32TRUNCUF64","","",N,N],[17,"I64EXTENDSI32","","",N,N],[17,"I64EXTENDUI32","","",N,N],[17,"I64TRUNCSF32","","",N,N],[17,"I64TRUNCUF32","","",N,N],[17,"I64TRUNCSF64","","",N,N],[17,"I64TRUNCUF64","","",N,N],[17,"F32CONVERTSI32","","",N,N],[17,"F32CONVERTUI32","","",N,N],[17,"F32CONVERTSI64","","",N,N],[17,"F32CONVERTUI64","","",N,N],[17,"F32DEMOTEF64","","",N,N],[17,"F64CONVERTSI32","","",N,N],[17,"F64CONVERTUI32","","",N,N],[17,"F64CONVERTSI64","","",N,N],[17,"F64CONVERTUI64","","",N,N],[17,"F64PROMOTEF32","","",N,N],[17,"I32REINTERPRETF32","","",N,N],[17,"I64REINTERPRETF64","","",N,N],[17,"F32REINTERPRETI32","","",N,N],[17,"F64REINTERPRETI64","","",N,N],[6,"NameMap","parity_wasm::elements","A map from indices to names.",N,N],[8,"Deserialize","","Deserialization from serial i/o",N,N],[16,"Error","","Serialization error produced by deserialization routine.",48,N],[10,"deserialize","","Deserialize type from serial i/o",48,[[["r"]],["result"]]],[8,"Serialize","","Serialization to serial i/o. Takes self by value to consume less memory (parity-wasm IR is being partially freed by filling the result buffer).",N,N],[16,"Error","","Serialization error produced by serialization routine.",49,N],[10,"serialize","","Serialize type to serial i/o",49,[[["self"],["w"]],["result"]]],[0,"builder","parity_wasm","Various builders to generate/alter wasm components",N,N],[3,"SignatureBuilder","parity_wasm::builder","Signature builder",N,N],[3,"SignaturesBuilder","","Multiple signatures builder",N,N],[3,"FunctionBuilder","","Function definition builder",N,N],[3,"TypeRefBuilder","","Type (signature) reference builder (for function/import/indirect call)",N,N],[3,"FuncBodyBuilder","","Function body (code) builder",N,N],[3,"FunctionDefinition","","Function definition (extended structure to specify function entirely, incl. signature, mainness and code)",N,N],[12,"is_main","","Is this function is start function",50,N],[12,"signature","","Signature description",50,N],[12,"code","","Body (code) of the function",50,N],[3,"DataSegmentBuilder","","Data segment builder",N,N],[3,"ExportBuilder","","Export entry builder",N,N],[3,"ExportInternalBuilder","","Internal mapping builder for export entry",N,N],[3,"GlobalBuilder","","Global builder",N,N],[3,"ImportBuilder","","Import builder",N,N],[3,"Identity","","Identity chain element",N,N],[3,"MemoryBuilder","","Memory and static regions builder",N,N],[3,"ModuleBuilder","","Module builder",N,N],[3,"TableBuilder","","Table builder",N,N],[3,"TableDefinition","","Table definition",N,N],[12,"min","","Minimum length",51,N],[12,"max","","Maximum length, if any",51,N],[12,"elements","","Element segments, if any",51,N],[3,"TableEntryDefinition","","Table elements entry definition",N,N],[12,"offset","","Offset initialization expression",52,N],[12,"values","","Values of initialization",52,N],[5,"signatures","","New builder of signature list",N,[[],["signaturesbuilder"]]],[5,"signature","","New signature builder",N,[[],["signaturebuilder"]]],[5,"function","","New builder of function (signature & body)",N,[[],["functionbuilder"]]],[5,"export","","New builder for export entry",N,[[],["exportbuilder"]]],[5,"global","","New builder for export entry",N,[[],["globalbuilder"]]],[5,"import","","New builder for import entry",N,[[],["importbuilder"]]],[5,"module","","Start new module builder # Examples",N,[[],["modulebuilder"]]],[5,"from_module","","Start builder to extend existing module",N,[[["module"]],["modulebuilder"]]],[11,"new","","New empty module builder",53,[[],["self"]]],[11,"with_callback","","New module builder with bound callback",53,[[["f"]],["self"]]],[11,"with_module","","Builder from raw module",53,[[["self"],["module"]],["self"]]],[11,"with_sections","","Fill module with sections from iterator",53,[[["self"],["i"]],["self"]]],[11,"with_section","","Add additional section",53,[[["self"],["section"]],["self"]]],[11,"with_signatures","","Binds to the type section, creates additional types when required",53,[[["self"],["vec",["signature"]]],["self"]]],[11,"push_function","","Push stand-alone function definition, creating sections, signature and code blocks in corresponding sections. `FunctionDefinition` can be build using `builder::function` builder",53,[[["self"],["functiondefinition"]],["codelocation"]]],[11,"push_memory","","Push linear memory region",53,[[["self"],["memorydefinition"]],["u32"]]],[11,"push_table","","Push table",53,[[["self"],["tabledefinition"]],["u32"]]],[11,"push_signature","","Push one function signature, returning it's calling index. Can create corresponding type in type section.",53,[[["self"],["signature"]],["u32"]]],[11,"push_signatures","","Push signatures in the module, returning corresponding indices of pushed signatures",53,[[["self"],["vec",["signature"]]],["vec",["u32"]]]],[11,"push_import","","Push import entry to module. Not that it does not update calling indices in function bodies.",53,[[["self"],["importentry"]],["u32"]]],[11,"push_export","","Push export entry to module.",53,[[["self"],["exportentry"]],["u32"]]],[11,"function","","Add new function using dedicated builder",53,[[["self"]],["functionbuilder"]]],[11,"memory","","Add new linear memory using dedicated builder",53,[[["self"]],["memorybuilder"]]],[11,"table","","Add new table using dedicated builder",53,[[["self"]],["tablebuilder"]]],[11,"functions","","Define functions section",53,[[["self"]],["signaturesbuilder"]]],[11,"with_export","","With inserted export entry",53,[[["self"],["exportentry"]],["self"]]],[11,"with_import","","With inserted import entry",53,[[["self"],["importentry"]],["self"]]],[11,"import","","Import entry builder # Examples ``` use parity_wasm::builder::module;",53,[[["self"]],["importbuilder"]]],[11,"with_global","","With global variable",53,[[["self"],["globalentry"]],["self"]]],[11,"with_table","","With table",53,[[["self"],["tabletype"]],["self"]]],[11,"export","","Export entry builder # Examples ``` use parity_wasm::builder::module; use parity_wasm::elements::Instruction::*;",53,[[["self"]],["exportbuilder"]]],[11,"global","","Glboal entry builder # Examples ``` use parity_wasm::builder::module; use parity_wasm::elements::Instruction::*;",53,[[["self"]],["globalbuilder"]]],[11,"with_data_segment","","Add data segment to the builder",53,[[["self"],["datasegment"]],["self"]]],[11,"data","","Data entry builder",53,[[["self"]],["datasegmentbuilder"]]],[11,"build","","Build module (final step)",53,N],[11,"new","","New signature builder",54,[[],["self"]]],[11,"with_callback","","New builder with callback function specified",54,[[["f"]],["self"]]],[11,"with_param","","Add argument to signature builder",54,[[["self"],["valuetype"]],["self"]]],[11,"with_params","","Add multiple arguments to signature builder",54,[[["self"],["vec",["valuetype"]]],["self"]]],[11,"with_return_type","","Override signature return type",54,[[["self"],["option",["valuetype"]]],["self"]]],[11,"param","","Start build new argument",54,[[["self"]],["valuetypebuilder"]]],[11,"params","","Start build multiple arguments",54,[[["self"]],["valuetypesbuilder"]]],[11,"return_type","","Start building return type",54,[[["self"]],["optionalvaluetypebuilder"]]],[11,"build","","Finish current builder",54,N],[11,"build_sig","","Finish current builder returning intermediate `Signature` struct",54,[[["self"]],["signature"]]],[11,"with_callback","","New builder chained with specified callback",55,[[["f"]],["self"]]],[11,"val","","Set/override of type reference",55,[[["self"],["u32"]],["self"]]],[11,"build","","Finish current builder",55,N],[11,"new","","New empty functions section builder",56,[[],["self"]]],[11,"with_callback","","New builder chained with specified callback",56,[[["f"]],["self"]]],[11,"with_signature","","Push new signature into the builder output",56,[[["self"],["signature"]],["self"]]],[11,"type_ref","","Start building new signature with `TypeRefBuilder`",56,[[["self"]],["typerefbuilder"]]],[11,"signature","","Start building new signature with dedicated builder",56,[[["self"]],["signaturebuilder"]]],[11,"build","","Finalize builder spawning element",56,N],[11,"bind","","Bind signature list",56,N],[11,"with_callback","","New body (code) builder given the chain callback",57,[[["f"]],["self"]]],[11,"with_func","","Set/override entirely with FuncBody struct",57,[[["self"],["funcbody"]],["self"]]],[11,"with_locals","","Extend function local list with new entries",57,[[["self"],["vec",["local"]]],["self"]]],[11,"with_instructions","","Set code of the function",57,[[["self"],["instructions"]],["self"]]],[11,"build","","Finish current builder spawning resulting struct",57,N],[11,"new","","New function builder",58,[[],["self"]]],[11,"with_callback","","New function builder with chained callback",58,[[["f"]],["self"]]],[11,"main","","Set that this function is main entry point",58,[[["self"]],["self"]]],[11,"signature","","Start signature builder of the function",58,[[["self"]],["signaturebuilder"]]],[11,"with_signature","","Override current signature entirely with new one from known struct",58,[[["self"],["signature"]],["self"]]],[11,"body","","Start code (body) builder",58,[[["self"]],["funcbodybuilder"]]],[11,"with_body","","Set body (code) for this function",58,[[["self"],["funcbody"]],["self"]]],[11,"build","","Finalize current builder spawning resulting struct in the callback",58,N],[11,"new","","New import builder",59,[[],["self"]]],[11,"with_callback","","New import builder with callback (in chained context)",59,[[["f"]],["self"]]],[11,"module","","Set/override module name",59,[[["self"],["str"]],["self"]]],[11,"field","","Set/override field name",59,[[["self"],["str"]],["self"]]],[11,"path","","Set/override both module name and field name",59,[[["self"],["str"],["str"]],["self"]]],[11,"with_external","","Set/override external mapping for this import",59,[[["self"],["external"]],["self"]]],[11,"external","","Start new external mapping builder",59,[[["self"]],["importexternalbuilder"]]],[11,"build","","Finalize current builder spawning the resulting struct",59,N],[11,"new","","New memory builder",60,[[],["self"]]],[11,"with_callback","","New memory builder with callback (in chained context)",60,[[["f"]],["self"]]],[11,"with_min","","Set/override minimum size",60,[[["self"],["u32"]],["self"]]],[11,"with_max","","Set/override maximum size",60,[[["self"],["option",["u32"]]],["self"]]],[11,"with_data","","Push new static region with initialized offset expression and raw bytes",60,[[["self"],["u32"],["vec",["u8"]]],["self"]]],[11,"build","","Finalize current builder, spawning resulting struct",60,N],[11,"new","","New table builder",61,[[],["self"]]],[11,"with_callback","","New table builder with callback in chained context",61,[[["f"]],["self"]]],[11,"with_min","","Set/override minimum length",61,[[["self"],["u32"]],["self"]]],[11,"with_max","","Set/override maximum length",61,[[["self"],["option",["u32"]]],["self"]]],[11,"with_element","","Generate initialization expression and element values on specified index",61,[[["self"],["u32"],["vec",["u32"]]],["self"]]],[11,"build","","Finalize current builder spawning resulting struct",61,N],[11,"new","","New export builder",62,[[],["self"]]],[11,"with_callback","","New export entry builder in the specified chained context",62,[[["f"]],["self"]]],[11,"field","","Set the field name of the export entry",62,[[["self"],["str"]],["self"]]],[11,"with_internal","","Specify the internal module mapping for this entry",62,[[["self"],["internal"]],["self"]]],[11,"internal","","Start the internal builder for this export entry",62,[[["self"]],["exportinternalbuilder"]]],[11,"build","","Finalize export entry builder spawning the resulting struct",62,N],[11,"with_callback","","New export entry internal mapping for the chained context",63,[[["f"]],["self"]]],[11,"func","","Map to function by index",63,N],[11,"memory","","Map to memory",63,N],[11,"table","","Map to table",63,N],[11,"global","","Map to global",63,N],[11,"new","","New global builder",64,[[],["self"]]],[11,"with_callback","","New global builder with callback (in chained context)",64,[[["f"]],["self"]]],[11,"with_type","","Set/override resulting global type",64,[[["self"],["valuetype"]],["self"]]],[11,"mutable","","Set mutabilty to true",64,[[["self"]],["self"]]],[11,"init_expr","","Set initialization expression instruction for this global (`end` instruction will be added automatically)",64,[[["self"],["instruction"]],["self"]]],[11,"value_type","","Start value type builder",64,[[["self"]],["valuetypebuilder"]]],[11,"build","","Finalize current builder spawning resulting struct",64,N],[11,"new","","New data segment builder",65,[[],["self"]]],[11,"with_callback","","New data segment builder inside the chain context",65,[[["f"]],["self"]]],[11,"offset","","Set offset initialization instruction. `End` instruction will be added automatically.",65,[[["self"],["instruction"]],["self"]]],[11,"value","","Set the bytes value of the segment",65,[[["self"],["vec",["u8"]]],["self"]]],[11,"build","","Finish current builder, spawning resulting struct",65,N],[11,"from","parity_wasm::elements","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"into_iter","","",43,[[["self"]],["i"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","parity_wasm::builder","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"deserialize","parity_wasm::elements","",66,[[["r"]],["result"]]],[11,"deserialize","","",75,[[["r"]],["result"]]],[11,"deserialize","","",67,[[["r"]],["result"]]],[11,"deserialize","","",70,[[["r"]],["result"]]],[11,"deserialize","","",68,[[["r"]],["result"]]],[11,"deserialize","","",72,[[["r"]],["result"]]],[11,"deserialize","","",73,[[["r"]],["result"]]],[11,"deserialize","","",71,[[["r"]],["result"]]],[11,"deserialize","","",74,[[["r"]],["result"]]],[11,"deserialize","","",69,[[["r"]],["result"]]],[11,"deserialize","","",14,[[["r"]],["result"]]],[11,"deserialize","","",16,[[["r"]],["result"]]],[11,"deserialize","","",3,[[["r"]],["result"]]],[11,"deserialize","","",17,[[["r"]],["result"]]],[11,"deserialize","","",18,[[["r"]],["result"]]],[11,"deserialize","","",19,[[["r"]],["result"]]],[11,"deserialize","","",20,[[["r"]],["result"]]],[11,"deserialize","","",21,[[["r"]],["result"]]],[11,"deserialize","","",22,[[["r"]],["result"]]],[11,"deserialize","","",23,[[["r"]],["result"]]],[11,"deserialize","","",24,[[["r"]],["result"]]],[11,"deserialize","","",25,[[["r"]],["result"]]],[11,"deserialize","","",26,[[["r"]],["result"]]],[11,"deserialize","","",27,[[["r"]],["result"]]],[11,"deserialize","","",6,[[["r"]],["result"]]],[11,"deserialize","","",7,[[["r"]],["result"]]],[11,"deserialize","","",8,[[["r"]],["result"]]],[11,"deserialize","","",28,[[["r"]],["result"]]],[11,"deserialize","","",9,[[["r"]],["result"]]],[11,"deserialize","","",29,[[["r"]],["result"]]],[11,"deserialize","","",30,[[["r"]],["result"]]],[11,"deserialize","","",31,[[["r"]],["result"]]],[11,"deserialize","","",32,[[["r"]],["result"]]],[11,"deserialize","","",4,[[["r"]],["result"]]],[11,"deserialize","","",33,[[["r"]],["result"]]],[11,"deserialize","","",5,[[["r"]],["result"]]],[11,"deserialize","","",34,[[["r"]],["result"]]],[11,"deserialize","","",35,[[["r"]],["result"]]],[11,"deserialize","","",36,[[["r"]],["result"]]],[11,"deserialize","","",37,[[["r"]],["result"]]],[11,"deserialize","","",10,[[["r"]],["result"]]],[11,"deserialize","","",38,[[["r"]],["result"]]],[11,"deserialize","","",39,[[["r"]],["result"]]],[11,"deserialize","","",40,[[["r"]],["result"]]],[11,"deserialize","","",41,[[["r"]],["result"]]],[11,"deserialize","","",42,[[["r"]],["result"]]],[11,"deserialize","","",44,[[["r"]],["result",["modulenamesection","error"]]]],[11,"deserialize","","",12,[[["r"]],["result"]]],[11,"deserialize","","",1,[[["r"]],["result"]]],[11,"serialize","","",66,[[["self"],["w"]],["result"]]],[11,"serialize","","",75,[[["self"],["w"]],["result"]]],[11,"serialize","","",67,[[["self"],["w"]],["result"]]],[11,"serialize","","",70,[[["self"],["w"]],["result"]]],[11,"serialize","","",68,[[["self"],["w"]],["result"]]],[11,"serialize","","",72,[[["self"],["w"]],["result"]]],[11,"serialize","","",73,[[["self"],["w"]],["result"]]],[11,"serialize","","",71,[[["self"],["w"]],["result"]]],[11,"serialize","","",74,[[["self"],["w"]],["result"]]],[11,"serialize","","",69,[[["self"],["w"]],["result"]]],[11,"serialize","","",0,[[["self"],["w"]],["result"]]],[11,"serialize","","",16,[[["self"],["w"]],["result"]]],[11,"serialize","","",3,[[["self"],["w"]],["result"]]],[11,"serialize","","",17,[[["self"],["w"]],["result"]]],[11,"serialize","","",18,[[["self"],["w"]],["result"]]],[11,"serialize","","",19,[[["self"],["w"]],["result"]]],[11,"serialize","","",20,[[["self"],["w"]],["result"]]],[11,"serialize","","",21,[[["self"],["w"]],["result"]]],[11,"serialize","","",22,[[["self"],["w"]],["result"]]],[11,"serialize","","",23,[[["self"],["w"]],["result"]]],[11,"serialize","","",24,[[["self"],["w"]],["result"]]],[11,"serialize","","",25,[[["self"],["w"]],["result"]]],[11,"serialize","","",26,[[["self"],["w"]],["result"]]],[11,"serialize","","",27,[[["self"],["w"]],["result"]]],[11,"serialize","","",6,[[["self"],["w"]],["result"]]],[11,"serialize","","",7,[[["self"],["w"]],["result"]]],[11,"serialize","","",8,[[["self"],["w"]],["result"]]],[11,"serialize","","",28,[[["self"],["w"]],["result"]]],[11,"serialize","","",9,[[["self"],["w"]],["result"]]],[11,"serialize","","",29,[[["self"],["w"]],["result"]]],[11,"serialize","","",30,[[["self"],["w"]],["result"]]],[11,"serialize","","",31,[[["self"],["w"]],["result"]]],[11,"serialize","","",32,[[["self"],["w"]],["result"]]],[11,"serialize","","",4,[[["self"],["w"]],["result"]]],[11,"serialize","","",33,[[["self"],["w"]],["result"]]],[11,"serialize","","",5,[[["self"],["w"]],["result"]]],[11,"serialize","","",34,[[["self"],["w"]],["result"]]],[11,"serialize","","",35,[[["self"],["w"]],["result"]]],[11,"serialize","","",10,[[["self"],["w"]],["result"]]],[11,"serialize","","",36,[[["self"],["w"]],["result"]]],[11,"serialize","","",37,[[["self"],["w"]],["result"]]],[11,"serialize","","",38,[[["self"],["w"]],["result"]]],[11,"serialize","","",39,[[["self"],["w"]],["result"]]],[11,"serialize","","",40,[[["self"],["w"]],["result"]]],[11,"serialize","","",41,[[["self"],["w"]],["result"]]],[11,"serialize","","",42,[[["self"],["w"]],["result"]]],[11,"serialize","","",43,[[["self"],["w"]],["result"]]],[11,"serialize","","",11,[[["self"],["w"]],["result",["error"]]]],[11,"serialize","","",44,[[["self"],["w"]],["result",["error"]]]],[11,"serialize","","",45,[[["self"],["w"]],["result",["error"]]]],[11,"serialize","","",46,[[["self"],["w"]],["result",["error"]]]],[11,"serialize","","",47,[[["self"],["w"]],["result",["error"]]]],[11,"serialize","","",12,[[["self"],["w"]],["result",["error"]]]],[11,"clone","","",66,[[["self"]],["varuint32"]]],[11,"clone","","",75,[[["self"]],["varuint64"]]],[11,"clone","","",67,[[["self"]],["varuint7"]]],[11,"clone","","",70,[[["self"]],["varint7"]]],[11,"clone","","",68,[[["self"]],["uint8"]]],[11,"clone","","",72,[[["self"]],["varint32"]]],[11,"clone","","",73,[[["self"]],["varint64"]]],[11,"clone","","",71,[[["self"]],["uint32"]]],[11,"clone","","",74,[[["self"]],["uint64"]]],[11,"clone","","",69,[[["self"]],["varuint1"]]],[11,"clone","","",14,[[["self"]],["countedlist"]]],[11,"clone","","",0,[[["self"]],["countedlistwriter"]]],[11,"clone","","",16,[[["self"]],["module"]]],[11,"clone","","",2,[[["self"]],["importcounttype"]]],[11,"clone","","",3,[[["self"]],["section"]]],[11,"clone","","",17,[[["self"]],["customsection"]]],[11,"clone","","",18,[[["self"]],["typesection"]]],[11,"clone","","",19,[[["self"]],["importsection"]]],[11,"clone","","",20,[[["self"]],["functionsection"]]],[11,"clone","","",21,[[["self"]],["tablesection"]]],[11,"clone","","",22,[[["self"]],["memorysection"]]],[11,"clone","","",23,[[["self"]],["globalsection"]]],[11,"clone","","",24,[[["self"]],["exportsection"]]],[11,"clone","","",25,[[["self"]],["codesection"]]],[11,"clone","","",26,[[["self"]],["elementsection"]]],[11,"clone","","",27,[[["self"]],["datasection"]]],[11,"clone","","",6,[[["self"]],["type"]]],[11,"clone","","",7,[[["self"]],["valuetype"]]],[11,"clone","","",8,[[["self"]],["blocktype"]]],[11,"clone","","",28,[[["self"]],["functiontype"]]],[11,"clone","","",9,[[["self"]],["tableelementtype"]]],[11,"clone","","",29,[[["self"]],["globaltype"]]],[11,"clone","","",30,[[["self"]],["tabletype"]]],[11,"clone","","",31,[[["self"]],["resizablelimits"]]],[11,"clone","","",32,[[["self"]],["memorytype"]]],[11,"clone","","",4,[[["self"]],["external"]]],[11,"clone","","",33,[[["self"]],["importentry"]]],[11,"clone","","",5,[[["self"]],["internal"]]],[11,"clone","","",34,[[["self"]],["exportentry"]]],[11,"clone","","",35,[[["self"]],["globalentry"]]],[11,"clone","","",36,[[["self"]],["instructions"]]],[11,"clone","","",37,[[["self"]],["initexpr"]]],[11,"clone","","",10,[[["self"]],["instruction"]]],[11,"clone","","",38,[[["self"]],["func"]]],[11,"clone","","",39,[[["self"]],["local"]]],[11,"clone","","",40,[[["self"]],["funcbody"]]],[11,"clone","","",41,[[["self"]],["elementsegment"]]],[11,"clone","","",42,[[["self"]],["datasegment"]]],[11,"clone","","",43,[[["self"]],["indexmap"]]],[11,"clone","","",11,[[["self"]],["namesection"]]],[11,"clone","","",44,[[["self"]],["modulenamesection"]]],[11,"clone","","",45,[[["self"]],["functionnamesection"]]],[11,"clone","","",46,[[["self"]],["localnamesection"]]],[11,"clone","","",47,[[["self"]],["relocsection"]]],[11,"clone","","",12,[[["self"]],["relocationentry"]]],[11,"clone","","",13,[[["self"]],["error"]]],[11,"from","","",66,[[["u32"]],["varuint32"]]],[11,"from","","",66,[[["usize"]],["varuint32"]]],[11,"from","","",75,[[["u64"]],["varuint64"]]],[11,"from","","",67,[[["u8"]],["self"]]],[11,"from","","",70,[[["i8"]],["varint7"]]],[11,"from","","",68,[[["u8"]],["self"]]],[11,"from","","",72,[[["i32"]],["varint32"]]],[11,"from","","",73,[[["i64"]],["varint64"]]],[11,"from","","",71,[[["u32"]],["self"]]],[11,"from","","",74,[[["u64"]],["self"]]],[11,"from","","",69,[[["bool"]],["self"]]],[11,"default","","",16,[[],["self"]]],[11,"default","","",17,[[],["customsection"]]],[11,"default","","",18,[[],["typesection"]]],[11,"default","","",19,[[],["importsection"]]],[11,"default","","",20,[[],["functionsection"]]],[11,"default","","",21,[[],["tablesection"]]],[11,"default","","",22,[[],["memorysection"]]],[11,"default","","",23,[[],["globalsection"]]],[11,"default","","",24,[[],["exportsection"]]],[11,"default","","",25,[[],["codesection"]]],[11,"default","","",26,[[],["elementsection"]]],[11,"default","","",27,[[],["datasection"]]],[11,"default","","",28,[[],["self"]]],[11,"default","","",43,[[],["indexmap"]]],[11,"default","","",45,[[],["functionnamesection"]]],[11,"default","","",46,[[],["localnamesection"]]],[11,"default","parity_wasm::builder","",50,[[],["self"]]],[11,"default","","",51,[[],["self"]]],[11,"eq","parity_wasm::elements","",66,[[["self"],["varuint32"]],["bool"]]],[11,"ne","","",66,[[["self"],["varuint32"]],["bool"]]],[11,"eq","","",75,[[["self"],["varuint64"]],["bool"]]],[11,"ne","","",75,[[["self"],["varuint64"]],["bool"]]],[11,"eq","","",67,[[["self"],["varuint7"]],["bool"]]],[11,"ne","","",67,[[["self"],["varuint7"]],["bool"]]],[11,"eq","","",70,[[["self"],["varint7"]],["bool"]]],[11,"ne","","",70,[[["self"],["varint7"]],["bool"]]],[11,"eq","","",68,[[["self"],["uint8"]],["bool"]]],[11,"ne","","",68,[[["self"],["uint8"]],["bool"]]],[11,"eq","","",72,[[["self"],["varint32"]],["bool"]]],[11,"ne","","",72,[[["self"],["varint32"]],["bool"]]],[11,"eq","","",73,[[["self"],["varint64"]],["bool"]]],[11,"ne","","",73,[[["self"],["varint64"]],["bool"]]],[11,"eq","","",71,[[["self"],["uint32"]],["bool"]]],[11,"ne","","",71,[[["self"],["uint32"]],["bool"]]],[11,"eq","","",74,[[["self"],["uint64"]],["bool"]]],[11,"ne","","",74,[[["self"],["uint64"]],["bool"]]],[11,"eq","","",69,[[["self"],["varuint1"]],["bool"]]],[11,"ne","","",69,[[["self"],["varuint1"]],["bool"]]],[11,"eq","","",16,[[["self"],["module"]],["bool"]]],[11,"ne","","",16,[[["self"],["module"]],["bool"]]],[11,"eq","","",2,[[["self"],["importcounttype"]],["bool"]]],[11,"eq","","",3,[[["self"],["section"]],["bool"]]],[11,"ne","","",3,[[["self"],["section"]],["bool"]]],[11,"eq","","",17,[[["self"],["customsection"]],["bool"]]],[11,"ne","","",17,[[["self"],["customsection"]],["bool"]]],[11,"eq","","",18,[[["self"],["typesection"]],["bool"]]],[11,"ne","","",18,[[["self"],["typesection"]],["bool"]]],[11,"eq","","",19,[[["self"],["importsection"]],["bool"]]],[11,"ne","","",19,[[["self"],["importsection"]],["bool"]]],[11,"eq","","",20,[[["self"],["functionsection"]],["bool"]]],[11,"ne","","",20,[[["self"],["functionsection"]],["bool"]]],[11,"eq","","",21,[[["self"],["tablesection"]],["bool"]]],[11,"ne","","",21,[[["self"],["tablesection"]],["bool"]]],[11,"eq","","",22,[[["self"],["memorysection"]],["bool"]]],[11,"ne","","",22,[[["self"],["memorysection"]],["bool"]]],[11,"eq","","",23,[[["self"],["globalsection"]],["bool"]]],[11,"ne","","",23,[[["self"],["globalsection"]],["bool"]]],[11,"eq","","",24,[[["self"],["exportsection"]],["bool"]]],[11,"ne","","",24,[[["self"],["exportsection"]],["bool"]]],[11,"eq","","",25,[[["self"],["codesection"]],["bool"]]],[11,"ne","","",25,[[["self"],["codesection"]],["bool"]]],[11,"eq","","",26,[[["self"],["elementsection"]],["bool"]]],[11,"ne","","",26,[[["self"],["elementsection"]],["bool"]]],[11,"eq","","",27,[[["self"],["datasection"]],["bool"]]],[11,"ne","","",27,[[["self"],["datasection"]],["bool"]]],[11,"eq","","",6,[[["self"],["type"]],["bool"]]],[11,"ne","","",6,[[["self"],["type"]],["bool"]]],[11,"eq","","",7,[[["self"],["valuetype"]],["bool"]]],[11,"eq","","",8,[[["self"],["blocktype"]],["bool"]]],[11,"ne","","",8,[[["self"],["blocktype"]],["bool"]]],[11,"eq","","",28,[[["self"],["functiontype"]],["bool"]]],[11,"ne","","",28,[[["self"],["functiontype"]],["bool"]]],[11,"eq","","",9,[[["self"],["tableelementtype"]],["bool"]]],[11,"eq","","",29,[[["self"],["globaltype"]],["bool"]]],[11,"ne","","",29,[[["self"],["globaltype"]],["bool"]]],[11,"eq","","",30,[[["self"],["tabletype"]],["bool"]]],[11,"ne","","",30,[[["self"],["tabletype"]],["bool"]]],[11,"eq","","",31,[[["self"],["resizablelimits"]],["bool"]]],[11,"ne","","",31,[[["self"],["resizablelimits"]],["bool"]]],[11,"eq","","",32,[[["self"],["memorytype"]],["bool"]]],[11,"ne","","",32,[[["self"],["memorytype"]],["bool"]]],[11,"eq","","",4,[[["self"],["external"]],["bool"]]],[11,"ne","","",4,[[["self"],["external"]],["bool"]]],[11,"eq","","",33,[[["self"],["importentry"]],["bool"]]],[11,"ne","","",33,[[["self"],["importentry"]],["bool"]]],[11,"eq","","",5,[[["self"],["internal"]],["bool"]]],[11,"ne","","",5,[[["self"],["internal"]],["bool"]]],[11,"eq","","",34,[[["self"],["exportentry"]],["bool"]]],[11,"ne","","",34,[[["self"],["exportentry"]],["bool"]]],[11,"eq","","",35,[[["self"],["globalentry"]],["bool"]]],[11,"ne","","",35,[[["self"],["globalentry"]],["bool"]]],[11,"eq","","",36,[[["self"],["instructions"]],["bool"]]],[11,"ne","","",36,[[["self"],["instructions"]],["bool"]]],[11,"eq","","",37,[[["self"],["initexpr"]],["bool"]]],[11,"ne","","",37,[[["self"],["initexpr"]],["bool"]]],[11,"eq","","",10,[[["self"],["instruction"]],["bool"]]],[11,"ne","","",10,[[["self"],["instruction"]],["bool"]]],[11,"eq","","",38,[[["self"],["func"]],["bool"]]],[11,"ne","","",38,[[["self"],["func"]],["bool"]]],[11,"eq","","",39,[[["self"],["local"]],["bool"]]],[11,"ne","","",39,[[["self"],["local"]],["bool"]]],[11,"eq","","",40,[[["self"],["funcbody"]],["bool"]]],[11,"ne","","",40,[[["self"],["funcbody"]],["bool"]]],[11,"eq","","",41,[[["self"],["elementsegment"]],["bool"]]],[11,"ne","","",41,[[["self"],["elementsegment"]],["bool"]]],[11,"eq","","",42,[[["self"],["datasegment"]],["bool"]]],[11,"ne","","",42,[[["self"],["datasegment"]],["bool"]]],[11,"eq","","",43,[[["self"],["indexmap"]],["bool"]]],[11,"eq","","",11,[[["self"],["namesection"]],["bool"]]],[11,"ne","","",11,[[["self"],["namesection"]],["bool"]]],[11,"eq","","",44,[[["self"],["modulenamesection"]],["bool"]]],[11,"ne","","",44,[[["self"],["modulenamesection"]],["bool"]]],[11,"eq","","",45,[[["self"],["functionnamesection"]],["bool"]]],[11,"ne","","",45,[[["self"],["functionnamesection"]],["bool"]]],[11,"eq","","",46,[[["self"],["localnamesection"]],["bool"]]],[11,"ne","","",46,[[["self"],["localnamesection"]],["bool"]]],[11,"eq","","",47,[[["self"],["relocsection"]],["bool"]]],[11,"ne","","",47,[[["self"],["relocsection"]],["bool"]]],[11,"eq","","",12,[[["self"],["relocationentry"]],["bool"]]],[11,"ne","","",12,[[["self"],["relocationentry"]],["bool"]]],[11,"eq","parity_wasm::builder","",51,[[["self"],["tabledefinition"]],["bool"]]],[11,"ne","","",51,[[["self"],["tabledefinition"]],["bool"]]],[11,"eq","","",52,[[["self"],["tableentrydefinition"]],["bool"]]],[11,"ne","","",52,[[["self"],["tableentrydefinition"]],["bool"]]],[11,"into_iter","parity_wasm::elements","",43,[[["self"]],["intoiter"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","parity_wasm::builder","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"from_iter","parity_wasm::elements","Create an `IndexMap` from an iterator.",43,[[["i"]],["self"]]],[11,"description","","",13,[[["self"]],["str"]]]],"paths":[[3,"CountedListWriter"],[3,"Unparsed"],[4,"ImportCountType"],[4,"Section"],[4,"External"],[4,"Internal"],[4,"Type"],[4,"ValueType"],[4,"BlockType"],[4,"TableElementType"],[4,"Instruction"],[4,"NameSection"],[4,"RelocationEntry"],[4,"Error"],[3,"CountedList"],[3,"CountedWriter"],[3,"Module"],[3,"CustomSection"],[3,"TypeSection"],[3,"ImportSection"],[3,"FunctionSection"],[3,"TableSection"],[3,"MemorySection"],[3,"GlobalSection"],[3,"ExportSection"],[3,"CodeSection"],[3,"ElementSection"],[3,"DataSection"],[3,"FunctionType"],[3,"GlobalType"],[3,"TableType"],[3,"ResizableLimits"],[3,"MemoryType"],[3,"ImportEntry"],[3,"ExportEntry"],[3,"GlobalEntry"],[3,"Instructions"],[3,"InitExpr"],[3,"Func"],[3,"Local"],[3,"FuncBody"],[3,"ElementSegment"],[3,"DataSegment"],[3,"IndexMap"],[3,"ModuleNameSection"],[3,"FunctionNameSection"],[3,"LocalNameSection"],[3,"RelocSection"],[8,"Deserialize"],[8,"Serialize"],[3,"FunctionDefinition"],[3,"TableDefinition"],[3,"TableEntryDefinition"],[3,"ModuleBuilder"],[3,"SignatureBuilder"],[3,"TypeRefBuilder"],[3,"SignaturesBuilder"],[3,"FuncBodyBuilder"],[3,"FunctionBuilder"],[3,"ImportBuilder"],[3,"MemoryBuilder"],[3,"TableBuilder"],[3,"ExportBuilder"],[3,"ExportInternalBuilder"],[3,"GlobalBuilder"],[3,"DataSegmentBuilder"],[3,"VarUint32"],[3,"VarUint7"],[3,"Uint8"],[3,"VarUint1"],[3,"VarInt7"],[3,"Uint32"],[3,"VarInt32"],[3,"VarInt64"],[3,"Uint64"],[3,"VarUint64"],[3,"Identity"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream"]]],[11,"empty","","",3,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[["self"]],["bool"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",5,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",5,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",5,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",5,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",6,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",6,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",7,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",7,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",8,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",8,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",8,[[["f32"]],["literal"]]],[11,"string","","",8,[[["str"]],["literal"]]],[11,"character","","",8,[[["char"]],["literal"]]],[11,"byte_string","","",8,N],[11,"span","","",8,[[["self"]],["span"]]],[11,"set_span","","",8,[[["self"],["span"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"from","proc_macro2::token_stream","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"clone","proc_macro2","",3,[[["self"]],["tokenstream"]]],[11,"clone","","",4,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",5,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["ident"]]],[11,"clone","","",8,[[["self"]],["literal"]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"from","","",4,[[["span"]],["span"]]],[11,"from","","",3,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"next","proc_macro2::token_stream","",10,[[["self"]],["option",["tokentree"]]]],[11,"partial_cmp","proc_macro2","",7,[[["self"],["ident"]],["option",["ordering"]]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"eq","","",7,[[["self"],["ident"]],["bool"]]],[11,"eq","","",7,[[["self"],["t"]],["bool"]]],[11,"into_iter","","",3,[[["self"]],["intoiter"]]],[11,"cmp","","",7,[[["self"],["ident"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","proc_macro2::token_stream","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","proc_macro2","",7,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"from_str","","",3,[[["str"]],["result",["tokenstream","lexerror"]]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new","rand::distributions","Construct an object representing the `Gamma(shape, scale)` distribution.",8,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",9,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",10,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",11,[[["f64"]],["studentt"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",12,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",13,[[["f64"],["f64"]],["lognormal"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",14,[[["f64"]],["exp"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",15,[[["f64"],["f64"]],["pareto"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",16,[[["f64"]],["poisson"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",17,[[["u64"],["f64"]],["binomial"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",18,[[["f64"]],["bernoulli"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",19,[[["f64"],["f64"]],["cauchy"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",20,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",21,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",22,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",22,[[["self"],["r"]],["distiter"]]],[11,"new","","Create a new `WeightedChoice`.",23,N],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",24,[[],["chacharng"]]],[11,"set_stream","","Set the stream number.",24,[[["self"],["u64"]]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",25,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",25,[[["u64"]],["self"]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",26,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",26,[[["u64"]],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",27,[[["u64"]],["self"]]],[11,"new_unseeded","rand::prng","Creates a new XorShiftRng instance which is not seeded.",28,[[],["xorshiftrng"]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",29,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",29,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",29,N],[13,"TinyVariantions","","Variations of deltas of time too small.",29,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",29,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"new","","Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",31,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",31,[[["self"]],["result",["error"]]]],[11,"new","rand::rngs","Create a new `EntropyRng`.",32,[[],["self"]]],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",33,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",33,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",33,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",33,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",33,[[["self"],["bool"]],["i64"]]],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",34,[[["u64"],["u64"]],["self"]]],[11,"new","rand::rngs","Create a new `OsRng`.",35,[[],["result",["osrng","error"]]]],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",36,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",37,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",37,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",37,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",37,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",37,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",37,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",37,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",37,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",37,N],[11,"shuffle","","Shuffle a mutable slice in place.",37,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",37,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",37,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",37,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",38,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",38,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",39,[[],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","rand::distributions","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","rand::distributions::uniform","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","rand::distributions","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"into_iter","","",47,[[["self"]],["i"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","rand::distributions::uniform","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from_entropy","rand::prng","",28,[[],["r"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from_entropy","rand::prng::chacha","",24,[[],["r"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from_entropy","","",52,[[],["r"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"from_entropy","rand::prng::hc128","",53,[[],["r"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"from_entropy","","",54,[[],["r"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"from_entropy","rand::prng::isaac","",25,[[],["r"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from_entropy","","",55,[[],["r"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"from_entropy","rand::prng::isaac64","",26,[[],["r"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from_entropy","","",27,[[],["r"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","rand::rngs","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from_entropy","","",56,[[],["r"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from_entropy","","",57,[[],["r"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","rand::rngs::adapter","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","rand::rngs::mock","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"description","rand","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"read","","",0,N],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"new","rand::distributions::uniform","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",50,N],[11,"new_inclusive","","",50,N],[11,"sample","","",50,N],[11,"sample_single","","",50,N],[11,"new","","",50,N],[11,"new_inclusive","","",50,N],[11,"sample","","",50,N],[11,"sample_single","","",50,N],[11,"new","","",51,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",51,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",51,[[["self"],["r"]],["duration"]]],[11,"sample","rand::distributions","",23,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",8,[[["self"],["r"]],["f64"]]],[11,"sample","","",9,[[["self"],["r"]],["f64"]]],[11,"sample","","",10,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",23,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",8,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",9,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",10,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["x"]]],[11,"sample","rand::distributions","",8,[[["self"],["r"]],["f64"]]],[11,"sample","","",9,[[["self"],["r"]],["f64"]]],[11,"sample","","",10,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",45,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",46,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["u64"]]],[11,"sample","","",17,[[["self"],["r"]],["u64"]]],[11,"sample","","",18,[[["self"],["r"]],["bool"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["f32"]]],[11,"sample","","",43,[[["self"],["r"]],["f32"]]],[11,"sample","","",44,[[["self"],["r"]],["f32"]]],[11,"sample","","",48,[[["self"],["r"]],["f64"]]],[11,"sample","","",43,[[["self"],["r"]],["f64"]]],[11,"sample","","",44,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["u8"]]],[11,"sample","","",48,[[["self"],["r"]],["u16"]]],[11,"sample","","",48,[[["self"],["r"]],["u32"]]],[11,"sample","","",48,[[["self"],["r"]],["u64"]]],[11,"sample","","",48,[[["self"],["r"]],["usize"]]],[11,"sample","","",48,[[["self"],["r"]],["i8"]]],[11,"sample","","",48,[[["self"],["r"]],["i16"]]],[11,"sample","","",48,[[["self"],["r"]],["i32"]]],[11,"sample","","",48,[[["self"],["r"]],["i64"]]],[11,"sample","","",48,[[["self"],["r"]],["isize"]]],[11,"sample","","",48,[[["self"],["r"]],["char"]]],[11,"sample","","",42,[[["self"],["r"]],["char"]]],[11,"sample","","",48,[[["self"],["r"]],["bool"]]],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,[[["self"],["r"]],["option"]]],[11,"sample","","",48,[[["self"],["r"]],["wrapping"]]],[11,"sample","","",23,[[["self"],["r"]],["t"]]],[11,"clone","rand::distributions::uniform","",7,[[["self"]],["uniform"]]],[11,"clone","","",49,[[["self"]],["uniformint"]]],[11,"clone","","",50,[[["self"]],["uniformfloat"]]],[11,"clone","","",51,[[["self"]],["uniformduration"]]],[11,"clone","rand::distributions","",8,[[["self"]],["gamma"]]],[11,"clone","","",9,[[["self"]],["chisquared"]]],[11,"clone","","",10,[[["self"]],["fisherf"]]],[11,"clone","","",11,[[["self"]],["studentt"]]],[11,"clone","","",45,[[["self"]],["standardnormal"]]],[11,"clone","","",12,[[["self"]],["normal"]]],[11,"clone","","",13,[[["self"]],["lognormal"]]],[11,"clone","","",46,[[["self"]],["exp1"]]],[11,"clone","","",14,[[["self"]],["exp"]]],[11,"clone","","",15,[[["self"]],["pareto"]]],[11,"clone","","",16,[[["self"]],["poisson"]]],[11,"clone","","",17,[[["self"]],["binomial"]]],[11,"clone","","",18,[[["self"]],["bernoulli"]]],[11,"clone","","",19,[[["self"]],["cauchy"]]],[11,"clone","","",43,[[["self"]],["openclosed01"]]],[11,"clone","","",44,[[["self"]],["open01"]]],[11,"clone","","",48,[[["self"]],["standard"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"clone","rand::prng::chacha","",24,[[["self"]],["chacharng"]]],[11,"clone","","",52,[[["self"]],["chachacore"]]],[11,"clone","rand::prng::hc128","",53,[[["self"]],["hc128rng"]]],[11,"clone","","",54,[[["self"]],["hc128core"]]],[11,"clone","rand::prng::isaac","",25,[[["self"]],["isaacrng"]]],[11,"clone","","",55,[[["self"]],["isaaccore"]]],[11,"clone","rand::prng::isaac64","",26,[[["self"]],["isaac64rng"]]],[11,"clone","","",27,[[["self"]],["isaac64core"]]],[11,"clone","rand::prng","",28,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::rngs::adapter","",31,[[["self"]],["reseedingrng"]]],[11,"clone","rand::rngs","",33,[[["self"]],["jitterrng"]]],[11,"clone","","",29,[[["self"]],["timererror"]]],[11,"clone","rand::rngs::mock","",34,[[["self"]],["steprng"]]],[11,"clone","rand::rngs","",56,[[["self"]],["smallrng"]]],[11,"clone","","",57,[[["self"]],["stdrng"]]],[11,"clone","","",58,[[["self"]],["threadrng"]]],[11,"clone","","",35,[[["self"]],["osrng"]]],[11,"from","rand::distributions::uniform","",7,[[["range"]],["uniform"]]],[11,"from","rand::prng::chacha","",24,[[["chachacore"]],["self"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"next","rand::distributions","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","rand","",40,[[["self"]],["option"]]],[11,"next","","",41,[[["self"]],["option",["char"]]]],[11,"default","rand::rngs","",32,[[],["self"]]],[11,"eq","","",29,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::distributions::uniform","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::distributions","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::chacha","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::hc128","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::isaac","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::isaac64","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs::adapter","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs::mock","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"description","rand::rngs","",29,[[["self"]],["str"]]],[11,"next_u32","rand::prng::chacha","",24,[[["self"]],["u32"]]],[11,"next_u64","","",24,[[["self"]],["u64"]]],[11,"fill_bytes","","",24,N],[11,"try_fill_bytes","","",24,N],[11,"next_u32","rand::prng::hc128","",53,[[["self"]],["u32"]]],[11,"next_u64","","",53,[[["self"]],["u64"]]],[11,"fill_bytes","","",53,N],[11,"try_fill_bytes","","",53,N],[11,"next_u32","rand::prng::isaac","",25,[[["self"]],["u32"]]],[11,"next_u64","","",25,[[["self"]],["u64"]]],[11,"fill_bytes","","",25,N],[11,"try_fill_bytes","","",25,N],[11,"next_u32","rand::prng::isaac64","",26,[[["self"]],["u32"]]],[11,"next_u64","","",26,[[["self"]],["u64"]]],[11,"fill_bytes","","",26,N],[11,"try_fill_bytes","","",26,N],[11,"next_u32","rand::prng","",28,[[["self"]],["u32"]]],[11,"next_u64","","",28,[[["self"]],["u64"]]],[11,"fill_bytes","","",28,N],[11,"try_fill_bytes","","",28,N],[11,"next_u32","rand::rngs::adapter","",30,[[["self"]],["u32"]]],[11,"next_u64","","",30,[[["self"]],["u64"]]],[11,"fill_bytes","","",30,N],[11,"try_fill_bytes","","",30,N],[11,"next_u32","","",31,[[["self"]],["u32"]]],[11,"next_u64","","",31,[[["self"]],["u64"]]],[11,"fill_bytes","","",31,N],[11,"try_fill_bytes","","",31,N],[11,"next_u32","rand::rngs","",32,[[["self"]],["u32"]]],[11,"next_u64","","",32,[[["self"]],["u64"]]],[11,"fill_bytes","","",32,N],[11,"try_fill_bytes","","",32,N],[11,"next_u32","","",33,[[["self"]],["u32"]]],[11,"next_u64","","",33,[[["self"]],["u64"]]],[11,"fill_bytes","","",33,N],[11,"try_fill_bytes","","",33,N],[11,"next_u32","rand::rngs::mock","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"next_u32","rand::rngs","",56,[[["self"]],["u32"]]],[11,"next_u64","","",56,[[["self"]],["u64"]]],[11,"fill_bytes","","",56,N],[11,"try_fill_bytes","","",56,N],[11,"next_u32","","",57,[[["self"]],["u32"]]],[11,"next_u64","","",57,[[["self"]],["u64"]]],[11,"fill_bytes","","",57,N],[11,"try_fill_bytes","","",57,N],[11,"next_u32","","",58,[[["self"]],["u32"]]],[11,"next_u64","","",58,[[["self"]],["u64"]]],[11,"fill_bytes","","",58,N],[11,"try_fill_bytes","","",58,N],[11,"next_u32","","",35,[[["self"]],["u32"]]],[11,"next_u64","","",35,[[["self"]],["u64"]]],[11,"fill_bytes","","",35,N],[11,"try_fill_bytes","","",35,N],[11,"from_seed","rand::prng::chacha","",24,N],[11,"from_rng","","",24,[[["r"]],["result",["error"]]]],[11,"from_seed","","",52,N],[11,"from_seed","rand::prng::hc128","",53,N],[11,"from_rng","","",53,[[["r"]],["result",["error"]]]],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",54,N],[11,"from_seed","rand::prng::isaac","",25,N],[11,"from_rng","","",25,[[["s"]],["result",["error"]]]],[11,"from_seed","","",55,N],[11,"from_rng","","",55,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::prng::isaac64","",26,N],[11,"from_rng","","",26,[[["s"]],["result",["error"]]]],[11,"from_seed","","",27,N],[11,"from_rng","","",27,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::prng","",28,N],[11,"from_rng","","",28,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::rngs","",56,N],[11,"from_rng","","",56,[[["r"]],["result",["error"]]]],[11,"from_seed","","",57,N],[11,"from_rng","","",57,[[["r"]],["result",["error"]]]],[11,"generate","rand::prng::chacha","",52,N],[11,"generate","rand::prng::hc128","",54,N],[11,"generate","rand::prng::isaac","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",55,[[["self"],["isaacarray"]]]],[11,"generate","rand::prng::isaac64","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",27,[[["self"],["isaacarray"]]]],[11,"should_retry","rand","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Normal"],[3,"LogNormal"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"WeightedChoice"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"],[3,"Alphanumeric"],[3,"OpenClosed01"],[3,"Open01"],[3,"StandardNormal"],[3,"Exp1"],[3,"DistIter"],[3,"Standard"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacCore"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[4,"ErrorKind","rand_core","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",0,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",0,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",0,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",0,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",1,N],[12,"msg","","The error message",1,N],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",2,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",2,N],[10,"generate","","Generate a new block of results.",2,N],[3,"BlockRng","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",4,N],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",6,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","rand_core::block","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from_seed","","",3,N],[11,"seed_from_u64","","",3,[[["u64"]],["blockrng"]]],[11,"from_rng","","",3,[[["s"]],["result",["blockrng","error"]]]],[11,"from_seed","","",4,N],[11,"seed_from_u64","","",4,[[["u64"]],["blockrng64"]]],[11,"from_rng","","",4,[[["s"]],["result",["blockrng64","error"]]]],[11,"description","rand_core","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"next_u32","rand_core::block","",4,[[["self"]],["u32"]]],[11,"next_u64","","",4,[[["self"]],["u64"]]],[11,"fill_bytes","","",4,N],[11,"try_fill_bytes","","",4,N],[11,"next_u32","","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"eq","rand_core","",0,[[["self"],["errorkind"]],["bool"]]],[11,"read","","",5,N],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"clone","rand_core::block","",4,[[["self"]],["blockrng64"]]],[11,"clone","","",3,[[["self"]],["blockrng"]]],[11,"fmt","rand_core","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"should_retry","rand_core","True if this kind of error may resolve itself on retry.",0,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",0,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",0,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",1,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",1,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",1,[[["self"]],["option",["box"]]]],[11,"new","rand_core::block","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,N],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",4,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",4,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",4,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",4,N]],"paths":[[4,"ErrorKind"],[3,"Error"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["regex"]={"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"NoExpand","","NoExpand indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,N],[5,"quote","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",N,[[["str"],["str"]],["result",["bool","error"]]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Splits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"new","","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,N],[11,"shortest_match","","Returns the end location of a match in the text given.",6,N],[11,"as_str","","Returns the original string of this regex.",6,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",6,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",6,[[["self"]],["usize"]]],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",7,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",7,[[["self"],["usize"]],["option"]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",7,[[["self"],["str"]],["option"]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",7,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",7,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",7,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",7,N],[11,"len","","Returns the number of captured groups.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",7,[[["self"]],["bool"]]],[11,"new","regex","Create a new regex set with the given regular expressions.",8,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",8,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",8,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",8,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",9,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",9,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",9,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",9,[[["self"]],["setmatchesiter"]]],[11,"new","regex::bytes","Create a new regex set with the given regular expressions.",10,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",10,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",10,N],[11,"len","","Returns the total number of regular expressions in this set.",10,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",11,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",11,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",11,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",11,[[["self"]],["setmatchesiter"]]],[11,"new","regex","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",12,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",12,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",12,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",12,[[["self"],["str"]],["option"]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",12,[[["self"],["str"]],["findmatches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",12,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",12,[[["self"],["str"]],["findcaptures"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",12,[[["self"],["str"]],["regexsplits"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",12,[[["self"],["str"],["usize"]],["regexsplitsn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",12,[[["self"],["str"],["r"]],["string"]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",12,[[["self"],["str"],["r"]],["string"]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",12,[[["self"],["str"],["usize"],["r"]],["string"]]],[11,"shortest_match","","Returns the end location of a match in the text given.",12,[[["self"],["str"]],["option",["usize"]]]],[11,"as_str","","Returns the original string of this regex.",12,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",12,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",12,[[["self"]],["usize"]]],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",13,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",13,[[["self"],["usize"]],["option",["str"]]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",13,[[["self"],["str"]],["option",["str"]]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",13,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",13,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",13,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",13,[[["self"],["str"]],["string"]]],[11,"len","","Returns the number of captured groups.",13,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",13,[[["self"]],["bool"]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",14,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",14,[[["self"]],["option",["cow"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"into_iter","","",23,[[["self"]],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","regex::bytes","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"into_iter","","",25,[[["self"]],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"into_iter","","",27,[[["self"]],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"reg_replace","regex","",0,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","",0,[[["self"]],["option",["cow"]]]],[11,"clone","regex::bytes","",6,[[["self"]],["regex"]]],[11,"clone","regex","",8,[[["self"]],["regexset"]]],[11,"clone","","",9,[[["self"]],["setmatches"]]],[11,"clone","","",16,[[["self"]],["setmatchesiter"]]],[11,"clone","regex::bytes","",10,[[["self"]],["regexset"]]],[11,"clone","","",11,[[["self"]],["setmatches"]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"clone","regex","",12,[[["self"]],["regex"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"next","regex::bytes","",27,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option",["captures"]]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"next","","",31,[[["self"]],["option",["option"]]]],[11,"size_hint","","",31,N],[11,"next","","",32,[[["self"]],["option",["option"]]]],[11,"next","","",33,[[["self"]],["option",["option"]]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"next","regex","",15,[[["self"]],["option",["usize"]]]],[11,"next","","",16,[[["self"]],["option",["usize"]]]],[11,"next","regex::bytes","",25,[[["self"]],["option",["usize"]]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"next","regex","",20,[[["self"]],["option",["option"]]]],[11,"size_hint","","",20,N],[11,"next","","",23,[[["self"]],["option",["str"]]]],[11,"next","","",24,[[["self"]],["option",["str"]]]],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"next","","",18,[[["self"]],["option",["option"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"next","","",21,[[["self"]],["option",["captures"]]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"eq","","",12,[[["self"],["regex"]],["bool"]]],[11,"next_back","","",15,[[["self"]],["option",["usize"]]]],[11,"next_back","","",16,[[["self"]],["option",["usize"]]]],[11,"next_back","regex::bytes","",25,[[["self"]],["option",["usize"]]]],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"into_iter","regex","",9,N],[11,"into_iter","regex::bytes","",11,N],[11,"fmt","regex","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"index","regex::bytes","",7,N],[11,"index","","",7,N],[11,"index","regex","",13,[[["self"],["usize"]],["str"]]],[11,"index","","",13,[[["self"],["str"]],["str"]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",6,[[["str"]],["result",["regex","error"]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",12,[[["str"]],["result",["regex","error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",14,[[["self"]],["option",["cow"]]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"Regex"],[3,"Captures"],[8,"Replacer"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"CaptureNames"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[0,"hir","regex_syntax","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"new","","Create a new Unicode scalar value range for a character class.",67,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",67,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",67,[[["self"]],["char"]]],[11,"new","","Create a new class from a sequence of ranges.",68,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",68,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",68,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",68,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",68,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",68,[[["self"]]]],[11,"negate","","Negate this byte class.",68,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",68,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",68,[[["self"]],["bool"]]],[11,"new","","Create a new byte range for a character class.",69,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",69,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",69,[[["self"]],["u8"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",70,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",70,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",70,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",71,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",71,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","regex_syntax::ast","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","regex_syntax::ast::parse","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","regex_syntax::ast::print","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","regex_syntax::hir","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"into_iter","","",72,[[["self"]],["i"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"into_iter","","",73,[[["self"]],["i"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","regex_syntax::hir::literal","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"from","regex_syntax::hir::print","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"from","regex_syntax::hir::translate","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"clone","regex_syntax::ast::parse","",42,[[["self"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"clone","regex_syntax::ast","",46,[[["self"]],["error"]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"clone","regex_syntax::hir::literal","",58,[[["self"]],["literals"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"clone","regex_syntax::hir::translate","",61,[[["self"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"clone","regex_syntax::hir","",64,[[["self"]],["error"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"clone","","",67,[[["self"]],["classunicoderange"]]],[11,"clone","","",68,[[["self"]],["classbytes"]]],[11,"clone","","",69,[[["self"]],["classbytesrange"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"clone","regex_syntax","",70,[[["self"]],["parserbuilder"]]],[11,"clone","","",71,[[["self"]],["parser"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"drop","regex_syntax::ast","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"drop","regex_syntax::hir","",65,[[["self"]]]],[11,"next","","",72,[[["self"]],["option",["classunicoderange"]]]],[11,"next","","",73,[[["self"]],["option",["classbytesrange"]]]],[11,"as_ref","regex_syntax::hir::literal","",59,N],[11,"partial_cmp","regex_syntax::ast","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"partial_cmp","regex_syntax::hir::literal","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"partial_cmp","regex_syntax::hir","",67,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"default","regex_syntax::ast::parse","",42,[[],["parserbuilder"]]],[11,"default","regex_syntax::hir::translate","",61,[[],["translatorbuilder"]]],[11,"default","regex_syntax::hir","",67,[[],["classunicoderange"]]],[11,"default","","",69,[[],["classbytesrange"]]],[11,"default","regex_syntax","",70,[[],["parserbuilder"]]],[11,"eq","regex_syntax::ast","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"eq","regex_syntax","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","regex_syntax::hir::literal","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"eq","regex_syntax::hir","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"eq","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"eq","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"eq","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"cmp","regex_syntax::ast","",1,[[["self"],["span"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"cmp","regex_syntax::hir::literal","",59,[[["self"],["literal"]],["ordering"]]],[11,"cmp","regex_syntax::hir","",67,[[["self"],["classunicoderange"]],["ordering"]]],[11,"cmp","","",69,[[["self"],["classbytesrange"]],["ordering"]]],[11,"deref","regex_syntax::hir::literal","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[11,"fmt","regex_syntax::ast","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast::parse","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast::print","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::literal","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::print","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::translate","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"description","regex_syntax::ast","",46,[[["self"]],["str"]]],[11,"description","regex_syntax","",0,[[["self"]],["str"]]],[11,"description","regex_syntax::hir","",64,[[["self"]],["str"]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"]]};
searchIndex["remove_dir_all"]={"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",N,[[["p"]],["result",["error"]]]]],"paths":[]};
searchIndex["riker"]={"doc":"","items":[[5,"load_config","riker","",N,[[],["config"]]],[0,"actor","","",N,N],[3,"ActorCell","riker::actor","",N,N],[3,"Context","","Provides context, including the actor system during actor execution.",N,N],[12,"myself","","",0,N],[12,"system","","",0,N],[12,"persistence","","",0,N],[3,"PersistenceConf","","",N,N],[12,"id","","",1,N],[12,"keyspace","","",1,N],[3,"ActorRef","","An actor reference exposes methods to interact with its underlying actor.",N,N],[12,"uri","","",2,N],[12,"cell","","",2,N],[3,"ActorUri","","An `ActorUri` represents the location of an actor, including the path and actor system host.",N,N],[12,"uid","","",3,N],[12,"name","","",3,N],[12,"path","","",3,N],[12,"host","","",3,N],[3,"ActorSelection","","A selection represents part of the actor heirarchy, allowing messages to be sent to all actors in the selection.",N,N],[3,"Props","","Provides instances of `ActorProducer` for use when creating Actors (`actor_of`).",N,N],[3,"Channel","","A specialized actor for providing Publish/Subscribe capabilities to users.",N,N],[3,"SystemChannel","","A specialized actor for providing Publish/Subscribe capabilities for system messages.",N,N],[3,"Topic","","Topics allow channel subscribers to filter messages by interest",N,N],[3,"All","","A channel topic representing all topics `*`",N,N],[3,"SysChannels","","",N,N],[12,"event_stream","","",4,N],[12,"dead_letters","","",4,N],[3,"TryMsgError","","Error type when an `try_tell` fails on `Option<ActorRef<Msg>>`",N,N],[12,"msg","","",5,N],[3,"RestartError","","Error type when an actor fails to restart.",N,N],[4,"Strategy","","Supervision strategy",N,N],[13,"Stop","","Stop the child actor",6,N],[13,"Restart","","Attempt to restart the child actor",6,N],[13,"Escalate","","Escalate the failure to a parent",6,N],[4,"SysTopic","","System topics used by the `event_stream` channel",N,N],[13,"ActorCreated","","",7,N],[13,"ActorTerminated","","",7,N],[13,"ActorRestarted","","",7,N],[4,"CreateError","","Error type when an actor fails to start during `actor_of`.",N,N],[13,"Panicked","","",8,N],[13,"InvalidName","","",8,N],[13,"AlreadyExists","","",8,N],[5,"dead_letter","","",N,[[["actorref"],["option",["string"]],["string"],["actormsg"]]]],[11,"new","","Constructs a new `ActorCell`",9,[[["actorid"],["actoruri"],["option",["actorref"]],["kernelref"],["actorsystem"],["option",["persistenceconf"]],["option",["mailboxsender"]]],["actorcell"]]],[11,"new","","",0,[[["actorref"],["actorsystem"],["persistence"],["kernelref"]],["context"]]],[11,"myself","","Returns the `ActorRef` of the current actor.",0,[[["self"]],["actorref"]]],[11,"persist_event","","Persists an event to the event store.",0,[[["self"],["msg"]]]],[11,"name","","Actor name.",2,[[["self"]],["str"]]],[11,"path","","Actor path.",2,[[["self"]],["string"]]],[11,"is_root","","",2,[[["self"]],["bool"]]],[11,"parent","","Parent reference.",2,[[["self"]],["actorref"]]],[11,"user_root","","",2,[[["self"]],["actorref"]]],[11,"children","","Iterator over children references.",2,[[["self"]],["box",["iterator"]]]],[11,"new","","",10,[[["option",["actorref"]]],["boxactor"]]],[11,"props","","",10,[[],["boxactorprod"]]],[11,"new","","",11,[[],["boxactor"]]],[11,"new","","Creates an `ActorProducer` with no factory method parameters.",12,[[["box",["fn"]]],["arc",["mutex"]]]],[11,"new_args","","Creates an `ActorProducer` with one or more factory method parameters.",12,[[["box",["fn"]],["args"]],["arc",["mutex"]]]],[11,"new","","",13,[[["actorref"],["str"]],["result",["actorselection","invalidpath"]]]],[11,"temp","","",3,[[],["actoruri"]]],[6,"BoxActor","","The actor trait object",N,N],[6,"ActorId","","",N,N],[6,"BoxActorProd","","A `Clone`, `Send` and `Sync` `ActorProducer`",N,N],[6,"MsgResult","","",N,N],[8,"Actor","","An Actor represents a struct that will be scheduled for execution when it is sent a message.",N,N],[16,"Msg","","",14,N],[11,"pre_start","","Invoked when an actor is being started by the system.",14,[[["self"],["context"]]]],[11,"post_start","","Invoked after an actor has started.",14,[[["self"],["context"]]]],[11,"post_stop","","Invoked after an actor has been stopped.",14,[[["self"]]]],[10,"receive","","Invoked when an actor receives a message",14,N],[11,"other_receive","","Invoked when an actor receives a Riker predefined message",14,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"system_receive","","Invoked when an actor receives a Riker system message",14,[[["self"],["context"],["systemmsg"],["option",["actorref"]]]]],[11,"persistence_conf","","Return a Some(PersistenceConf) to enable actor persistence.",14,[[["self"]],["option",["persistenceconf"]]]],[11,"apply_event","","Invoked after an event is successfully inserted into the event store.",14,N],[11,"replay_event","","Invoked for each event when the actor is recovering.",14,N],[11,"supervisor_strategy","","Return a supervisor strategy that will be used when handling failed child actors.",14,[[["self"]],["strategy"]]],[8,"CellPublic","","`ActorCell` public API.",N,N],[16,"Msg","","",15,N],[10,"myself","","Returns the actor's `ActorRef`",15,[[["self"]],["actorref"]]],[10,"parent","","Returns the actor's parent `ActorRef`",15,[[["self"]],["actorref"]]],[10,"children","","Returns an iterator for the actor's children references",15,[[["self"]],["box",["iterator"]]]],[10,"user_root","","",15,[[["self"]],["actorref"]]],[10,"is_root","","",15,[[["self"]],["bool"]]],[8,"ActorRefFactory","","Produces `ActorRef`s. `actor_of` blocks on the current thread until the actor has successfully started or failed to start.",N,N],[16,"Msg","","",16,N],[10,"actor_of","","",16,[[["self"],["boxactorprod"],["str"]],["result",["actorref","createerror"]]]],[10,"stop","","",16,[[["self"],["actorref"]]]],[8,"TmpActorRefFactory","","Produces `ActorRef`s under the `temp` guardian actor.",N,N],[16,"Msg","","",17,N],[10,"tmp_actor_of","","",17,[[["self"],["boxactorprod"]],["result",["actorref","createerror"]]]],[8,"ActorSelectionFactory","","",N,N],[16,"Msg","","",18,N],[10,"select","","",18,[[["self"],["str"]],["result",["actorselection","invalidpath"]]]],[8,"ActorProducer","","Represents the underlying Actor factory function for creating instances of `Actor`.",N,N],[16,"Actor","","",19,N],[10,"produce","","Produces an instance of an `Actor`.",19,N],[8,"ActorArgs","","",N,N],[8,"CellInternal","","`ActorCell` internal API.",N,N],[16,"Msg","","",20,N],[10,"dead_letters","","Return the system's dead letters reference.",20,[[["self"]],["actorref"]]],[10,"persistence_conf","","Return the actor's persistence configuration.",20,[[["self"]],["option",["persistenceconf"]]]],[10,"is_persisting","","Returns true if the actor is currently in a state of persisting.",20,[[["self"]],["bool"]]],[10,"set_persisting","","Sets the persisting status of the actor.",20,[[["self"],["bool"]]]],[10,"identify","","Invoked when an actor receives an `Identify` message.",20,[[["self"],["option",["actorref"]]]]],[10,"add_child","","Adds a child under this actor.",20,[[["self"],["str"],["actorref"]]]],[10,"stop","","Send an `ActorCmd::Stop` to the given actor.",20,[[["self"],["actorref"]]]],[10,"receive_cmd","","Invoked when the actor receives a command.",20,[[["self"],["actorcmd"],["option"]]]],[10,"terminate","","Terminate the actor associated with this `ActorCell`.",20,[[["self"],["option"]]]],[10,"restart","","Restart the actor associated with this `ActorCell`",20,[[["self"]]]],[10,"death_watch","","Invoked when a child actor is terminated.",20,[[["self"],["actorref"],["option"]]]],[10,"handle_failure","","Invoked when a child actor fails (panics).",20,[[["self"],["actorref"],["strategy"]]]],[10,"restart_child","","Invoked when the supervision strategy restarts a child actor.",20,[[["self"],["actorref"]]]],[10,"escalate_failure","","Invoked when the supervision strategy escalates an actor's failure.",20,[[["self"]]]],[10,"is_child","","",20,[[["self"],["actorref"]],["bool"]]],[10,"load_events","","Invoked to query an actor's events during actor start.",20,[[["self"],["option"]],["bool"]]],[10,"replay","","Invoked during actor start to complete actor initialization.",20,[[["self"],["context"],["vec"],["option"]]]],[8,"Tell","","",N,N],[16,"Msg","","",21,N],[10,"tell","","Implement to provide message routing to actors, e.g. `ActorRef` and `ActorSelection`",21,[[["self"],["t"],["option",["actorref"]]]]],[8,"TryTell","","Implement to provide possible message routing to actors, e.g. `Option<ActorRef>`",N,N],[16,"Msg","","",22,N],[10,"try_tell","","",22,[[["self"],["t"],["option",["actorref"]]],["result",["trymsgerror"]]]],[8,"SysTell","","Implement to provide system message routing to actors, e.g. `ActorRef` and `ActorSelection`",N,N],[16,"Msg","","",23,N],[10,"sys_tell","","",23,[[["self"],["systemmsg"],["option",["actorref"]]]]],[11,"new","","",5,[[["t"]],["self"]]],[0,"futures_util","riker","",N,N],[3,"DispatchHandle","riker::futures_util","",N,N],[12,"inner","","",24,N],[3,"MySender","","",N,N],[12,"fut","","",25,N],[12,"tx","","",25,N],[3,"Spawn","","A future representing the completion of task spawning.",N,N],[5,"spawn","","Spawn a task onto the default executor.",N,[[["f"]],["spawn"]]],[0,"kernel","riker","",N,N],[3,"KernelRef","riker::kernel","",N,N],[12,"kernel_tx","","",26,N],[12,"timer_tx","","",26,N],[3,"Kernel","","",N,N],[3,"ActorDock","","",N,N],[12,"actor","","",27,N],[12,"cell","","",27,N],[12,"actor_ref","","",27,N],[12,"mailbox_sender","","",27,N],[12,"mailbox","","",27,N],[12,"props","","",27,N],[3,"SysActors","","",N,N],[12,"root","","",28,N],[12,"user","","",28,N],[12,"sysm","","",28,N],[12,"temp","","",28,N],[3,"Mailbox","","",N,N],[3,"MailboxSender","","",N,N],[12,"uid","","",29,N],[3,"MailboxConfig","","",N,N],[12,"msg_process_limit","","",30,N],[3,"BigBang","","",N,N],[12,"root","","",31,N],[12,"user","","",31,N],[12,"sysm","","",31,N],[12,"temp","","",31,N],[3,"QueueWriter","","",N,N],[3,"QueueReader","","",N,N],[4,"KernelMsg","","",N,N],[13,"Initialize","","",32,N],[13,"CreateActor","","",32,N],[13,"TerminateActor","","",32,N],[13,"RestartActor","","",32,N],[13,"ParkActor","","",32,N],[13,"UnparkActor","","",32,N],[13,"RunFuture","","",32,N],[13,"Stop","","",32,N],[5,"mailbox","","",N,N],[5,"run_mailbox","","",N,[[["mailbox"],["actorcell"],["option",["boxactor"]]]]],[5,"flush_to_deadletters","","",N,[[["mailbox"],["actorref"],["actoruri"]]]],[5,"create_actor_ref","","",N,[[["actorref"],["actoruri"],["kernelref"],["actorsystem"],["option",["mailboxsender"]],["option",["persistenceconf"]]],["actorref"]]],[5,"queue","","",N,N],[11,"new","","",33,[[["config"]],["kernel"]]],[11,"start","","",33,N],[11,"dispatch","","",26,[[["self"],["envelope"],["mailboxsender"]],["msgresult",["envelope"]]]],[11,"dispatch_sys","","",26,[[["self"],["systemenvelope"],["mailboxsender"]],["msgresult",["systemenvelope"]]]],[11,"schedule_actor","","",26,[[["self"],["mbs"]]]],[11,"create_actor","","",26,[[["self"],["boxactorprod"],["str"],["actorref"]],["result",["actorref","createerror"]]]],[11,"park_actor","","",26,[[["self"],["actorid"],["option",["boxactor"]]]]],[11,"terminate_actor","","",26,[[["self"],["actorid"]]]],[11,"restart_actor","","",26,[[["self"],["actorid"]]]],[11,"stop_kernel","","",26,[[["self"]]]],[11,"execute","","",26,[[["self"],["f"]],["dispatchhandle"]]],[11,"schedule","","",26,[[["self"],["job"]]]],[11,"try_enqueue","","",29,[[["self"],["enqueued"]],["result",["enqueueerror"]]]],[11,"try_sys_enqueue","","",29,[[["self"],["enqueued"]],["result",["enqueueerror"]]]],[11,"is_scheduled","","",29,[[["self"]],["bool"]]],[11,"dequeue","","",34,[[["self"]],["enqueued"]]],[11,"try_dequeue","","",34,[[["self"]],["result",["enqueued","queueempty"]]]],[11,"sys_try_dequeue","","",34,[[["self"]],["result",["enqueued","queueempty"]]]],[11,"has_msgs","","",34,[[["self"]],["bool"]]],[11,"has_sys_msgs","","",34,[[["self"]],["bool"]]],[11,"is_scheduled","","",34,[[["self"]],["bool"]]],[11,"new","","",31,[[["kernelref"],["actorsystem"]],["self"]]],[11,"try_enqueue","","",35,[[["self"],["enqueued"]],["result",["enqueueerror"]]]],[11,"dequeue","","",36,[[["self"]],["enqueued"]]],[11,"try_dequeue","","",36,[[["self"]],["result",["enqueued","queueempty"]]]],[11,"has_msgs","","",36,[[["self"]],["bool"]]],[8,"Dispatcher","","",N,N],[10,"new","","",37,[[["config"],["bool"]],["self"]]],[10,"execute","","",37,[[["self"],["f"]]]],[8,"MailboxSchedule","","",N,N],[16,"Msg","","",38,N],[10,"uid","","",38,[[["self"]],["actorid"]]],[10,"set_scheduled","","",38,[[["self"],["bool"]]]],[0,"model","riker","",N,N],[8,"Model","riker::model","Riker's system and module configuration.",N,N],[16,"Msg","","The message type used throughout the system. `Actor.receive` expects this type",39,N],[16,"Dis","","Dispatcher executes actors and futures",39,N],[16,"Log","","Logger provides global logging, e.g. info!(\"hello\");",39,N],[16,"Ded","","Dead letters subscribes to the dead letters channel",39,N],[16,"Tmr","","Timer provides message scheduling, e.g. `ctx.schedule_once`",39,N],[16,"Evs","","Event store provides the storage system for events/messages",39,N],[16,"Tcp","","",39,N],[16,"Udp","","",39,N],[0,"protocol","riker","",N,N],[3,"Envelope","riker::protocol","Wraps message and sender",N,N],[12,"sender","","",40,N],[12,"msg","","",40,N],[3,"SystemEnvelope","","Wraps system message and sender",N,N],[12,"sender","","",41,N],[12,"msg","","",41,N],[3,"Identify","","Message type to request actor info",N,N],[3,"Info","","Message type received in response to `Identify`",N,N],[3,"DeadLetter","","",N,N],[12,"msg","","",42,N],[12,"sender","","",42,N],[12,"recipient","","",42,N],[4,"ActorMsg","","Standard message type. All actor messages are `ActorMsg`",N,N],[13,"User","","User message type",43,N],[13,"Channel","","Channel messages",43,N],[13,"IO","","IO messages (IoManager)",43,N],[13,"ES","","Event sourcing messages",43,N],[13,"CQ","","CQRS messages",43,N],[13,"Identify","","Request actor info",43,N],[13,"Info","","Response to Identify",43,N],[13,"DeadLetter","","Dead letter messages",43,N],[13,"Tick","","A utility message for user to schedule actor execution",43,N],[4,"ChannelMsg","","",N,N],[13,"Publish","","Publish message",44,N],[13,"PublishEvent","","Publish system event",44,N],[13,"PublishDeadLetter","","Publish dead letter",44,N],[13,"Subscribe","","Subscribe given `ActorRef` to a topic on a channel",44,N],[13,"Unsubscribe","","Unsubscribe the given `ActorRef` from a topic on a channel",44,N],[13,"UnsubscribeAll","","Unsubscribe the given `ActorRef` from all topics on a channel",44,N],[4,"IOMsg","","",N,N],[13,"Manage","","Register a connection manager for the given `IoType`",45,N],[13,"Bind","","Bind on an IO type, e.g. TCP Socket",45,N],[13,"Bound","","Received when an IO type is bound, e.g. TCP Socket",45,N],[13,"Unbind","","Unbind an IO type, e.g. TCP Socket",45,N],[13,"Unbound","","Received when an IO type is unbound",45,N],[13,"Connect","","Connect to an `IoAddress`, e.g. TCP/IP Address",45,N],[13,"Connected","","Received when an IO type is connected, e.g. TCP/IP Address",45,N],[13,"Register","","Register given actor to receive data on a connected `IoAddress`",45,N],[13,"Close","","Close the IO resource, e.g. disconnect from TCP/IP Address",45,N],[13,"Closed","","Received when an IO resource is closed",45,N],[13,"Ready","","IO resource is ready to read or write",45,N],[13,"Write","","Write given bytes to IO resource",45,N],[13,"Send","","Currently not used",45,N],[13,"TryRead","","???",45,N],[13,"Received","","Received when IO resource reads bytes",45,N],[13,"Flush","","Flush any cached data",45,N],[13,"Failed","","Received when an IO operation failed, e.g. `Bind` and `Connect`",45,N],[4,"ESMsg","","",N,N],[13,"Persist","","Persist given Evt to the event store. (Event to store, Unique ID, Keyspace)",46,N],[13,"Load","","Load all events from the event store. (Unique ID, Keyspace)",46,N],[13,"LoadResult","","Received when loading events",46,N],[4,"CQMsg","","",N,N],[13,"Cmd","","CQRS command message",47,N],[4,"SystemMsg","","",N,N],[13,"ActorInit","","",48,N],[13,"ActorCmd","","",48,N],[13,"Event","","",48,N],[13,"Failed","","",48,N],[13,"Persisted","","",48,N],[13,"Replay","","",48,N],[13,"Log","","",48,N],[4,"ActorCmd","","",N,N],[13,"Stop","","",49,N],[13,"Restart","","",49,N],[4,"SystemEvent","","",N,N],[13,"ActorTerminated","","An actor was terminated",50,N],[13,"ActorRestarted","","An actor was restarted",50,N],[13,"ActorCreated","","An actor was started",50,N],[4,"SystemEventType","","",N,N],[13,"ActorTerminated","","",51,N],[13,"ActorRestarted","","",51,N],[13,"ActorCreated","","",51,N],[8,"Message","","",N,N],[0,"system","riker","",N,N],[3,"ActorSystem","riker::system","The actor runtime and common services coordinator",N,N],[12,"proto","","",52,N],[12,"kernel","","",52,N],[12,"event_store","","",52,N],[12,"sys_channels","","",52,N],[3,"Evt","","",N,N],[12,"date","","",53,N],[12,"msg","","",53,N],[3,"EsManager","","",N,N],[3,"NoEventStore","","",N,N],[3,"LogEntry","","",N,N],[12,"level","","",54,N],[12,"module","","",54,N],[12,"body","","",54,N],[3,"Io","","",N,N],[3,"IoType","","",N,N],[3,"Tcp","","",N,N],[3,"Udp","","",N,N],[3,"IoAddress","","",N,N],[12,"0","","",55,N],[3,"NoIo","","",N,N],[3,"OnceJob","","",N,N],[12,"id","","",56,N],[12,"send_at","","",56,N],[12,"receiver","","",56,N],[12,"sender","","",56,N],[12,"msg","","",56,N],[3,"RepeatJob","","",N,N],[12,"id","","",57,N],[12,"send_at","","",57,N],[12,"interval","","",57,N],[12,"receiver","","",57,N],[12,"sender","","",57,N],[12,"msg","","",57,N],[4,"Job","","",N,N],[13,"Once","","",58,N],[13,"Repeat","","",58,N],[13,"Cancel","","",58,N],[4,"SystemError","","",N,N],[13,"ModuleFailed","","",59,N],[13,"InvalidName","","",59,N],[5,"query","","",N,[[["string"],["string"],["actorref"],["ctx"]],["box",["future"]]]],[11,"props","","",60,[[],["boxactorprod"]]],[11,"actor","","",60,[[],["boxactor"]]],[11,"props","","",61,[[["config"]],["boxactorprod"]]],[11,"new","","",53,[[["msg"]],["self"]]],[11,"send","","",56,[[["self"]]]],[11,"send","","",57,[[["self"]]]],[11,"new","","Create a new `ActorSystem` instance",52,[[["mdl"]],["result",["actorsystem","systemerror"]]]],[11,"with_name","","Create a new `ActorSystem` instance with provided name",52,[[["mdl"],["str"]],["result",["actorsystem","systemerror"]]]],[11,"with_config","","Create a new `ActorSystem` instance bypassing default config behavior",52,[[["mdl"],["str"],["config"]],["result",["actorsystem","systemerror"]]]],[11,"shutdown","","Shutdown the actor system",52,[[["self"]],["shutdown"]]],[11,"start_date","","Returns the system start date",52,[[["self"]],["datetime"]]],[11,"uptime","","Returns the number of seconds since the system started",52,[[["self"]],["u64"]]],[11,"host","","Returns the hostname used when the system started",52,[[["self"]],["arc",["string"]]]],[11,"id","","Returns the UUID assigned to the system",52,[[["self"]],["uuid"]]],[11,"name","","Returns the name of the system",52,[[["self"]],["string"]]],[11,"print_tree","","",52,[[["self"]]]],[11,"user_root","","Returns the user root actor reference",52,[[["self"]],["actorref"]]],[11,"system_root","","Returns the system root actor reference",52,[[["self"]],["actorref"]]],[11,"temp_root","","Reutrns the temp root actor reference",52,[[["self"]],["actorref"]]],[11,"default_stream","","Returns a reference to the default stream channel",52,[[["self"]],["actorref"]]],[11,"event_stream","","Returns a reference to the event stream channel",52,[[["self"]],["actorref"]]],[11,"dead_letters","","Returns a reference to the dead letters channel",52,[[["self"]],["actorref"]]],[11,"io_manager","","Returns a reference to the IO Manager",52,[[["self"]],["actorref"]]],[11,"config","","Returns the `Config` used by the system",52,[[["self"]],["config"]]],[11,"sys_actor_of","","Create an actor under the system root",52,[[["self"],["boxactorprod"],["str"]],["result",["actorref","createerror"]]]],[8,"EventStore","","",N,N],[16,"Msg","","",62,N],[10,"new","","",62,[[["config"]],["self"]]],[10,"insert","","",62,[[["self"],["string"],["string"],["evt"]]]],[10,"load","","",62,[[["self"],["string"],["string"]],["vec"]]],[8,"LoggerProps","","",N,N],[16,"Msg","","",63,N],[10,"props","","",63,[[["config"]],["boxactorprod"]]],[8,"DeadLetterProps","","",N,N],[16,"Msg","","",64,N],[10,"props","","",64,[[["actorref"]],["boxactorprod"]]],[8,"IoManagerProps","","",N,N],[16,"Msg","","",65,N],[10,"props","","",65,[[["config"]],["option",["boxactorprod"]]]],[8,"Timer","","",N,N],[16,"Msg","","",66,N],[10,"schedule","","",66,[[["self"],["duration"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"schedule_once","","",66,[[["self"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"schedule_at_time","","",66,[[["self"],["datetime",["utc"]],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"cancel_schedule","","",66,[[["self"],["uuid"]]]],[8,"TimerFactory","","",N,N],[16,"Msg","","",67,N],[10,"new","","",67,[[["config"],["bool"]],["sender",["job"]]]],[0,"actors","riker","",N,N],[3,"ActorSystem","riker::actors","The actor runtime and common services coordinator",N,N],[12,"proto","","",52,N],[12,"kernel","","",52,N],[12,"event_store","","",52,N],[12,"sys_channels","","",52,N],[3,"Evt","","",N,N],[12,"date","","",53,N],[12,"msg","","",53,N],[8,"Timer","","",N,N],[16,"Msg","","",66,N],[10,"schedule","","",66,[[["self"],["duration"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"schedule_once","","",66,[[["self"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"schedule_at_time","","",66,[[["self"],["datetime",["utc"]],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[10,"cancel_schedule","","",66,[[["self"],["uuid"]]]],[8,"ExecutionContext","riker","",N,N],[10,"execute","","",68,[[["self"],["f"]],["dispatchhandle"]]],[11,"from","riker::actor","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"equivalent","","",69,[[["self"],["k"]],["bool"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","riker::futures_util","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into_future","","",24,[[["self"]],["f"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into_future","","",25,[[["self"]],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"from","riker::kernel","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","riker::protocol","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","riker::system","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"equivalent","","",76,[[["self"],["k"]],["bool"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"pre_start","riker::actor","",10,[[["self"],["context"]]]],[11,"other_receive","","",10,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"system_receive","","",10,[[["self"],["context"],["systemmsg"],["option",["actorref"]]]]],[11,"receive","","",10,[[["self"],["context"],["msg"],["option",["actorref"]]]]],[11,"pre_start","","",11,[[["self"],["context"]]]],[11,"other_receive","","",11,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"system_receive","","",11,[[["self"],["context"],["systemmsg"],["option",["actorref"]]]]],[11,"receive","","",11,[[["self"],["context"],["msg"],["option",["actorref"]]]]],[11,"other_receive","riker::system","",60,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"receive","","",60,[[["self"],["context"],["msg"],["option",["actorref"]]]]],[11,"other_receive","","",61,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"receive","","",61,N],[11,"dead_letters","riker::actor","",9,[[["self"]],["actorref"]]],[11,"persistence_conf","","",9,[[["self"]],["option",["persistenceconf"]]]],[11,"is_persisting","","",9,[[["self"]],["bool"]]],[11,"set_persisting","","",9,[[["self"],["bool"]]]],[11,"identify","","",9,[[["self"],["option",["actorref"]]]]],[11,"add_child","","",9,[[["self"],["str"],["actorref"]]]],[11,"stop","","",9,[[["self"],["actorref"]]]],[11,"receive_cmd","","",9,[[["self"],["actorcmd"],["option"]]]],[11,"terminate","","",9,[[["self"],["option"]]]],[11,"restart","","",9,[[["self"]]]],[11,"death_watch","","",9,[[["self"],["actorref"],["option"]]]],[11,"handle_failure","","",9,[[["self"],["actorref"],["strategy"]]]],[11,"restart_child","","",9,[[["self"],["actorref"]]]],[11,"escalate_failure","","",9,[[["self"]]]],[11,"is_child","","",9,[[["self"],["actorref"]],["bool"]]],[11,"load_events","","",9,[[["self"],["option"]],["bool"]]],[11,"replay","","",9,[[["self"],["context"],["vec"],["option"]]]],[11,"myself","","",9,[[["self"]],["actorref"]]],[11,"parent","","",9,[[["self"]],["actorref"]]],[11,"children","","",9,[[["self"]],["box",["iterator"]]]],[11,"user_root","","",9,[[["self"]],["actorref"]]],[11,"is_root","","",9,[[["self"]],["bool"]]],[11,"send_msg","","",9,[[["self"],["envelope"]],["msgresult",["envelope"]]]],[11,"send_sys_msg","","",9,[[["self"],["systemenvelope"]],["msgresult",["systemenvelope"]]]],[11,"actor_of","","",0,[[["self"],["boxactorprod"],["str"]],["result",["actorref","createerror"]]]],[11,"stop","","",0,[[["self"],["actorref"]]]],[11,"actor_of","riker::system","",52,[[["self"],["boxactorprod"],["str"]],["result",["actorref","createerror"]]]],[11,"stop","","",52,[[["self"],["actorref"]]]],[11,"tmp_actor_of","riker::actor","",9,[[["self"],["boxactorprod"]],["result",["actorref","createerror"]]]],[11,"tmp_actor_of","","",0,[[["self"],["boxactorprod"]],["result",["actorref","createerror"]]]],[11,"tmp_actor_of","riker::system","",52,[[["self"],["boxactorprod"]],["result",["actorref","createerror"]]]],[11,"select","riker::actor","",0,[[["self"],["str"]],["result",["actorselection","invalidpath"]]]],[11,"select","riker::system","",52,[[["self"],["str"]],["result",["actorselection","invalidpath"]]]],[11,"tell","riker::actor","",2,[[["self"],["t"],["option",["actorref"]]]]],[11,"tell","","",13,[[["self"],["t"],["option",["actorref"]]]]],[11,"sys_tell","","",2,[[["self"],["systemmsg"],["option",["actorref"]]]]],[11,"sys_tell","","",13,[[["self"],["systemmsg"],["option",["actorref"]]]]],[11,"uid","riker::kernel","",29,[[["self"]],["actorid"]]],[11,"set_scheduled","","",29,[[["self"],["bool"]]]],[11,"uid","","",34,[[["self"]],["actorid"]]],[11,"set_scheduled","","",34,[[["self"],["bool"]]]],[11,"props","riker::system","",79,[[["config"]],["option",["boxactorprod"]]]],[11,"new","","",75,[[["config"]],["self"]]],[11,"insert","","",75,[[["self"],["string"],["string"],["evt"]]]],[11,"load","","",75,[[["self"],["string"],["string"]],["vec"]]],[11,"schedule","riker::actor","",0,[[["self"],["duration"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"schedule_once","","",0,[[["self"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"schedule_at_time","","",0,[[["self"],["datetime",["utc"]],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"cancel_schedule","","",0,[[["self"],["uuid"]]]],[11,"schedule","riker::system","",52,[[["self"],["duration"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"schedule_once","","",52,[[["self"],["duration"],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"schedule_at_time","","",52,[[["self"],["datetime",["utc"]],["actorref"],["option",["actorref"]],["t"]],["uuid"]]],[11,"cancel_schedule","","",52,[[["self"],["uuid"]]]],[11,"execute","riker::actor","",9,[[["self"],["f"]],["dispatchhandle"]]],[11,"execute","","",0,[[["self"],["f"]],["dispatchhandle"]]],[11,"execute","riker::system","",52,[[["self"],["f"]],["dispatchhandle"]]],[11,"clone","riker::actor","",9,[[["self"]],["actorcell"]]],[11,"clone","","",1,[[["self"]],["persistenceconf"]]],[11,"clone","","",2,[[["self"]],["actorref"]]],[11,"clone","","",69,[[["self"]],["topic"]]],[11,"clone","","",4,[[["self"]],["syschannels"]]],[11,"clone","","",3,[[["self"]],["actoruri"]]],[11,"clone","riker::kernel","",28,[[["self"]],["sysactors"]]],[11,"clone","","",26,[[["self"]],["kernelref"]]],[11,"clone","","",29,[[["self"]],["mailboxsender"]]],[11,"clone","","",34,[[["self"]],["mailbox"]]],[11,"clone","","",30,[[["self"]],["mailboxconfig"]]],[11,"clone","","",35,[[["self"]],["queuewriter"]]],[11,"clone","riker::protocol","",40,[[["self"]],["envelope"]]],[11,"clone","","",41,[[["self"]],["systemenvelope"]]],[11,"clone","","",43,[[["self"]],["actormsg"]]],[11,"clone","","",44,[[["self"]],["channelmsg"]]],[11,"clone","","",45,[[["self"]],["iomsg"]]],[11,"clone","","",46,[[["self"]],["esmsg"]]],[11,"clone","","",47,[[["self"]],["cqmsg"]]],[11,"clone","","",74,[[["self"]],["info"]]],[11,"clone","","",48,[[["self"]],["systemmsg"]]],[11,"clone","","",49,[[["self"]],["actorcmd"]]],[11,"clone","","",50,[[["self"]],["systemevent"]]],[11,"clone","","",51,[[["self"]],["systemeventtype"]]],[11,"clone","","",42,[[["self"]],["deadletter"]]],[11,"clone","riker::system","",76,[[["self"]],["iotype"]]],[11,"clone","","",55,[[["self"]],["ioaddress"]]],[11,"clone","","",54,[[["self"]],["logentry"]]],[11,"clone","","",53,[[["self"]],["evt"]]],[11,"clone","","",75,[[["self"]],["noeventstore"]]],[11,"clone","","",52,[[["self"]],["actorsystem"]]],[11,"from","riker::actor","",0,[[["actorcell"]],["self"]]],[11,"from","","",69,[[["str"]],["self"]]],[11,"from","","",69,[[["string"]],["self"]]],[11,"from","","",69,[[["systemevent"]],["self"]]],[11,"from","","",69,[[["all"]],["self"]]],[11,"from","","",69,[[["systopic"]],["self"]]],[11,"from","riker::kernel","",30,[[["config"]],["self"]]],[11,"from","riker::system","",76,[[["str"]],["self"]]],[11,"from","","",76,[[["tcp"]],["self"]]],[11,"from","","",76,[[["udp"]],["self"]]],[11,"from","","",55,[[["socketaddr"]],["ioaddress"]]],[11,"from","","",54,[[["record"]],["self"]]],[11,"into","riker::protocol","",44,[[["self"]],["actormsg"]]],[11,"into","","",45,[[["self"]],["actormsg"]]],[11,"into","","",46,[[["self"]],["actormsg"]]],[11,"into","","",47,[[["self"]],["actormsg"]]],[11,"into","","",73,[[["self"]],["actormsg"]]],[11,"into","","",74,[[["self"]],["actormsg"]]],[11,"into","","",42,[[["self"]],["actormsg"]]],[11,"eq","riker::actor","",2,[[["self"],["actorref"]],["bool"]]],[11,"eq","","",69,[[["self"],["topic"]],["bool"]]],[11,"ne","","",69,[[["self"],["topic"]],["bool"]]],[11,"eq","","",3,[[["self"],["actoruri"]],["bool"]]],[11,"eq","riker::system","",76,[[["self"],["iotype"]],["bool"]]],[11,"ne","","",76,[[["self"],["iotype"]],["bool"]]],[11,"eq","","",55,[[["self"],["ioaddress"]],["bool"]]],[11,"ne","","",55,[[["self"],["ioaddress"]],["bool"]]],[11,"fmt","riker::actor","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::system","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::actor","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::futures_util","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::kernel","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::protocol","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","riker::system","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"hash","riker::actor","",69,[[["self"],["h"]]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"hash","riker::system","",76,[[["self"],["h"]]]],[11,"from_str","","",55,[[["str"]],["result"]]],[11,"description","riker::actor","",5,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"description","","",71,[[["self"]],["str"]]],[11,"description","riker::system","",59,[[["self"]],["str"]]],[11,"poll","riker::futures_util","",24,[[["self"],["context"]],["poll"]]],[11,"poll","","",25,[[["self"],["context"]],["poll",["never"]]]],[11,"poll","","",72,[[["self"],["context"]],["poll",["never"]]]],[11,"pre_start","riker::actor","Invoked when an actor is being started by the system.",14,[[["self"],["context"]]]],[11,"post_start","","Invoked after an actor has started.",14,[[["self"],["context"]]]],[11,"post_stop","","Invoked after an actor has been stopped.",14,[[["self"]]]],[11,"other_receive","","Invoked when an actor receives a Riker predefined message",14,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"system_receive","","Invoked when an actor receives a Riker system message",14,[[["self"],["context"],["systemmsg"],["option",["actorref"]]]]],[11,"persistence_conf","","Return a Some(PersistenceConf) to enable actor persistence.",14,[[["self"]],["option",["persistenceconf"]]]],[11,"apply_event","","Invoked after an event is successfully inserted into the event store.",14,N],[11,"replay_event","","Invoked for each event when the actor is recovering.",14,N],[11,"supervisor_strategy","","Return a supervisor strategy that will be used when handling failed child actors.",14,[[["self"]],["strategy"]]]],"paths":[[3,"Context"],[3,"PersistenceConf"],[3,"ActorRef"],[3,"ActorUri"],[3,"SysChannels"],[3,"TryMsgError"],[4,"Strategy"],[4,"SysTopic"],[4,"CreateError"],[3,"ActorCell"],[3,"Channel"],[3,"SystemChannel"],[3,"Props"],[3,"ActorSelection"],[8,"Actor"],[8,"CellPublic"],[8,"ActorRefFactory"],[8,"TmpActorRefFactory"],[8,"ActorSelectionFactory"],[8,"ActorProducer"],[8,"CellInternal"],[8,"Tell"],[8,"TryTell"],[8,"SysTell"],[3,"DispatchHandle"],[3,"MySender"],[3,"KernelRef"],[3,"ActorDock"],[3,"SysActors"],[3,"MailboxSender"],[3,"MailboxConfig"],[3,"BigBang"],[4,"KernelMsg"],[3,"Kernel"],[3,"Mailbox"],[3,"QueueWriter"],[3,"QueueReader"],[8,"Dispatcher"],[8,"MailboxSchedule"],[8,"Model"],[3,"Envelope"],[3,"SystemEnvelope"],[3,"DeadLetter"],[4,"ActorMsg"],[4,"ChannelMsg"],[4,"IOMsg"],[4,"ESMsg"],[4,"CQMsg"],[4,"SystemMsg"],[4,"ActorCmd"],[4,"SystemEvent"],[4,"SystemEventType"],[3,"ActorSystem"],[3,"Evt"],[3,"LogEntry"],[3,"IoAddress"],[3,"OnceJob"],[3,"RepeatJob"],[4,"Job"],[4,"SystemError"],[3,"Io"],[3,"EsManager"],[8,"EventStore"],[8,"LoggerProps"],[8,"DeadLetterProps"],[8,"IoManagerProps"],[8,"Timer"],[8,"TimerFactory"],[8,"ExecutionContext"],[3,"Topic"],[3,"All"],[3,"RestartError"],[3,"Spawn"],[3,"Identify"],[3,"Info"],[3,"NoEventStore"],[3,"IoType"],[3,"Tcp"],[3,"Udp"],[3,"NoIo"]]};
searchIndex["riker_deadletter"]={"doc":"","items":[[3,"DeadLettersActor","riker_deadletter","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"pre_start","","",0,[[["self"],["context"]]]],[11,"other_receive","","",0,[[["self"],["context"],["actormsg"],["option",["actorref"]]]]],[11,"receive","","",0,[[["self"],["context"],["msg"],["option",["actorref"]]]]],[11,"props","","",0,[[["actorref"]],["boxactorprod"]]]],"paths":[[3,"DeadLettersActor"]]};
searchIndex["riker_default"]={"doc":"","items":[[3,"ThreadPoolDispatcher","riker_default","",N,N],[3,"SimpleLogger","","",N,N],[3,"DeadLettersActor","","",N,N],[3,"MapVec","","",N,N],[3,"BasicTimer","","",N,N],[3,"DefaultModel","","",N,N],[11,"new","","",0,[[],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"new","","",1,[[["config"],["bool"]],["threadpooldispatcher"]]],[11,"execute","","",1,N],[11,"receive","","",2,N],[11,"system_receive","","",2,N],[11,"props","","",2,[[["config"]],["arc",["mutex"]]]],[11,"pre_start","","",3,N],[11,"other_receive","","",3,N],[11,"receive","","",3,N],[11,"props","","",3,[[["actorref"]],["arc",["mutex"]]]],[11,"clone","","",4,[[["self"]],["mapvec"]]],[11,"new","","",4,[[["config"]],["mapvec"]]],[11,"insert","","",4,N],[11,"load","","",4,[[["self"],["string"],["string"]],["vec"]]],[11,"new","","",5,[[["config"],["bool"]],["sender",["job"]]]],[11,"clone","","",0,[[["self"]],["defaultmodel"]]]],"paths":[[3,"DefaultModel"],[3,"ThreadPoolDispatcher"],[3,"SimpleLogger"],[3,"DeadLettersActor"],[3,"MapVec"],[3,"BasicTimer"]]};
searchIndex["riker_dispatcher"]={"doc":"","items":[[3,"ThreadPoolDispatcher","riker_dispatcher","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"new","","",0,[[["config"],["bool"]],["threadpooldispatcher"]]],[11,"execute","","",0,[[["self"],["f"]]]]],"paths":[[3,"ThreadPoolDispatcher"]]};
searchIndex["riker_log"]={"doc":"","items":[[3,"SimpleLogger","riker_log","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"receive","","",0,N],[11,"system_receive","","",0,[[["self"],["context"],["systemmsg"],["option",["actorref"]]]]],[11,"props","","",0,[[["config"]],["boxactorprod"]]]],"paths":[[3,"SimpleLogger"]]};
searchIndex["riker_mapvec"]={"doc":"","items":[[3,"MapVec","riker_mapvec","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["mapvec"]]],[11,"new","","",0,[[["config"]],["self"]]],[11,"insert","","",0,[[["self"],["string"],["string"],["evt"]]]],[11,"load","","",0,[[["self"],["string"],["string"]],["vec"]]]],"paths":[[3,"MapVec"]]};
searchIndex["riker_patterns"]={"doc":"","items":[[0,"ask","riker_patterns","",N,N],[3,"Ask","riker_patterns::ask","",N,N],[5,"ask","","",N,[[["ctx"],["t"],["m"]],["box",["future"]]]],[11,"new","","",0,[[["ctx"],["t"],["actormsg"]],["ask"]]],[0,"transform","riker_patterns","",N,N],[6,"Receive","riker_patterns::transform","",N,N],[6,"OtherReceive","","",N,N],[14,"transform","riker_patterns","",N,N],[11,"from","riker_patterns::ask","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_future","","",0,[[["self"]],["f"]]],[11,"poll","","",0,[[["self"],["context"]],["poll"]]]],"paths":[[3,"Ask"]]};
searchIndex["riker_timer"]={"doc":"","items":[[3,"BasicTimer","riker_timer","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"new","","",0,[[["config"],["bool"]],["sender",["job"]]]]],"paths":[[3,"BasicTimer"]]};
searchIndex["rmp"]={"doc":"The Rust MessagePack Library","items":[[4,"Marker","rmp","Format markers.",N,N],[13,"FixPos","","",0,N],[13,"FixNeg","","",0,N],[13,"Null","","",0,N],[13,"True","","",0,N],[13,"False","","",0,N],[13,"U8","","",0,N],[13,"U16","","",0,N],[13,"U32","","",0,N],[13,"U64","","",0,N],[13,"I8","","",0,N],[13,"I16","","",0,N],[13,"I32","","",0,N],[13,"I64","","",0,N],[13,"F32","","",0,N],[13,"F64","","",0,N],[13,"FixStr","","",0,N],[13,"Str8","","",0,N],[13,"Str16","","",0,N],[13,"Str32","","",0,N],[13,"Bin8","","",0,N],[13,"Bin16","","",0,N],[13,"Bin32","","",0,N],[13,"FixArray","","",0,N],[13,"Array16","","",0,N],[13,"Array32","","",0,N],[13,"FixMap","","",0,N],[13,"Map16","","",0,N],[13,"Map32","","",0,N],[13,"FixExt1","","",0,N],[13,"FixExt2","","",0,N],[13,"FixExt4","","",0,N],[13,"FixExt8","","",0,N],[13,"FixExt16","","",0,N],[13,"Ext8","","",0,N],[13,"Ext16","","",0,N],[13,"Ext32","","",0,N],[13,"Reserved","","",0,N],[11,"from_u8","","Construct a msgpack marker from a single byte.",0,[[["u8"]],["marker"]]],[11,"to_u8","","Converts a marker object into a single-byte representation.",0,[[["self"]],["u8"]]],[0,"encode","","Provides various functions and structs for MessagePack encoding.",N,N],[4,"ValueWriteError","rmp::encode","An error that can occur when attempting to write multi-byte MessagePack value.",N,N],[13,"InvalidMarkerWrite","","I/O error while writing marker.",1,N],[13,"InvalidDataWrite","","I/O error while writing data.",1,N],[5,"write_nfix","","Encodes and attempts to write a negative small integer value as a negative fixnum into the given write.",N,[[["w"],["i8"]],["result",["error"]]]],[5,"write_i8","","Encodes and attempts to write an `i8` value as a 2-byte sequence into the given write.",N,[[["w"],["i8"]],["result",["valuewriteerror"]]]],[5,"write_i16","","Encodes and attempts to write an `i16` value as a 3-byte sequence into the given write.",N,[[["w"],["i16"]],["result",["valuewriteerror"]]]],[5,"write_i32","","Encodes and attempts to write an `i32` value as a 5-byte sequence into the given write.",N,[[["w"],["i32"]],["result",["valuewriteerror"]]]],[5,"write_i64","","Encodes and attempts to write an `i64` value as a 9-byte sequence into the given write.",N,[[["w"],["i64"]],["result",["valuewriteerror"]]]],[5,"write_sint","","Encodes and attempts to write an `i64` value into the given write using the most efficient representation, returning the marker used.",N,[[["w"],["i64"]],["result",["marker","valuewriteerror"]]]],[5,"write_pfix","","Encodes and attempts to write an unsigned small integer value as a positive fixint into the given write.",N,[[["w"],["u8"]],["result",["error"]]]],[5,"write_u8","","Encodes and attempts to write an `u8` value as a 2-byte sequence into the given write.",N,[[["w"],["u8"]],["result",["valuewriteerror"]]]],[5,"write_u16","","Encodes and attempts to write an `u16` value strictly as a 3-byte sequence into the given write.",N,[[["w"],["u16"]],["result",["valuewriteerror"]]]],[5,"write_u32","","Encodes and attempts to write an `u32` value strictly as a 5-byte sequence into the given write.",N,[[["w"],["u32"]],["result",["valuewriteerror"]]]],[5,"write_u64","","Encodes and attempts to write an `u64` value strictly as a 9-byte sequence into the given write.",N,[[["w"],["u64"]],["result",["valuewriteerror"]]]],[5,"write_uint","","Encodes and attempts to write an `u64` value into the given write using the most efficient representation, returning the marker used.",N,[[["w"],["u64"]],["result",["marker","valuewriteerror"]]]],[5,"write_f32","","Encodes and attempts to write an `f32` value as a 5-byte sequence into the given write.",N,[[["w"],["f32"]],["result",["valuewriteerror"]]]],[5,"write_f64","","Encodes and attempts to write an `f64` value as a 9-byte sequence into the given write.",N,[[["w"],["f64"]],["result",["valuewriteerror"]]]],[5,"write_str_len","","Encodes and attempts to write the most efficient string length implementation to the given write, returning the marker used.",N,[[["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[5,"write_str","","Encodes and attempts to write the most efficient string binary representation to the given `Write`.",N,[[["w"],["str"]],["result",["valuewriteerror"]]]],[5,"write_bin_len","","Encodes and attempts to write the most efficient binary array length implementation to the given write, returning the marker used.",N,[[["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[5,"write_bin","","Encodes and attempts to write the most efficient binary implementation to the given `Write`.",N,N],[5,"write_nil","","Encodes and attempts to write a nil value into the given write.",N,[[["w"]],["result",["error"]]]],[5,"write_bool","","Encodes and attempts to write a bool value into the given write.",N,[[["w"],["bool"]],["result",["error"]]]],[5,"write_array_len","","Encodes and attempts to write the most efficient array length implementation to the given write, returning the marker used.",N,[[["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[5,"write_map_len","","Encodes and attempts to write the most efficient map length implementation to the given write, returning the marker used.",N,[[["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[5,"write_ext_meta","","Encodes and attempts to write the most efficient ext metadata implementation to the given write, returning the marker used.",N,[[["w"],["u32"],["i8"]],["result",["marker","valuewriteerror"]]]],[6,"Error","","The error type for I/O operations of the `Write` and associated traits.",N,N],[0,"decode","rmp","Provides various functions and structs for MessagePack decoding.",N,N],[3,"ExtMeta","rmp::decode","Extension type meta information.",N,N],[12,"typeid","","Type information.",2,N],[12,"size","","Byte array size.",2,N],[3,"MarkerReadError","","An error that can occur when attempting to read a MessagePack marker from the reader.",N,N],[12,"0","","",3,N],[4,"DecodeStringError","","",N,N],[13,"InvalidMarkerRead","","",4,N],[13,"InvalidDataRead","","",4,N],[13,"TypeMismatch","","",4,N],[13,"BufferSizeTooSmall","","The given buffer is not large enough to accumulate the specified amount of bytes.",4,N],[13,"InvalidUtf8","","",4,N],[4,"ValueReadError","","An error which can occur when attempting to read a MessagePack value from the reader.",N,N],[13,"InvalidMarkerRead","","Failed to read the marker.",5,N],[13,"InvalidDataRead","","Failed to read the data.",5,N],[13,"TypeMismatch","","The type decoded isn't match with the expected one.",5,N],[4,"NumValueReadError","","An error which can occur when attempting to read a MessagePack numeric value from the reader.",N,N],[13,"InvalidMarkerRead","","Failed to read the marker.",6,N],[13,"InvalidDataRead","","Failed to read the data.",6,N],[13,"TypeMismatch","","The type decoded isn't match with the expected one.",6,N],[13,"OutOfRange","","Out of range integral type conversion attempted.",6,N],[5,"read_nfix","","Attempts to read a single byte from the given reader and to decode it as a negative fixnum value.",N,[[["r"]],["result",["i8","valuereaderror"]]]],[5,"read_i8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `i8` value.",N,[[["r"]],["result",["i8","valuereaderror"]]]],[5,"read_i16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `i16` value.",N,[[["r"]],["result",["i16","valuereaderror"]]]],[5,"read_i32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `i32` value.",N,[[["r"]],["result",["i32","valuereaderror"]]]],[5,"read_i64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `i64` value.",N,[[["r"]],["result",["i64","valuereaderror"]]]],[5,"read_pfix","","Attempts to read a single byte from the given reader and to decode it as a positive fixnum value.",N,[[["r"]],["result",["u8","valuereaderror"]]]],[5,"read_u8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `u8` value.",N,[[["r"]],["result",["u8","valuereaderror"]]]],[5,"read_u16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `u16` value.",N,[[["r"]],["result",["u16","valuereaderror"]]]],[5,"read_u32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `u32` value.",N,[[["r"]],["result",["u32","valuereaderror"]]]],[5,"read_u64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `u64` value.",N,[[["r"]],["result",["u64","valuereaderror"]]]],[5,"read_f32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `f32` value.",N,[[["r"]],["result",["f32","valuereaderror"]]]],[5,"read_f64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `f64` value.",N,[[["r"]],["result",["f64","valuereaderror"]]]],[5,"read_str_len","","Attempts to read up to 9 bytes from the given reader and to decode them as a string `u32` size value.",N,[[["r"]],["result",["u32","valuereaderror"]]]],[5,"read_str","","Attempts to read a string data from the given reader and copy it to the buffer provided.",N,N],[5,"read_str_from_slice","","Attempts to read and decode a string value from the reader, returning a borrowed slice from it.",N,[[["t"]],["result",["decodestringerror"]]]],[5,"read_str_ref","","Attempts to read and decode a string value from the reader, returning a borrowed slice from it.",N,N],[5,"read_fixext1","","Attempts to read exactly 3 bytes from the given reader and interpret them as a fixext1 type with data attached.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_fixext2","","Attempts to read exactly 4 bytes from the given reader and interpret them as a fixext2 type with data attached.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_fixext4","","Attempts to read exactly 6 bytes from the given reader and interpret them as a fixext4 type with data attached.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_fixext8","","Attempts to read exactly 10 bytes from the given reader and interpret them as a fixext8 type with data attached.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_fixext16","","Attempts to read exactly 18 bytes from the given reader and interpret them as a fixext16 type with data attached.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_ext_meta","","",N,[[["r"]],["result",["extmeta","valuereaderror"]]]],[5,"read_marker","","Attempts to read a single byte from the given reader and to decode it as a MessagePack marker.",N,[[["r"]],["result",["marker","markerreaderror"]]]],[5,"read_nil","","Attempts to read a single byte from the given reader and to decode it as a nil value.",N,[[["r"]],["result",["valuereaderror"]]]],[5,"read_bool","","Attempts to read a single byte from the given reader and to decode it as a boolean value.",N,[[["r"]],["result",["bool","valuereaderror"]]]],[5,"read_int","","Attempts to read up to 9 bytes from the given reader and to decode them as integral `T` value.",N,[[["r"]],["result",["numvaluereaderror"]]]],[5,"read_array_len","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32 array size.",N,[[["r"]],["result",["u32","valuereaderror"]]]],[5,"read_map_len","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32 map size.",N,[[["r"]],["result",["u32","valuereaderror"]]]],[5,"read_bin_len","","Attempts to read up to 5 bytes from the given reader and to decode them as Binary array length.",N,[[["r"]],["result",["u32","valuereaderror"]]]],[6,"Error","","An error that can occur when attempting to read bytes from the reader.",N,N],[17,"MSGPACK_VERSION","rmp","Version of the MessagePack spec.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","rmp::encode","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","rmp::decode","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"clone","rmp","",0,[[["self"]],["marker"]]],[11,"from","","",0,[[["u8"]],["marker"]]],[11,"from","","",7,[[["valuewriteerror"]],["error"]]],[11,"from","rmp::decode","",4,[[["valuereaderror"]],["decodestringerror"]]],[11,"from","","",5,[[["markerreaderror"]],["valuereaderror"]]],[11,"from","","",3,[[["error"]],["markerreaderror"]]],[11,"from","","",6,[[["markerreaderror"]],["numvaluereaderror"]]],[11,"from","","",6,[[["valuereaderror"]],["numvaluereaderror"]]],[11,"into","rmp","",0,[[["self"]],["u8"]]],[11,"eq","","",0,[[["self"],["marker"]],["bool"]]],[11,"ne","","",0,[[["self"],["marker"]],["bool"]]],[11,"eq","rmp::decode","",2,[[["self"],["extmeta"]],["bool"]]],[11,"ne","","",2,[[["self"],["extmeta"]],["bool"]]],[11,"fmt","rmp::encode","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rmp::decode","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rmp","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rmp::encode","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","rmp::decode","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","rmp::encode","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"description","rmp::decode","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"cause","","",6,[[["self"]],["option",["error"]]]]],"paths":[[4,"Marker"],[4,"ValueWriteError"],[3,"ExtMeta"],[3,"MarkerReadError"],[4,"DecodeStringError"],[4,"ValueReadError"],[4,"NumValueReadError"],[6,"Error"]]};
searchIndex["rmp_serde"]={"doc":"Type-based Serialization and Deserialization","items":[[3,"Raw","rmp_serde","Helper that allows both to encode and decode strings no matter whether they contain valid or invalid UTF-8.",N,N],[3,"RawRef","","Helper that allows both to encode and decode strings no matter whether they contain valid or invalid UTF-8.",N,N],[0,"decode","","",N,N],[3,"Deserializer","rmp_serde::decode","A Deserializer that reads bytes from a buffer.",N,N],[3,"VariantAccess","","Default variant visitor.",N,N],[3,"SliceReader","","",N,N],[3,"ReadReader","","",N,N],[4,"Error","","Enum representing errors that can occur while decoding MessagePack data.",N,N],[13,"InvalidMarkerRead","","The enclosed I/O error occured while trying to read a MessagePack marker.",0,N],[13,"InvalidDataRead","","The enclosed I/O error occured while trying to read the encoded MessagePack data.",0,N],[13,"TypeMismatch","","A mismatch occured between the decoded and expected value types.",0,N],[13,"OutOfRange","","A numeric cast failed due to an out-of-range error.",0,N],[13,"LengthMismatch","","A decoded array did not have the enclosed expected length.",0,N],[13,"Uncategorized","","An otherwise uncategorized error occured. See the enclosed `String` for details.",0,N],[13,"Syntax","","A general error occured while deserializing the expected type. See the enclosed `String` for details.",0,N],[13,"Utf8Error","","An encoded string could not be parsed as UTF-8.",0,N],[13,"DepthLimitExceeded","","The depth limit was exceeded; not currently used.",0,N],[4,"Reference","","",N,N],[13,"Borrowed","","",1,N],[13,"Copied","","",1,N],[5,"from_read","","Deserialize an instance of type `T` from an I/O stream of MessagePack.",N,[[["r"]],["result",["error"]]]],[5,"from_slice","","Deserializes a byte slice into the desired type.",N,N],[8,"Read","","",N,N],[10,"read_slice","","",2,[[["self"],["usize"]],["result",["reference","error"]]]],[11,"from_slice","","",3,N],[11,"get_ref","","Gets a reference to the underlying reader in this decoder.",3,N],[11,"from_read","","",3,[[["r"]],["self"]]],[11,"new","","Constructs a new deserializer by consuming the given reader.",3,[[["r"]],["self"]]],[11,"get_ref","","Gets a reference to the underlying reader in this decoder.",3,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying reader in this decoder.",3,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder returning the underlying reader.",3,[[["self"]],["r"]]],[11,"position","","Returns the current position of this deserializer, i.e. how many bytes were read.",3,[[["self"]],["u64"]]],[11,"set_max_depth","","Changes the maximum nesting depth that is allowed",3,[[["self"],["usize"]]]],[11,"new","","",4,[[["deserializer"]],["self"]]],[0,"encode","rmp_serde","",N,N],[3,"StructArrayWriter","rmp_serde::encode","Writes struct as MessagePack array with no field names",N,N],[3,"StructMapWriter","","",N,N],[3,"Serializer","","Represents MessagePack serialization implementation.",N,N],[3,"Compound","","",N,N],[4,"Error","","",N,N],[13,"InvalidValueWrite","","",5,N],[13,"UnknownLength","","Failed to serialize struct, sequence or map, because its length is unknown.",5,N],[13,"DepthLimitExceeded","","Depth limit exceeded",5,N],[13,"Syntax","","",5,N],[5,"write","","Serialize the given data structure as MessagePack into the I/O stream. This fyunction uses compact representation - structures as arrays",N,[[["w"],["t"]],["result",["error"]]]],[5,"write_named","","Serialize the given data structure as MessagePack into the I/O stream. This function serializes structures as maps",N,[[["w"],["t"]],["result",["error"]]]],[5,"to_vec","","Serialize the given data structure as a MessagePack byte vector. This method uses compact representation, structs are serialized as arrays",N,[[["t"]],["result",["vec","error"]]]],[5,"to_vec_named","","Serializes data structure into byte vector as a map Resulting MessagePack message will contain field names",N,[[["t"]],["result",["vec","error"]]]],[8,"VariantWriter","","",N,N],[10,"write_struct_len","","",6,[[["self"],["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[10,"write_field_name","","",6,[[["self"],["w"],["str"]],["result",["valuewriteerror"]]]],[11,"new_named","","Constructs a new `MessagePack` serializer whose output will be written to the writer specified.",7,[[["w"]],["self"]]],[11,"set_max_depth","","Changes the maximum nesting depth that is allowed",7,[[["self"],["usize"]]]],[11,"new","","Constructs a new `MessagePack` serializer whose output will be written to the writer specified.",7,[[["w"]],["self"]]],[11,"compact","","",7,[[["w"]],["self"]]],[11,"get_ref","","Gets a reference to the underlying writer.",7,[[["self"]],["w"]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",7,[[["self"]],["w"]]],[11,"into_inner","","Unwraps this `Serializer`, returning the underlying writer.",7,[[["self"]],["w"]]],[11,"with","","Creates a new MessagePack encoder whose output will be written to the writer specified.",7,[[["w"],["v"]],["self"]]],[11,"new","rmp_serde","Constructs a new `Raw` from the UTF-8 string.",8,[[["string"]],["self"]]],[11,"from_utf8","","Converts a vector of bytes to a `Raw`.",8,[[["vec",["u8"]]],["self"]]],[11,"is_str","","Returns `true` if the raw is valid UTF-8.",8,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the raw contains invalid UTF-8 sequence.",8,[[["self"]],["bool"]]],[11,"as_str","","Returns the string reference if the raw is valid UTF-8, or else `None`.",8,[[["self"]],["option",["str"]]]],[11,"as_err","","Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or else `None`.",8,[[["self"]],["option",["utf8error"]]]],[11,"as_bytes","","Returns a byte slice of this raw's contents.",8,N],[11,"into_str","","Consumes this object, yielding the string if the raw is valid UTF-8, or else `None`.",8,[[["self"]],["option",["string"]]]],[11,"into_bytes","","Converts a `Raw` into a byte vector.",8,[[["self"]],["vec",["u8"]]]],[11,"new","","Constructs a new `RawRef` from the UTF-8 string.",9,[[["str"]],["self"]]],[11,"from_utf8","","Converts a vector of bytes to a `RawRef`.",9,N],[11,"is_str","","Returns `true` if the raw is valid UTF-8.",9,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the raw contains invalid UTF-8 sequence.",9,[[["self"]],["bool"]]],[11,"as_str","","Returns the string reference if the raw is valid UTF-8, or else `None`.",9,[[["self"]],["option",["str"]]]],[11,"as_err","","Returns the underlying `Utf8Error` if the raw contains invalid UTF-8 sequence, or else `None`.",9,[[["self"]],["option",["utf8error"]]]],[11,"as_bytes","","Returns a byte slice of this raw's contents.",9,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","rmp_serde::decode","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","rmp_serde::encode","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"read_slice","rmp_serde::decode","",10,[[["self"],["usize"]],["result",["reference","error"]]]],[11,"read_slice","","",11,[[["self"],["usize"]],["result",["reference","error"]]]],[11,"write_struct_len","rmp_serde::encode","",12,[[["self"],["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[11,"write_field_name","","This implementation does not write field names",12,[[["self"],["w"],["str"]],["result",["valuewriteerror"]]]],[11,"write_struct_len","","",13,[[["self"],["w"],["u32"]],["result",["marker","valuewriteerror"]]]],[11,"write_field_name","","",13,[[["self"],["w"],["str"]],["result",["valuewriteerror"]]]],[11,"clone","rmp_serde::decode","",1,[[["self"]],["reference"]]],[11,"clone","rmp_serde","",8,[[["self"]],["raw"]]],[11,"clone","","",9,[[["self"]],["rawref"]]],[11,"from","rmp_serde::decode","",0,[[["markerreaderror"]],["error"]]],[11,"from","","",0,[[["utf8error"]],["error"]]],[11,"from","","",0,[[["valuereaderror"]],["error"]]],[11,"from","","",0,[[["numvaluereaderror"]],["error"]]],[11,"from","","",0,[[["decodestringerror"]],["error"]]],[11,"from","rmp_serde::encode","",5,[[["valuewriteerror"]],["error"]]],[11,"eq","rmp_serde::decode","",1,[[["self"],["reference"]],["bool"]]],[11,"ne","","",1,[[["self"],["reference"]],["bool"]]],[11,"eq","rmp_serde","",8,[[["self"],["raw"]],["bool"]]],[11,"ne","","",8,[[["self"],["raw"]],["bool"]]],[11,"eq","","",9,[[["self"],["rawref"]],["bool"]]],[11,"ne","","",9,[[["self"],["rawref"]],["bool"]]],[11,"fmt","rmp_serde::decode","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rmp_serde::encode","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rmp_serde::decode","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","rmp_serde::encode","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","rmp_serde","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"read","rmp_serde::decode","",10,N],[11,"read_exact","","",10,N],[11,"read","","",11,N],[11,"read_exact","","",11,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","rmp_serde::encode","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"serialize_element","","",14,[[["self"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"custom","","Raised when there is general error when deserializing a type.",5,[[["t"]],["error"]]],[11,"serialize","rmp_serde","",8,[[["self"],["s"]],["result"]]],[11,"serialize","","",9,[[["self"],["s"]],["result"]]],[11,"serialize_element","rmp_serde::encode","",14,[[["self"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"serialize_field","","",14,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"serialize_field","","",14,[[["self"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"serialize_field","","",14,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"serialize_field","","",14,[[["self"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"serialize_key","","",14,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",14,[[["self"],["t"]],["result"]]],[11,"end","","",14,[[["self"]],["result"]]],[11,"deserialize","rmp_serde","",8,[[["d"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result"]]],[11,"custom","rmp_serde::decode","",0,[[["t"]],["self"]]],[11,"variant_seed","","",4,[[["self"],["v"]],["result",["error"]]]],[11,"unit_variant","","",4,[[["self"]],["result",["error"]]]],[11,"newtype_variant_seed","","",4,[[["self"],["t"]],["result"]]],[11,"tuple_variant","","",4,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"struct_variant","","",4,N]],"paths":[[4,"Error"],[4,"Reference"],[8,"Read"],[3,"Deserializer"],[3,"VariantAccess"],[4,"Error"],[8,"VariantWriter"],[3,"Serializer"],[3,"Raw"],[3,"RawRef"],[3,"SliceReader"],[3,"ReadReader"],[3,"StructArrayWriter"],[3,"StructMapWriter"],[3,"Compound"]]};
searchIndex["runtime_fmt"]={"doc":"A crate for string formatting using runtime format strings.","items":[[3,"Param","runtime_fmt","A type-erased parameter, with an optional name.",N,N],[3,"PreparedFormat","","A pre-checked format string, ready for values of a specific type to be formatted against it.",N,N],[3,"FormatBuf","","A buffer representing a parsed format string and arguments.",N,N],[4,"Error","","An error during parsing or formatting.",N,N],[13,"BadSyntax","","Invalid format string syntax.",0,N],[13,"BadIndex","","A format specifier referred to an out-of-range index.",0,N],[13,"BadName","","A format specifier referred to a non-existent name.",0,N],[13,"NoSuchFormat","","A format specifier referred to a non-existent type.",0,N],[13,"UnsatisfiedFormat","","A format specifier's type was not satisfied by its argument.",0,N],[12,"idx","runtime_fmt::Error","",0,N],[12,"must_implement","","",0,N],[13,"BadCount","runtime_fmt","A parameter was of a type not suitable for use as a count.",0,N],[13,"Io","","An I/O error from an `rt_write!` or `rt_writeln!` call.",0,N],[13,"Fmt","","A formatting error from an `rt_write!` or `rt_writeln!` call.",0,N],[8,"FormatArgs","","A trait for types against which formatting specifiers may be pre-checked.",N,N],[10,"validate_name","","Find the index within this type corresponding to the provided name.",1,[[["str"]],["option",["usize"]]]],[10,"validate_index","","Validate that a given index is within range for this type.",1,[[["usize"]],["bool"]]],[10,"get_child","","Return the formatter function for the given format trait, accepting `&Self` and using the given format trait on the value at that index.",1,[[["usize"]],["option"]]],[10,"as_usize","","Return the value at the given index interpreted as a `usize`.",1,[[["usize"]],["option"]]],[11,"normal","","Create a nameless parameter from the given value.",2,[[["t"]],["param"]]],[11,"named","","Create a named parameter from the given value.",2,[[["str"],["t"]],["param"]]],[11,"prepare","","Prepare a format string against a formattable type.",3,[[["str"]],["result",["error"]]]],[11,"newln","","Append a linefeed (`\\n`) to the end of this buffer.",3,[[["self"]],["self"]]],[11,"with","","Call a function accepting `Arguments` with the contents of this buffer.",3,[[["self"],["t"],["f"]],["r"]]],[11,"format","","Format the given value to a `String`.",3,[[["self"],["t"]],["string"]]],[11,"print","","Print the given value to standard output.",3,[[["self"],["t"]]]],[11,"write_io","","Write the given value to an `io::Write`.",3,[[["self"],["t"],["w"]],["result"]]],[11,"write_fmt","","Write the given value to a `fmt::Write`.",3,[[["self"],["t"],["w"]],["result"]]],[11,"new","","Construct a new buffer from the given format string and arguments.",4,N],[11,"newln","","Append a linefeed (`\\n`) to the end of this buffer.",4,[[["self"]],["self"]]],[11,"with","","Call a function accepting `Arguments` with the contents of this buffer.",4,[[["self"],["f"]],["r"]]],[11,"format","","Format this buffer to a `String`.",4,[[["self"]],["string"]]],[11,"print","","Print this buffer to standard output.",4,[[["self"]]]],[11,"write_io","","Write this buffer to an `io::Write`.",4,[[["self"],["w"]],["result"]]],[11,"write_fmt","","Write this buffer to a `fmt::Write`.",4,[[["self"],["w"]],["result"]]],[14,"rt_format_args","","The core macro for runtime formatting.",N,N],[14,"rt_format","","Format a value of type `String` with a runtime format string.",N,N],[14,"rt_print","","Print to standard output with a runtime format string.",N,N],[14,"rt_println","","Print to standard output with a runtime format string and trailing newline.",N,N],[14,"rt_write","","Write runtime-formatted data into a buffer.",N,N],[14,"rt_writeln","","Write runtime-formatted data into a buffer with a trailing newline.",N,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone_from","","",3,[[["self"],["self"]]]],[11,"clone","","",4,[[["self"]],["formatbuf"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[4,"Error"],[8,"FormatArgs"],[3,"Param"],[3,"PreparedFormat"],[3,"FormatBuf"]]};
searchIndex["rust_base58"]={"doc":"","items":[[0,"base58","rust_base58","",N,N],[4,"FromBase58Error","rust_base58::base58","Errors that can occur when decoding a base58-encoded string",N,N],[13,"InvalidBase58Byte","","The input contained a character not part of the base58 alphabet",0,N],[8,"FromBase58","","A trait for converting base58-encoded values",N,N],[10,"from_base58","","Converts the value of `self`, interpreted as base58 encoded data, into an owned vector of bytes, returning the vector.",1,[[["self"]],["result",["vec","frombase58error"]]]],[8,"ToBase58","","A trait for converting a value to base58 encoding.",N,N],[10,"to_base58","","Converts the value of `self` to a base-58 value, returning the owned string.",2,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["frombase58error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"FromBase58Error"],[8,"FromBase58"],[8,"ToBase58"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"as_str","","Returns the underlying string that's being demangled.",0,[[["self"]],["str"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["trydemangleerror"]]]],"paths":[[3,"Demangle"],[3,"TryDemangleError"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"default","","",0,[[],["self"]]]],"paths":[[3,"Buffer"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["same_file"]={"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",N,N],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",N,[[["p"],["q"]],["result",["bool"]]]],[11,"from_path","","Construct a handle from a path.",0,[[["p"]],["result",["handle"]]]],[11,"from_file","","Construct a handle from a file.",0,[[["file"]],["result",["handle"]]]],[11,"stdin","","Construct a handle from stdin.",0,[[],["result",["handle"]]]],[11,"stdout","","Construct a handle from stdout.",0,[[],["result",["handle"]]]],[11,"stderr","","Construct a handle from stderr.",0,[[],["result",["handle"]]]],[11,"as_file","","Return a reference to the underlying file.",0,[[["self"]],["file"]]],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,[[["self"]],["file"]]],[11,"dev","","Return the underlying device number of this handle.",0,[[["self"]],["u64"]]],[11,"ino","","Return the underlying inode number of this handle.",0,[[["self"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"eq","","",0,[[["self"],["handle"]],["bool"]]],[11,"ne","","",0,[[["self"],["handle"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",0,[[["self"]],["rawfd"]]]],"paths":[[3,"Handle"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"new","","Create a new borrowed deserializer from the given string.",1,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",2,N],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",3,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",3,[[["self"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",4,[[["a"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",5,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",5,[[["self"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",6,[[["a"]],["self"]]],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",7,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",7,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",7,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",7,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",7,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",7,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",8,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",10,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",10,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",11,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",11,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",11,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",11,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",11,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",11,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",12,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",12,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",12,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",12,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",12,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",12,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",12,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",12,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",12,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",12,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",12,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",12,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",12,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",12,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",12,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",12,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",12,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",12,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",12,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",12,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",12,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",12,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",12,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",12,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",12,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",12,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",12,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",12,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",12,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",13,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",13,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",13,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",13,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",14,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",14,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",14,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",14,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",14,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",14,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",15,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",15,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",15,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",15,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",16,N],[10,"unit_variant","","Called when deserializing a variant with no values.",16,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",16,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",16,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",16,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",16,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",17,N],[10,"into_deserializer","","Convert this value into a deserializer.",17,N],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",18,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",20,N],[16,"Error","","The error type when some error occurs during serialization.",20,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",20,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",20,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",20,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",20,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",20,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",20,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",20,N],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,N],[10,"serialize_none","","Serialize a [`None`] value.",20,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",20,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",20,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",20,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,N],[10,"serialize_element","","Serialize a sequence element.",21,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",21,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,N],[10,"serialize_element","","Serialize a tuple element.",22,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",22,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",23,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",23,N],[10,"serialize_field","","Serialize a tuple struct field.",23,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",23,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",24,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",24,N],[10,"serialize_field","","Serialize a tuple variant field.",24,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",24,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",25,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",25,N],[10,"serialize_key","","Serialize a map key.",25,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",25,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",25,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",25,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",26,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",26,N],[10,"serialize_field","","Serialize a struct field.",26,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",26,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",26,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",27,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",27,N],[10,"serialize_field","","Serialize a struct variant field.",27,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",27,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",27,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",11,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",11,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",11,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",11,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",11,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",11,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",20,N],[16,"Error","","The error type when some error occurs during serialization.",20,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",20,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",20,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",20,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",20,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",20,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",20,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",20,N],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,N],[10,"serialize_none","","Serialize a [`None`] value.",20,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",20,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",20,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",20,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","serde::de::value","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","serde::ser","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"deserialize","serde::de","",28,[[["d"]],["result",["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",30,N],[11,"deserialize_enum","","",30,N],[11,"deserialize_identifier","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",31,N],[11,"deserialize_enum","","",31,N],[11,"deserialize_identifier","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",32,N],[11,"deserialize_enum","","",32,N],[11,"deserialize_identifier","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",33,N],[11,"deserialize_enum","","",33,N],[11,"deserialize_identifier","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",34,N],[11,"deserialize_enum","","",34,N],[11,"deserialize_identifier","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",35,N],[11,"deserialize_enum","","",35,N],[11,"deserialize_identifier","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",36,N],[11,"deserialize_enum","","",36,N],[11,"deserialize_identifier","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",37,N],[11,"deserialize_enum","","",37,N],[11,"deserialize_identifier","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",38,N],[11,"deserialize_enum","","",38,N],[11,"deserialize_identifier","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",39,N],[11,"deserialize_enum","","",39,N],[11,"deserialize_identifier","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",40,N],[11,"deserialize_enum","","",40,N],[11,"deserialize_identifier","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",41,N],[11,"deserialize_enum","","",41,N],[11,"deserialize_identifier","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",42,N],[11,"deserialize_enum","","",42,N],[11,"deserialize_identifier","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",43,N],[11,"deserialize_enum","","",43,N],[11,"deserialize_identifier","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",44,N],[11,"deserialize_enum","","",44,N],[11,"deserialize_identifier","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",45,N],[11,"deserialize_enum","","",45,N],[11,"deserialize_identifier","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",46,N],[11,"deserialize_identifier","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",46,N],[11,"deserialize_any","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",47,N],[11,"deserialize_bool","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",47,N],[11,"deserialize_identifier","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",1,N],[11,"deserialize_bool","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",1,N],[11,"deserialize_identifier","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",48,N],[11,"deserialize_bool","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",48,N],[11,"deserialize_identifier","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",49,N],[11,"deserialize_bool","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",49,N],[11,"deserialize_identifier","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",2,N],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"expecting","serde::de","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"next_element_seed","serde::de::value","",3,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",3,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",5,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",5,[[["self"]],["option",["usize"]]]],[11,"next_key_seed","","",5,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",5,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",5,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",5,[[["self"]],["option",["usize"]]]],[11,"variant_seed","","",46,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",47,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",1,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",48,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",49,[[["self"],["t"]],["result"]]],[11,"serialize_element","serde::ser","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_element","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_key","","",50,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"custom","serde::de::value","",29,[[["t"]],["self"]]],[11,"custom","","",29,[[["t"]],["self"]]],[11,"clone","","",29,[[["self"]],["error"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["self"]]],[11,"clone","","",49,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["seqdeserializer"]]],[11,"clone","","",4,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"eq","serde::de::value","",29,[[["self"],["error"]],["bool"]]],[11,"ne","","",29,[[["self"],["error"]],["bool"]]],[11,"eq","serde::de","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","serde::de::value","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde::de","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de::value","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","serde::de::value","",29,[[["self"]],["str"]]]],"paths":[[4,"Unexpected"],[3,"BorrowedStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"IgnoredAny"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"Impossible"]]};
searchIndex["serde_bytes"]={"doc":"Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.","items":[[3,"ByteBuf","serde_bytes","Wrapper around `Vec<u8>` to serialize and deserialize efficiently.",N,N],[3,"Bytes","","Wrapper around `&[u8]` to serialize and deserialize efficiently.",N,N],[5,"serialize","","Serde `serialize_with` function to serialize bytes efficiently.",N,[[["t"],["s"]],["result"]]],[5,"deserialize","","Serde `deserialize_with` function to deserialize bytes efficiently.",N,[[["d"]],["result"]]],[11,"new","","Construct a new, empty `ByteBuf`.",0,[[],["self"]]],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,[[["usize"]],["self"]]],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,[[["t"]],["self"]]],[11,"new","","Wrap an existing `&[u8]`.",1,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"clone","","",0,[[["self"]],["bytebuf"]]],[11,"from","","",1,N],[11,"from","","",0,[[["vec",["u8"]]],["self"]]],[11,"as_ref","","",0,[[["self"]],["vec"]]],[11,"as_ref","","",0,N],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["bytes"]],["bool"]]],[11,"le","","",1,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",1,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["bytebuf"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"le","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"gt","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"ge","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"default","","",0,[[],["bytebuf"]]],[11,"as_mut","","",0,[[["self"]],["vec"]]],[11,"as_mut","","",0,N],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",1,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytebuf"]],["bool"]]],[11,"cmp","","",1,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["bytebuf"]],["ordering"]]],[11,"deref","","",1,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"hash","","",0,N],[11,"into_deserializer","","",1,N],[11,"into_deserializer","","",0,N],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["bytes"]]]],[11,"deserialize","","",0,[[["d"]],["result",["bytebuf"]]]]],"paths":[[3,"ByteBuf"],[3,"Bytes"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[24,"Serialize","serde_derive","",N,N],[24,"Deserialize","","",N,N]],"paths":[]};
searchIndex["serde_hjson"]={"doc":"JSON and serialization - TODO/hjson","items":[[0,"builder","serde_hjson","JSON Builders",N,N],[3,"ArrayBuilder","serde_hjson::builder","This structure provides a simple interface for constructing a JSON array.",N,N],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",N,N],[11,"new","","Construct an `ObjectBuilder`.",0,[[],["arraybuilder"]]],[11,"unwrap","","Return the constructed `Value`.",0,[[["self"]],["value"]]],[11,"push","","Insert a value into the array.",0,[[["self"],["t"]],["arraybuilder"]]],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"new","","Construct an `ObjectBuilder`.",1,[[],["objectbuilder"]]],[11,"unwrap","","Return the constructed `Value`.",1,[[["self"]],["value"]]],[11,"insert","","Insert a key-value pair into the object.",1,[[["self"],["s"],["v"]],["objectbuilder"]]],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[0,"de","serde_hjson","Hjson Deserialization",N,N],[3,"Deserializer","serde_hjson::de","A structure that deserializes Hjson into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple Hjson values.",N,N],[5,"from_iter","","Decodes a Hjson value from an iterator over an iterator `Iterator<Item=u8>`.",N,[[["i"]],["result"]]],[5,"from_reader","","Decodes a Hjson value from a `std::io::Read`.",N,[[["r"]],["result"]]],[5,"from_slice","","Decodes a Hjson value from a byte slice `&[u8]`.",N,N],[5,"from_str","","Decodes a Hjson value from a `&str`.",N,[[["str"]],["result"]]],[11,"new","","Creates the Hjson parser from an `std::iter::Iterator`.",2,[[["iter"]],["deserializer"]]],[11,"new_for_root","","Creates the Hjson parser from an `std::iter::Iterator`.",2,[[["iter"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,[[["self"]],["result"]]],[11,"new","","Returns an `Iterator` of decoded Hjson values from an iterator over `Iterator<Item=u8>`.",3,[[["iter"]],["streamdeserializer"]]],[0,"error","serde_hjson","JSON Errors",N,N],[4,"ErrorCode","serde_hjson::error","The errors that can arise while parsing a JSON stream.",N,N],[13,"Custom","","Catchall for syntax error messages",4,N],[13,"InvalidType","","Incorrect type from value",4,N],[13,"InvalidValue","","Incorrect value",4,N],[13,"InvalidLength","","Invalid length",4,N],[13,"UnknownVariant","","Unknown variant in an enum.",4,N],[13,"UnknownField","","Unknown field in struct.",4,N],[13,"MissingField","","Struct is missing a field.",4,N],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,N],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,N],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,N],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,N],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,N],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,N],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,N],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,N],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,N],[13,"InvalidEscape","","Invalid hex escape code.",4,N],[13,"InvalidNumber","","Invalid number.",4,N],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,N],[13,"KeyMustBeAString","","Object key is not a string.",4,N],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,N],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,N],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,N],[13,"PunctuatorInQlString","","Found a punctuator character when excpecting a quoteless string.",4,N],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",N,N],[13,"Syntax","","The JSON value had some syntatic error.",5,N],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,N],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,N],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",N,N],[0,"ser","serde_hjson","Hjson Serialization",N,N],[3,"Serializer","serde_hjson::ser","A structure for serializing Rust values into Hjson.",N,N],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a Hjson string.",N,N],[5,"quote_str","","Serializes and escapes a `&str` into a Hjson string.",N,[[["w"],["f"],["str"]],["result"]]],[5,"ml_str","","Serializes and escapes a `&str` into a multiline Hjson string.",N,[[["w"],["f"],["str"]],["result"]]],[5,"escape_key","","Serializes and escapes a `&str` into a Hjson key.",N,[[["w"],["str"]],["result"]]],[5,"to_writer","","Encode the specified struct into a Hjson `[u8]` writer.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Encode the specified struct into a Hjson `[u8]` buffer.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Encode the specified struct into a Hjson `String` buffer.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters",N,N],[10,"open","","Called when serializing a '{' or '['.",6,[[["self"],["w"],["u8"]],["result"]]],[10,"comma","","Called when serializing a ','.",6,[[["self"],["w"],["bool"]],["result"]]],[10,"colon","","Called when serializing a ':'.",6,[[["self"],["w"]],["result"]]],[10,"close","","Called when serializing a '}' or ']'.",6,[[["self"],["w"],["u8"]],["result"]]],[10,"newline","","Newline with indent.",6,[[["self"],["w"],["i32"]],["result"]]],[10,"start_value","","Start a value.",6,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new Hjson serializer.",7,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new Hjson visitor whose output will be written to the writer specified.",7,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,[[["self"]],["w"]]],[0,"value","serde_hjson","JSON Value",N,N],[3,"Serializer","serde_hjson::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",N,N],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",N,N],[4,"Value","","Represents a JSON value",N,N],[13,"Null","","Represents a JSON null value",8,N],[13,"Bool","","Represents a JSON Boolean",8,N],[13,"I64","","Represents a JSON signed integer",8,N],[13,"U64","","Represents a JSON unsigned integer",8,N],[13,"F64","","Represents a JSON floating point number",8,N],[13,"String","","Represents a JSON string",8,N],[13,"Array","","Represents a JSON array",8,N],[13,"Object","","Represents a JSON object",8,N],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",N,[[["t"]],["value"]]],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",N,[[["value"]],["result",["error"]]]],[6,"Map","","Represents a key/value type.",N,N],[6,"MapIntoIter","","Represents the IntoIter type.",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",9,[[["self"]],["value"]]],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",8,[[["self"],["str"]],["option",["value"]]]],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",8,N],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",8,[[["self"],["str"]],["option",["value"]]]],[11,"pointer","","Looks up a value by a JSON Pointer.",8,[[["self"],["str"]],["option",["value"]]]],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",8,[[["self"],["str"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",8,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",8,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",8,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",8,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",8,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",8,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",8,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",8,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",8,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",8,[[["self"]],["option"]]],[11,"new","","Construct a new `Serializer`.",10,[[],["serializer"]]],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,[[["self"]],["value"]]],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,[[["value"]],["deserializer"]]],[14,"forward_to_deserialize","serde_hjson","",N,N],[11,"from","serde_hjson::builder","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","serde_hjson::de","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","serde_hjson::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","serde_hjson::ser","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","serde_hjson::value","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"to_json","","",8,[[["self"]],["value"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"clone","serde_hjson::error","",4,[[["self"]],["errorcode"]]],[11,"clone","serde_hjson::value","",8,[[["self"]],["value"]]],[11,"from","serde_hjson::error","",5,[[["error"]],["error"]]],[11,"from","","",5,[[["fromutf8error"]],["error"]]],[11,"from","","",5,[[["error"]],["error"]]],[11,"next","serde_hjson::de","",3,[[["self"]],["option",["result"]]]],[11,"default","serde_hjson::value","",10,[[],["self"]]],[11,"eq","serde_hjson::error","",4,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorcode"]],["bool"]]],[11,"eq","serde_hjson::value","",8,[[["self"],["value"]],["bool"]]],[11,"ne","","",8,[[["self"],["value"]],["bool"]]],[11,"fmt","serde_hjson::error","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_hjson::value","Serializes a json value into a string",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_hjson::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_hjson::value","Serializes a json value into a string",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",8,[[["str"]],["result",["value","error"]]]],[11,"description","serde_hjson::error","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"end_of_stream","","",5,[[],["error"]]],[11,"invalid_type","","",5,[[["type"]],["error"]]],[11,"invalid_value","","",5,[[["str"]],["error"]]],[11,"invalid_length","","",5,[[["usize"]],["error"]]],[11,"unknown_variant","","",5,[[["str"]],["error"]]],[11,"unknown_field","","",5,[[["str"]],["error"]]],[11,"missing_field","","",5,[[["str"]],["error"]]],[11,"visit_variant","serde_hjson::de","",2,[[["self"]],["result"]]],[11,"visit_unit","","",2,[[["self"]],["result"]]],[11,"visit_newtype","","",2,[[["self"]],["result"]]],[11,"visit_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"visit_struct","","",2,N],[11,"deserialize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,[[["self"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,N],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_usize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_isize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_struct_field","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize","serde_hjson::value","",11,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",11,N],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_usize","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_isize","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_struct_field","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result",["value"]]]],[11,"custom","serde_hjson::error","Raised when there is general error when deserializing a type.",5,[[["t"]],["error"]]],[11,"serialize","serde_hjson::value","",8,[[["self"],["s"]],["result"]]],[11,"serialize_bool","serde_hjson::ser","",7,[[["self"],["bool"]],["result"]]],[11,"serialize_isize","","",7,[[["self"],["isize"]],["result"]]],[11,"serialize_i8","","",7,[[["self"],["i8"]],["result"]]],[11,"serialize_i16","","",7,[[["self"],["i16"]],["result"]]],[11,"serialize_i32","","",7,[[["self"],["i32"]],["result"]]],[11,"serialize_i64","","",7,[[["self"],["i64"]],["result"]]],[11,"serialize_usize","","",7,[[["self"],["usize"]],["result"]]],[11,"serialize_u8","","",7,[[["self"],["u8"]],["result"]]],[11,"serialize_u16","","",7,[[["self"],["u16"]],["result"]]],[11,"serialize_u32","","",7,[[["self"],["u32"]],["result"]]],[11,"serialize_u64","","",7,[[["self"],["u64"]],["result"]]],[11,"serialize_f32","","",7,[[["self"],["f32"]],["result"]]],[11,"serialize_f64","","",7,[[["self"],["f64"]],["result"]]],[11,"serialize_char","","",7,[[["self"],["char"]],["result"]]],[11,"serialize_str","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_bytes","","",7,N],[11,"serialize_unit","","",7,[[["self"]],["result"]]],[11,"serialize_unit_struct","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_unit_variant","","",7,[[["self"],["str"],["usize"],["str"]],["result"]]],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,[[["self"],["str"],["t"]],["result"]]],[11,"serialize_newtype_variant","","",7,[[["self"],["str"],["usize"],["str"],["t"]],["result"]]],[11,"serialize_none","","",7,[[["self"]],["result"]]],[11,"serialize_some","","",7,[[["self"],["v"]],["result"]]],[11,"serialize_seq","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_seq_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_seq_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_seq_fixed_size","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_struct_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_variant_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_variant_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_map","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_map_key","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_value","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_variant_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_variant_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_bool","serde_hjson::value","",10,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_isize","","",10,[[["self"],["isize"]],["result",["error"]]]],[11,"serialize_i8","","",10,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","",10,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","",10,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","",10,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_usize","","",10,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_u8","","",10,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","",10,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","",10,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","",10,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","",10,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","",10,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","",10,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","",10,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_bytes","","",10,N],[11,"serialize_unit","","",10,[[["self"]],["result",["error"]]]],[11,"serialize_unit_struct","","",10,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","",10,[[["self"],["str"],["usize"],["str"]],["result",["error"]]]],[11,"serialize_newtype_struct","","",10,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_newtype_variant","","",10,[[["self"],["str"],["usize"],["str"],["t"]],["result",["error"]]]],[11,"serialize_none","","",10,[[["self"]],["result",["error"]]]],[11,"serialize_some","","",10,[[["self"],["v"]],["result",["error"]]]],[11,"serialize_seq","","",10,[[["self"],["option",["usize"]]],["result",["vec","error"]]]],[11,"serialize_seq_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_seq_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_seq_fixed_size","","",10,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple","","",10,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_struct","","",10,[[["self"],["str"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_struct_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_struct_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_variant","","",10,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["tuplevariantstate","error"]]]],[11,"serialize_tuple_variant_elt","","",10,[[["self"],["tuplevariantstate"],["t"]],["result",["error"]]]],[11,"serialize_tuple_variant_end","","",10,[[["self"],["tuplevariantstate"]],["result",["error"]]]],[11,"serialize_map","","",10,[[["self"],["option",["usize"]]],["result",["mapstate","error"]]]],[11,"serialize_map_key","","",10,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_value","","",10,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_end","","",10,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct","","",10,[[["self"],["str"],["usize"]],["result",["mapstate","error"]]]],[11,"serialize_struct_elt","","",10,[[["self"],["mapstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_end","","",10,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct_variant","","",10,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["structvariantstate","error"]]]],[11,"serialize_struct_variant_elt","","",10,[[["self"],["structvariantstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_variant_end","","",10,[[["self"],["structvariantstate"]],["result",["error"]]]]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,[[["self"]],["usize"]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",4,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,[[["self"]],["bool"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",5,N],[13,"Occupied","","An occupied Entry.",5,N],[11,"new","","Makes a new empty Map.",6,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",6,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",6,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",6,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",6,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",6,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",6,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",6,[[["self"]],["valuesmut"]]],[11,"key","","Returns a reference to this entry's key.",5,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",8,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,[[["self"]],["value"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",9,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",9,N],[13,"Solidus","","An escaped solidus `/`",9,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",9,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",9,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",9,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",9,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",9,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",9,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",10,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",10,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",10,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",10,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",10,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",10,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",10,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",10,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",10,[[["self"],["w"]],["result"]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn't need any escaping to the specified writer.",10,[[["self"],["w"],["str"]],["result"]]],[11,"new","","Creates a new JSON serializer.",11,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",11,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",11,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",11,[[["self"]],["w"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",12,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",12,N],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"is_i64","serde_json","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",13,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",13,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",13,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",13,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",13,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",13,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",13,[[["f64"]],["option",["number"]]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",14,[[["r"]],["self"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",15,N],[11,"new","","Create a JSON input source to read from a UTF-8 string.",16,[[["str"]],["self"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N],[11,"from","serde_json::de","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","serde_json::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","serde_json::ser","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","serde_json::map","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","serde_json","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","serde_json::value","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","serde_json::de","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","serde_json::error","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"from","serde_json::map","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","serde_json::ser","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"begin_array","","",12,[[["self"],["w"]],["result"]]],[11,"end_array","","",12,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",12,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",12,[[["self"],["w"]],["result"]]],[11,"begin_object","","",12,[[["self"],["w"]],["result"]]],[11,"end_object","","",12,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",12,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",12,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",12,[[["self"],["w"]],["result"]]],[11,"next","serde_json::de","",14,[[["self"]],["result",["option"]]]],[11,"peek","","",14,[[["self"]],["result",["option"]]]],[11,"discard","","",14,[[["self"]]]],[11,"position","","",14,[[["self"]],["position"]]],[11,"peek_position","","",14,[[["self"]],["position"]]],[11,"byte_offset","","",14,[[["self"]],["usize"]]],[11,"parse_str","","",14,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",14,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",14,[[["self"]],["result"]]],[11,"decode_hex_escape","","",14,[[["self"]],["result",["u16"]]]],[11,"next","","",15,[[["self"]],["result",["option"]]]],[11,"peek","","",15,[[["self"]],["result",["option"]]]],[11,"discard","","",15,[[["self"]]]],[11,"position","","",15,[[["self"]],["position"]]],[11,"peek_position","","",15,[[["self"]],["position"]]],[11,"byte_offset","","",15,[[["self"]],["usize"]]],[11,"parse_str","","",15,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",15,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",15,[[["self"]],["result"]]],[11,"decode_hex_escape","","",15,[[["self"]],["result",["u16"]]]],[11,"next","","",16,[[["self"]],["result",["option"]]]],[11,"peek","","",16,[[["self"]],["result",["option"]]]],[11,"discard","","",16,[[["self"]]]],[11,"position","","",16,[[["self"]],["position"]]],[11,"peek_position","","",16,[[["self"]],["position"]]],[11,"byte_offset","","",16,[[["self"]],["usize"]]],[11,"parse_str","","",16,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",16,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",16,[[["self"]],["result"]]],[11,"decode_hex_escape","","",16,[[["self"]],["result",["u16"]]]],[11,"clone","serde_json::error","",3,[[["self"]],["category"]]],[11,"clone","serde_json::map","",6,[[["self"]],["self"]]],[11,"clone","serde_json::ser","",23,[[["self"]],["compactformatter"]]],[11,"clone","","",12,[[["self"]],["prettyformatter"]]],[11,"clone","serde_json::value","",0,[[["self"]],["value"]]],[11,"clone","serde_json","",13,[[["self"]],["number"]]],[11,"extend","serde_json::map","",6,[[["self"],["t"]]]],[11,"from","serde_json::value","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","serde_json","",13,[[["u8"]],["self"]]],[11,"from","","",13,[[["u16"]],["self"]]],[11,"from","","",13,[[["u32"]],["self"]]],[11,"from","","",13,[[["u64"]],["self"]]],[11,"from","","",13,[[["usize"]],["self"]]],[11,"from","","",13,[[["i8"]],["self"]]],[11,"from","","",13,[[["i16"]],["self"]]],[11,"from","","",13,[[["i32"]],["self"]]],[11,"from","","",13,[[["i64"]],["self"]]],[11,"from","","",13,[[["isize"]],["self"]]],[11,"next","serde_json::de","",2,[[["self"]],["option",["result"]]]],[11,"next","serde_json::map","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"len","","",17,[[["self"]],["usize"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"len","","",20,[[["self"]],["usize"]]],[11,"len","","",21,[[["self"]],["usize"]]],[11,"len","","",22,[[["self"]],["usize"]]],[11,"default","","",6,[[],["self"]]],[11,"default","serde_json::ser","",12,[[],["self"]]],[11,"default","serde_json::value","",0,[[],["value"]]],[11,"eq","serde_json::error","",3,[[["self"],["category"]],["bool"]]],[11,"eq","serde_json::map","",6,[[["self"],["self"]],["bool"]]],[11,"eq","serde_json::value","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","serde_json","",13,[[["self"],["number"]],["bool"]]],[11,"ne","","",13,[[["self"],["number"]],["bool"]]],[11,"next_back","serde_json::map","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"next_back","","",21,[[["self"]],["option"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"into_iter","","",6,N],[11,"fmt","serde_json::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::error","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::map","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde_json::ser","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json","",13,[[["self"],["formatter"]],["result"]]],[11,"index","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index","serde_json::value","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index_mut","serde_json::value","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"from_iter","serde_json::map","",6,[[["t"]],["self"]]],[11,"from_iter","serde_json::value","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"from_str","serde_json","",13,[[["str"]],["result"]]],[11,"from_str","serde_json::value","",0,[[["str"]],["result",["value","error"]]]],[11,"description","serde_json::error","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"custom","","",4,[[["t"]],["error"]]],[11,"serialize","serde_json::map","",6,[[["self"],["s"]],["result"]]],[11,"serialize","serde_json::value","",0,[[["self"],["s"]],["result"]]],[11,"serialize","serde_json","",13,[[["self"],["s"]],["result"]]],[11,"deserialize","serde_json::map","",6,[[["d"]],["result"]]],[11,"deserialize","serde_json::value","",0,[[["d"]],["result",["value"]]]],[11,"deserialize","serde_json","",13,[[["d"]],["result",["number"]]]],[11,"custom","serde_json::error","",4,[[["t"]],["error"]]],[11,"invalid_type","","",4,[[["unexpected"],["expected"]],["self"]]],[11,"deserialize_any","serde_json::value","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_any","serde_json","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"]]};
searchIndex["serde_test"]={"doc":"","items":[[3,"Serializer","serde_test","",N,N],[3,"Deserializer","","",N,N],[4,"Token","","",N,N],[13,"Bool","","",0,N],[13,"Isize","","",0,N],[13,"I8","","",0,N],[13,"I16","","",0,N],[13,"I32","","",0,N],[13,"I64","","",0,N],[13,"Usize","","",0,N],[13,"U8","","",0,N],[13,"U16","","",0,N],[13,"U32","","",0,N],[13,"U64","","",0,N],[13,"F32","","",0,N],[13,"F64","","",0,N],[13,"Char","","",0,N],[13,"Str","","",0,N],[13,"String","","",0,N],[13,"Bytes","","",0,N],[13,"Option","","",0,N],[13,"Unit","","",0,N],[13,"UnitStruct","","",0,N],[13,"StructNewType","","",0,N],[13,"EnumStart","","",0,N],[13,"EnumUnit","","",0,N],[13,"EnumNewType","","",0,N],[13,"SeqStart","","",0,N],[13,"SeqArrayStart","","",0,N],[13,"SeqSep","","",0,N],[13,"SeqEnd","","",0,N],[13,"TupleStart","","",0,N],[13,"TupleSep","","",0,N],[13,"TupleEnd","","",0,N],[13,"TupleStructStart","","",0,N],[13,"TupleStructSep","","",0,N],[13,"TupleStructEnd","","",0,N],[13,"MapStart","","",0,N],[13,"MapSep","","",0,N],[13,"MapEnd","","",0,N],[13,"StructStart","","",0,N],[13,"StructSep","","",0,N],[13,"StructEnd","","",0,N],[13,"EnumSeqStart","","",0,N],[13,"EnumSeqSep","","",0,N],[13,"EnumSeqEnd","","",0,N],[13,"EnumMapStart","","",0,N],[13,"EnumMapSep","","",0,N],[13,"EnumMapEnd","","",0,N],[4,"Error","","",N,N],[13,"Custom","","",1,N],[13,"InvalidValue","","",1,N],[13,"EndOfStream","","",1,N],[13,"InvalidType","","",1,N],[13,"InvalidLength","","",1,N],[13,"UnknownVariant","","",1,N],[13,"UnknownField","","",1,N],[13,"MissingField","","",1,N],[13,"DuplicateField","","",1,N],[13,"InvalidName","","",1,N],[13,"UnexpectedToken","","",1,N],[5,"assert_tokens","","",N,N],[5,"assert_ser_tokens","","",N,N],[5,"assert_ser_tokens_error","","Expect an error serializing `T`.",N,N],[5,"assert_de_tokens","","",N,N],[5,"assert_de_tokens_error","","Expect an error deserializing tokens into a `T`.",N,N],[11,"new","","",2,[[["i"]],["serializer"]]],[11,"next_token","","",2,[[["self"]],["option",["token"]]]],[11,"new","","",3,[[["i"]],["deserializer"]]],[11,"next_token","","",3,[[["self"]],["option",["token"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"custom","","",1,[[["t"]],["error"]]],[11,"end_of_stream","","",1,[[],["error"]]],[11,"invalid_type","","",1,[[["type"]],["error"]]],[11,"invalid_value","","",1,[[["str"]],["error"]]],[11,"invalid_length","","",1,[[["usize"]],["error"]]],[11,"unknown_variant","","",1,[[["str"]],["error"]]],[11,"unknown_field","","",1,[[["str"]],["error"]]],[11,"missing_field","","",1,[[["str"]],["error"]]],[11,"duplicate_field","","",1,[[["str"]],["error"]]],[11,"deserialize_seq","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_struct_field","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_bool","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",3,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","Hook into `Option` deserializing so we can treat `Unit` as a `None`, or a regular value as `Some(value)`.",3,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",3,N],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_seq_fixed_size","","",3,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_struct","","",3,N],[11,"custom","","",1,[[["t"]],["error"]]],[11,"invalid_value","","",1,[[["str"]],["error"]]],[11,"serialize_unit","","",2,[[["self"]],["result",["error"]]]],[11,"serialize_newtype_variant","","",2,[[["self"],["str"],["usize"],["str"],["t"]],["result",["error"]]]],[11,"serialize_unit_struct","","",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","",2,[[["self"],["str"],["usize"],["str"]],["result",["error"]]]],[11,"serialize_bool","","",2,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_isize","","",2,[[["self"],["isize"]],["result",["error"]]]],[11,"serialize_i8","","",2,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","",2,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","",2,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","",2,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_usize","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_u8","","",2,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","",2,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","",2,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","",2,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","",2,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","",2,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","",2,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_none","","",2,[[["self"]],["result",["error"]]]],[11,"serialize_some","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"serialize_seq","","",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_seq_elt","","",2,N],[11,"serialize_seq_end","","",2,N],[11,"serialize_seq_fixed_size","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_elt","","",2,N],[11,"serialize_tuple_end","","",2,N],[11,"serialize_newtype_struct","","",2,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_tuple_struct","","",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_struct_elt","","",2,N],[11,"serialize_tuple_struct_end","","",2,N],[11,"serialize_tuple_variant","","",2,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_variant_elt","","",2,N],[11,"serialize_tuple_variant_end","","",2,N],[11,"serialize_map","","",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_map_key","","",2,N],[11,"serialize_map_value","","",2,N],[11,"serialize_map_end","","",2,N],[11,"serialize_struct","","",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_elt","","",2,N],[11,"serialize_struct_end","","",2,N],[11,"serialize_struct_variant","","",2,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_variant_elt","","",2,N],[11,"serialize_struct_variant_end","","",2,N],[11,"serialize_bytes","","",2,N]],"paths":[[4,"Token"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["sha1"]={"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",N,N],[3,"Digest","","Digest generated from a `Sha1` instance.",N,N],[3,"DigestParseError","","Indicates that a digest couldn't be parsed.",N,N],[17,"DIGEST_LENGTH","","The length of a SHA1 digest in bytes",N,N],[11,"new","","Creates an fresh sha1 hash object.",0,[[],["sha1"]]],[11,"reset","","Resets the hash object to it's initial state.",0,[[["self"]]]],[11,"update","","Update hash with input data.",0,N],[11,"digest","","Retrieve digest result.",0,[[["self"]],["digest"]]],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["digest"]],["bool"]]],[11,"ne","","",1,[[["self"],["digest"]],["bool"]]],[11,"eq","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"cmp","","",1,[[["self"],["digest"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["digestparseerror"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["digest"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["digest"]],["bool"]]],[11,"le","","",1,[[["self"],["digest"]],["bool"]]],[11,"gt","","",1,[[["self"],["digest"]],["bool"]]],[11,"ge","","",1,[[["self"],["digest"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["digestparseerror"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"le","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"gt","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"ge","","",2,[[["self"],["digestparseerror"]],["bool"]]],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"from_str","","",1,[[["str"]],["result",["digest","digestparseerror"]]]],[11,"clone","","",0,[[["self"]],["sha1"]]],[11,"clone","","",1,[[["self"]],["digest"]]],[11,"clone","","",2,[[["self"]],["digestparseerror"]]],[11,"default","","",1,[[],["digest"]]]],"paths":[[3,"Sha1"],[3,"Digest"],[3,"DigestParseError"]]};
searchIndex["sha2"]={"doc":"An implementation of the SHA-2 cryptographic hash algorithms.","items":[[8,"Digest","sha2","The `Digest` trait specifies an interface common for digest functions.",N,N],[11,"new","","Create new hasher instance",0,[[],["self"]]],[11,"input","","Digest input data. This method can be called repeatedly for use with streaming messages.",0,N],[11,"result","","Retrieve the digest result. This method consumes digest instance.",0,[[["self"]],["genericarray",["u8"]]]],[11,"digest","","Convenience function to compute hash of the `data`. It will handle hasher creation, data feeding and finalization.",0,N],[11,"digest_str","","Convenience function to compute hash of the string. It's equivalent to `digest(input_string.as_bytes())`.",0,[[["str"]],["genericarray",["u8"]]]],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",N,N],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",N,N],[3,"Sha512","","The SHA-512 hash algorithm with the SHA-512 initial hash value.",N,N],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",N,N],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",N,N],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",1,[[["self"]],["sha256"]]],[11,"clone","","",2,[[["self"]],["sha224"]]],[11,"clone","","",3,[[["self"]],["sha512"]]],[11,"clone","","",4,[[["self"]],["sha384"]]],[11,"clone","","",6,[[["self"]],["sha512trunc256"]]],[11,"clone","","",5,[[["self"]],["sha512trunc224"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",6,[[],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"process","","",1,N],[11,"process","","",2,N],[11,"process","","",3,N],[11,"process","","",4,N],[11,"process","","",6,N],[11,"process","","",5,N],[11,"fixed_result","","",1,[[["self"]],["genericarray",["u8"]]]],[11,"fixed_result","","",2,[[["self"]],["genericarray",["u8"]]]],[11,"fixed_result","","",3,[[["self"]],["genericarray",["u8"]]]],[11,"fixed_result","","",4,[[["self"]],["genericarray",["u8"]]]],[11,"fixed_result","","",6,[[["self"]],["genericarray",["u8"]]]],[11,"fixed_result","","",5,[[["self"]],["genericarray",["u8"]]]]],"paths":[[8,"Digest"],[3,"Sha256"],[3,"Sha224"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc224"],[3,"Sha512Trunc256"]]};
searchIndex["snowflake"]={"doc":"A crate for quickly generating unique IDs with guaranteed properties.","items":[[3,"ProcessUniqueId","snowflake","Process unique IDs are guaranteed to be unique within the current process, for the lifetime of the current process.",N,N],[11,"new","","Create a new unique ID.",0,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["processuniqueid"]]],[11,"partial_cmp","","",0,[[["self"],["processuniqueid"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"le","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"gt","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"ge","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"ne","","",0,[[["self"],["processuniqueid"]],["bool"]]],[11,"cmp","","",0,[[["self"],["processuniqueid"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N]],"paths":[[3,"ProcessUniqueId"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Async","","`async`",N,N],[12,"0","","",139,N],[3,"Auto","","`auto`",N,N],[12,"0","","",140,N],[3,"Box","","`box`",N,N],[12,"0","","",141,N],[3,"Break","","`break`",N,N],[12,"0","","",142,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",143,N],[3,"Catch","","`catch`",N,N],[12,"0","","",144,N],[3,"Const","","`const`",N,N],[12,"0","","",145,N],[3,"Continue","","`continue`",N,N],[12,"0","","",146,N],[3,"Crate","","`crate`",N,N],[12,"0","","",147,N],[3,"Default","","`default`",N,N],[12,"0","","",148,N],[3,"Do","","`do`",N,N],[12,"0","","",149,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",150,N],[3,"Else","","`else`",N,N],[12,"0","","",151,N],[3,"Enum","","`enum`",N,N],[12,"0","","",152,N],[3,"Extern","","`extern`",N,N],[12,"0","","",153,N],[3,"Fn","","`fn`",N,N],[12,"0","","",154,N],[3,"For","","`for`",N,N],[12,"0","","",155,N],[3,"If","","`if`",N,N],[12,"0","","",156,N],[3,"Impl","","`impl`",N,N],[12,"0","","",157,N],[3,"In","","`in`",N,N],[12,"0","","",158,N],[3,"Let","","`let`",N,N],[12,"0","","",159,N],[3,"Loop","","`loop`",N,N],[12,"0","","",160,N],[3,"Macro","","`macro`",N,N],[12,"0","","",161,N],[3,"Match","","`match`",N,N],[12,"0","","",162,N],[3,"Mod","","`mod`",N,N],[12,"0","","",163,N],[3,"Move","","`move`",N,N],[12,"0","","",164,N],[3,"Mut","","`mut`",N,N],[12,"0","","",165,N],[3,"Pub","","`pub`",N,N],[12,"0","","",166,N],[3,"Ref","","`ref`",N,N],[12,"0","","",167,N],[3,"Return","","`return`",N,N],[12,"0","","",168,N],[3,"Self_","","`self`",N,N],[12,"0","","",169,N],[3,"Static","","`static`",N,N],[12,"0","","",170,N],[3,"Struct","","`struct`",N,N],[12,"0","","",171,N],[3,"Super","","`super`",N,N],[12,"0","","",172,N],[3,"Trait","","`trait`",N,N],[12,"0","","",173,N],[3,"Type","","`type`",N,N],[12,"0","","",174,N],[3,"Union","","`union`",N,N],[12,"0","","",175,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",176,N],[3,"Use","","`use`",N,N],[12,"0","","",177,N],[3,"Where","","`where`",N,N],[12,"0","","",178,N],[3,"While","","`while`",N,N],[12,"0","","",179,N],[3,"Yield","","`yield`",N,N],[12,"0","","",180,N],[11,"new","","",87,[[["span"]],["self"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"parse_inner","syn","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",181,[[["self"]],["turbofish"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"new","","",182,[[["str"],["span"]],["self"]]],[11,"value","","",182,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",182,[[["self"]],["result",["parseerror"]]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"set_span","","",182,[[["self"],["span"]]]],[11,"new","","",183,N],[11,"value","","",183,[[["self"]],["vec",["u8"]]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"set_span","","",183,[[["self"],["span"]]]],[11,"new","","",184,[[["u8"],["span"]],["self"]]],[11,"value","","",184,[[["self"]],["u8"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"set_span","","",184,[[["self"],["span"]]]],[11,"new","","",185,[[["char"],["span"]],["self"]]],[11,"value","","",185,[[["self"]],["char"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"set_span","","",185,[[["self"],["span"]]]],[11,"new","","",186,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",186,[[["self"]],["u64"]]],[11,"suffix","","",186,[[["self"]],["intsuffix"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"set_span","","",186,[[["self"],["span"]]]],[11,"new","","",187,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",187,[[["self"]],["f64"]]],[11,"suffix","","",187,[[["self"]],["floatsuffix"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"set_span","","",187,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",188,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",188,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",188,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",189,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",189,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",189,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",189,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",189,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",189,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",189,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",189,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",189,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",190,N],[13,"End","","",190,N],[11,"new","","Creates an empty punctuated sequence.",191,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",191,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",191,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",191,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",191,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",191,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",191,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",191,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",191,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",191,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",191,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",191,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",191,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",191,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",191,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",191,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",191,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",191,[[["self"],["usize"],["t"]]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",190,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",190,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",190,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",190,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",190,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",190,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",191,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",191,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",191,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",191,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",191,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",191,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",191,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",191,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",192,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",193,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",193,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",194,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",194,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",194,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",194,[[["self"],["str"]],["result",["parseerror"]]]],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",195,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",196,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",196,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",196,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",196,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",196,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",196,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",196,[[["self"],["binop"]]]],[11,"visit_binding","","",196,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",196,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",196,[[["self"],["constparam"]]]],[11,"visit_data","","",196,[[["self"],["data"]]]],[11,"visit_data_enum","","",196,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",196,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",196,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",196,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",196,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",196,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",196,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",196,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",196,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",196,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",196,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",196,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",196,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",196,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",196,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",196,[[["self"],["field"]]]],[11,"visit_fields","","",196,[[["self"],["fields"]]]],[11,"visit_fields_named","","",196,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",196,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",196,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",196,[[["self"],["genericparam"]]]],[11,"visit_generics","","",196,[[["self"],["generics"]]]],[11,"visit_ident","","",196,[[["self"],["ident"]]]],[11,"visit_index","","",196,[[["self"],["index"]]]],[11,"visit_lifetime","","",196,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",196,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",196,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",196,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",196,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",196,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",196,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",196,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",196,[[["self"],["litint"]]]],[11,"visit_lit_str","","",196,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",196,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",196,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",196,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",196,[[["self"],["member"]]]],[11,"visit_meta","","",196,[[["self"],["meta"]]]],[11,"visit_meta_list","","",196,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",196,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",196,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",196,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",196,[[["self"],["path"]]]],[11,"visit_path_arguments","","",196,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",196,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",196,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",196,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",196,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",196,[[["self"],["qself"]]]],[11,"visit_return_type","","",196,[[["self"],["returntype"]]]],[11,"visit_span","","",196,[[["self"],["span"]]]],[11,"visit_trait_bound","","",196,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",196,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",196,[[["self"],["type"]]]],[11,"visit_type_array","","",196,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",196,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",196,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",196,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",196,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",196,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",196,[[["self"],["typenever"]]]],[11,"visit_type_param","","",196,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",196,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",196,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",196,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",196,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",196,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",196,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",196,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",196,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",196,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",196,[[["self"],["unop"]]]],[11,"visit_variant","","",196,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",196,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",196,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",196,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",196,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",196,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",196,[[["self"],["wherepredicate"]]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"span","","",197,[[["self"]],["span"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_string","","",197,[[["self"]],["string"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"not_found","","",11,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"not_found","","",187,[[["str"],["str"]],["e"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","syn::token","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"not_found","","",115,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"not_found","","",117,[[["str"],["str"]],["e"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"not_found","","",118,[[["str"],["str"]],["e"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"not_found","","",119,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"not_found","","",166,[[["str"],["str"]],["e"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"from","syn::buffer","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",191,[[["self"]],["span"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"into_iter","","",191,[[["self"]],["i"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"into_iter","","",230,[[["self"]],["i"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"into_iter","","",232,[[["self"]],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"not_found","","",232,[[["str"],["str"]],["e"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"into_iter","","",233,[[["self"]],["i"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"not_found","","",233,[[["str"],["str"]],["e"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"into_iter","","",234,[[["self"]],["i"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"not_found","","",234,[[["str"],["str"]],["e"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"into_iter","","",235,[[["self"]],["i"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"not_found","","",235,[[["str"],["str"]],["e"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"from","syn::synom","",236,[[["t"]],["t"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_string","","",236,[[["self"]],["string"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"hash","syn","",197,N],[11,"eq","","",197,[[["self"],["t"]],["bool"]]],[11,"eq","","",197,[[["self"],["ident"]],["bool"]]],[11,"clone","","",197,[[["self"]],["ident"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",197,[[["self"],["ident"]],["ordering"]]],[11,"partial_cmp","","",197,[[["self"],["ident"]],["option",["ordering"]]]],[11,"to_tokens","","",197,N],[11,"parse","syn::token","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["async"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["box"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["break"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["const"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["default"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["do"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["else"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["for"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["if"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["in"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["let"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["match"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["move"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["return"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["static"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["super"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["type"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["union"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["use"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["where"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["while"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"parse","","",180,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",180,[[],["option",["str"]]]],[11,"parse","syn","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",182,[[["cursor"]],["presult"]]],[11,"description","","",182,[[],["option",["str"]]]],[11,"parse","","",183,[[["cursor"]],["presult"]]],[11,"description","","",183,[[],["option",["str"]]]],[11,"parse","","",184,[[["cursor"]],["presult"]]],[11,"description","","",184,[[],["option",["str"]]]],[11,"parse","","",185,[[["cursor"]],["presult"]]],[11,"description","","",185,[[],["option",["str"]]]],[11,"parse","","",186,[[["cursor"]],["presult"]]],[11,"description","","",186,[[],["option",["str"]]]],[11,"parse","","",187,[[["cursor"]],["presult"]]],[11,"description","","",187,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse","","",197,[[["cursor"]],["presult"]]],[11,"description","","",197,[[],["option",["str"]]]],[11,"parse_any","","",197,[[["cursor"]],["presult"]]],[11,"clone","syn::token","",87,[[["self"]],["underscore"]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"clone","","",139,[[["self"]],["async"]]],[11,"clone","","",140,[[["self"]],["auto"]]],[11,"clone","","",141,[[["self"]],["box"]]],[11,"clone","","",142,[[["self"]],["break"]]],[11,"clone","","",143,[[["self"]],["capself"]]],[11,"clone","","",144,[[["self"]],["catch"]]],[11,"clone","","",145,[[["self"]],["const"]]],[11,"clone","","",146,[[["self"]],["continue"]]],[11,"clone","","",147,[[["self"]],["crate"]]],[11,"clone","","",148,[[["self"]],["default"]]],[11,"clone","","",149,[[["self"]],["do"]]],[11,"clone","","",150,[[["self"]],["dyn"]]],[11,"clone","","",151,[[["self"]],["else"]]],[11,"clone","","",152,[[["self"]],["enum"]]],[11,"clone","","",153,[[["self"]],["extern"]]],[11,"clone","","",154,[[["self"]],["fn"]]],[11,"clone","","",155,[[["self"]],["for"]]],[11,"clone","","",156,[[["self"]],["if"]]],[11,"clone","","",157,[[["self"]],["impl"]]],[11,"clone","","",158,[[["self"]],["in"]]],[11,"clone","","",159,[[["self"]],["let"]]],[11,"clone","","",160,[[["self"]],["loop"]]],[11,"clone","","",161,[[["self"]],["macro"]]],[11,"clone","","",162,[[["self"]],["match"]]],[11,"clone","","",163,[[["self"]],["mod"]]],[11,"clone","","",164,[[["self"]],["move"]]],[11,"clone","","",165,[[["self"]],["mut"]]],[11,"clone","","",166,[[["self"]],["pub"]]],[11,"clone","","",167,[[["self"]],["ref"]]],[11,"clone","","",168,[[["self"]],["return"]]],[11,"clone","","",169,[[["self"]],["self_"]]],[11,"clone","","",170,[[["self"]],["static"]]],[11,"clone","","",171,[[["self"]],["struct"]]],[11,"clone","","",172,[[["self"]],["super"]]],[11,"clone","","",173,[[["self"]],["trait"]]],[11,"clone","","",174,[[["self"]],["type"]]],[11,"clone","","",175,[[["self"]],["union"]]],[11,"clone","","",176,[[["self"]],["unsafe"]]],[11,"clone","","",177,[[["self"]],["use"]]],[11,"clone","","",178,[[["self"]],["where"]]],[11,"clone","","",179,[[["self"]],["while"]]],[11,"clone","","",180,[[["self"]],["yield"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprbox"]]],[11,"clone","","",211,[[["self"]],["exprinplace"]]],[11,"clone","","",198,[[["self"]],["exprarray"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"clone","","",215,[[["self"]],["exprmethodcall"]]],[11,"clone","","",222,[[["self"]],["exprtuple"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"clone","","",223,[[["self"]],["exprtype"]]],[11,"clone","","",209,[[["self"]],["exprif"]]],[11,"clone","","",210,[[["self"]],["expriflet"]]],[11,"clone","","",225,[[["self"]],["exprwhile"]]],[11,"clone","","",226,[[["self"]],["exprwhilelet"]]],[11,"clone","","",207,[[["self"]],["exprforloop"]]],[11,"clone","","",212,[[["self"]],["exprloop"]]],[11,"clone","","",214,[[["self"]],["exprmatch"]]],[11,"clone","","",205,[[["self"]],["exprclosure"]]],[11,"clone","","",224,[[["self"]],["exprunsafe"]]],[11,"clone","","",201,[[["self"]],["exprblock"]]],[11,"clone","","",199,[[["self"]],["exprassign"]]],[11,"clone","","",200,[[["self"]],["exprassignop"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"clone","","",216,[[["self"]],["exprrange"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"clone","","",217,[[["self"]],["exprreference"]]],[11,"clone","","",203,[[["self"]],["exprbreak"]]],[11,"clone","","",206,[[["self"]],["exprcontinue"]]],[11,"clone","","",219,[[["self"]],["exprreturn"]]],[11,"clone","","",213,[[["self"]],["exprmacro"]]],[11,"clone","","",220,[[["self"]],["exprstruct"]]],[11,"clone","","",218,[[["self"]],["exprrepeat"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"clone","","",208,[[["self"]],["exprgroup"]]],[11,"clone","","",221,[[["self"]],["exprtry"]]],[11,"clone","","",204,[[["self"]],["exprcatch"]]],[11,"clone","","",227,[[["self"]],["expryield"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"clone","","",228,[[["self"]],["implgenerics"]]],[11,"clone","","",181,[[["self"]],["typegenerics"]]],[11,"clone","","",229,[[["self"]],["turbofish"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",182,[[["self"]],["litstr"]]],[11,"clone","","",183,[[["self"]],["litbytestr"]]],[11,"clone","","",184,[[["self"]],["litbyte"]]],[11,"clone","","",185,[[["self"]],["litchar"]]],[11,"clone","","",186,[[["self"]],["litint"]]],[11,"clone","","",187,[[["self"]],["litfloat"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",189,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",191,[[["self"]],["punctuated"]]],[11,"extend","","",191,[[["self"],["i"]]]],[11,"extend","","",191,[[["self"],["i"]]]],[11,"from","syn::token","",87,[[["span"]],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"from","","",180,[[["span"]],["self"]]],[11,"from","syn","",197,[[["self_"]],["ident"]]],[11,"from","","",197,[[["capself"]],["ident"]]],[11,"from","","",197,[[["super"]],["ident"]]],[11,"from","","",197,[[["crate"]],["ident"]]],[11,"from","","",197,[[["extern"]],["ident"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"next","syn::punctuated","",230,[[["self"]],["option"]]],[11,"next","","",231,[[["self"]],["option"]]],[11,"next","","",232,[[["self"]],["option"]]],[11,"next","","",233,[[["self"]],["option"]]],[11,"next","","",234,[[["self"]],["option"]]],[11,"next","","",235,[[["self"]],["option"]]],[11,"len","","",230,[[["self"]],["usize"]]],[11,"len","","",231,[[["self"]],["usize"]]],[11,"len","","",232,[[["self"]],["usize"]]],[11,"len","","",233,[[["self"]],["usize"]]],[11,"len","","",234,[[["self"]],["usize"]]],[11,"len","","",235,[[["self"]],["usize"]]],[11,"partial_cmp","syn","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"default","syn::token","",87,[[],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"default","","",134,[[],["self"]]],[11,"default","","",135,[[],["self"]]],[11,"default","","",136,[[],["self"]]],[11,"default","","",137,[[],["self"]]],[11,"default","","",138,[[],["self"]]],[11,"default","","",139,[[],["self"]]],[11,"default","","",140,[[],["self"]]],[11,"default","","",141,[[],["self"]]],[11,"default","","",142,[[],["self"]]],[11,"default","","",143,[[],["self"]]],[11,"default","","",144,[[],["self"]]],[11,"default","","",145,[[],["self"]]],[11,"default","","",146,[[],["self"]]],[11,"default","","",147,[[],["self"]]],[11,"default","","",148,[[],["self"]]],[11,"default","","",149,[[],["self"]]],[11,"default","","",150,[[],["self"]]],[11,"default","","",151,[[],["self"]]],[11,"default","","",152,[[],["self"]]],[11,"default","","",153,[[],["self"]]],[11,"default","","",154,[[],["self"]]],[11,"default","","",155,[[],["self"]]],[11,"default","","",156,[[],["self"]]],[11,"default","","",157,[[],["self"]]],[11,"default","","",158,[[],["self"]]],[11,"default","","",159,[[],["self"]]],[11,"default","","",160,[[],["self"]]],[11,"default","","",161,[[],["self"]]],[11,"default","","",162,[[],["self"]]],[11,"default","","",163,[[],["self"]]],[11,"default","","",164,[[],["self"]]],[11,"default","","",165,[[],["self"]]],[11,"default","","",166,[[],["self"]]],[11,"default","","",167,[[],["self"]]],[11,"default","","",168,[[],["self"]]],[11,"default","","",169,[[],["self"]]],[11,"default","","",170,[[],["self"]]],[11,"default","","",171,[[],["self"]]],[11,"default","","",172,[[],["self"]]],[11,"default","","",173,[[],["self"]]],[11,"default","","",174,[[],["self"]]],[11,"default","","",175,[[],["self"]]],[11,"default","","",176,[[],["self"]]],[11,"default","","",177,[[],["self"]]],[11,"default","","",178,[[],["self"]]],[11,"default","","",179,[[],["self"]]],[11,"default","","",180,[[],["self"]]],[11,"default","syn","",23,[[],["generics"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"default","","",86,[[],["self"]]],[11,"default","syn::punctuated","",191,[[],["self"]]],[11,"eq","syn::token","",87,[[["self"],["underscore"]],["bool"]]],[11,"eq","","",88,[[["self"],["apostrophe"]],["bool"]]],[11,"eq","","",89,[[["self"],["add"]],["bool"]]],[11,"eq","","",90,[[["self"],["addeq"]],["bool"]]],[11,"eq","","",91,[[["self"],["and"]],["bool"]]],[11,"eq","","",92,[[["self"],["andand"]],["bool"]]],[11,"eq","","",93,[[["self"],["andeq"]],["bool"]]],[11,"eq","","",94,[[["self"],["at"]],["bool"]]],[11,"eq","","",95,[[["self"],["bang"]],["bool"]]],[11,"eq","","",96,[[["self"],["caret"]],["bool"]]],[11,"eq","","",97,[[["self"],["careteq"]],["bool"]]],[11,"eq","","",98,[[["self"],["colon"]],["bool"]]],[11,"eq","","",99,[[["self"],["colon2"]],["bool"]]],[11,"eq","","",100,[[["self"],["comma"]],["bool"]]],[11,"eq","","",101,[[["self"],["div"]],["bool"]]],[11,"eq","","",102,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",103,[[["self"],["dollar"]],["bool"]]],[11,"eq","","",104,[[["self"],["dot"]],["bool"]]],[11,"eq","","",105,[[["self"],["dot2"]],["bool"]]],[11,"eq","","",106,[[["self"],["dot3"]],["bool"]]],[11,"eq","","",107,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","","",108,[[["self"],["eq"]],["bool"]]],[11,"eq","","",109,[[["self"],["eqeq"]],["bool"]]],[11,"eq","","",110,[[["self"],["ge"]],["bool"]]],[11,"eq","","",111,[[["self"],["gt"]],["bool"]]],[11,"eq","","",112,[[["self"],["le"]],["bool"]]],[11,"eq","","",113,[[["self"],["lt"]],["bool"]]],[11,"eq","","",114,[[["self"],["muleq"]],["bool"]]],[11,"eq","","",115,[[["self"],["ne"]],["bool"]]],[11,"eq","","",116,[[["self"],["or"]],["bool"]]],[11,"eq","","",117,[[["self"],["oreq"]],["bool"]]],[11,"eq","","",118,[[["self"],["oror"]],["bool"]]],[11,"eq","","",119,[[["self"],["pound"]],["bool"]]],[11,"eq","","",120,[[["self"],["question"]],["bool"]]],[11,"eq","","",121,[[["self"],["rarrow"]],["bool"]]],[11,"eq","","",122,[[["self"],["larrow"]],["bool"]]],[11,"eq","","",123,[[["self"],["rem"]],["bool"]]],[11,"eq","","",124,[[["self"],["remeq"]],["bool"]]],[11,"eq","","",125,[[["self"],["fatarrow"]],["bool"]]],[11,"eq","","",126,[[["self"],["semi"]],["bool"]]],[11,"eq","","",127,[[["self"],["shl"]],["bool"]]],[11,"eq","","",128,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",129,[[["self"],["shr"]],["bool"]]],[11,"eq","","",130,[[["self"],["shreq"]],["bool"]]],[11,"eq","","",131,[[["self"],["star"]],["bool"]]],[11,"eq","","",132,[[["self"],["sub"]],["bool"]]],[11,"eq","","",133,[[["self"],["subeq"]],["bool"]]],[11,"eq","","",134,[[["self"],["brace"]],["bool"]]],[11,"eq","","",135,[[["self"],["bracket"]],["bool"]]],[11,"eq","","",136,[[["self"],["paren"]],["bool"]]],[11,"eq","","",137,[[["self"],["group"]],["bool"]]],[11,"eq","","",138,[[["self"],["as"]],["bool"]]],[11,"eq","","",139,[[["self"],["async"]],["bool"]]],[11,"eq","","",140,[[["self"],["auto"]],["bool"]]],[11,"eq","","",141,[[["self"],["box"]],["bool"]]],[11,"eq","","",142,[[["self"],["break"]],["bool"]]],[11,"eq","","",143,[[["self"],["capself"]],["bool"]]],[11,"eq","","",144,[[["self"],["catch"]],["bool"]]],[11,"eq","","",145,[[["self"],["const"]],["bool"]]],[11,"eq","","",146,[[["self"],["continue"]],["bool"]]],[11,"eq","","",147,[[["self"],["crate"]],["bool"]]],[11,"eq","","",148,[[["self"],["default"]],["bool"]]],[11,"eq","","",149,[[["self"],["do"]],["bool"]]],[11,"eq","","",150,[[["self"],["dyn"]],["bool"]]],[11,"eq","","",151,[[["self"],["else"]],["bool"]]],[11,"eq","","",152,[[["self"],["enum"]],["bool"]]],[11,"eq","","",153,[[["self"],["extern"]],["bool"]]],[11,"eq","","",154,[[["self"],["fn"]],["bool"]]],[11,"eq","","",155,[[["self"],["for"]],["bool"]]],[11,"eq","","",156,[[["self"],["if"]],["bool"]]],[11,"eq","","",157,[[["self"],["impl"]],["bool"]]],[11,"eq","","",158,[[["self"],["in"]],["bool"]]],[11,"eq","","",159,[[["self"],["let"]],["bool"]]],[11,"eq","","",160,[[["self"],["loop"]],["bool"]]],[11,"eq","","",161,[[["self"],["macro"]],["bool"]]],[11,"eq","","",162,[[["self"],["match"]],["bool"]]],[11,"eq","","",163,[[["self"],["mod"]],["bool"]]],[11,"eq","","",164,[[["self"],["move"]],["bool"]]],[11,"eq","","",165,[[["self"],["mut"]],["bool"]]],[11,"eq","","",166,[[["self"],["pub"]],["bool"]]],[11,"eq","","",167,[[["self"],["ref"]],["bool"]]],[11,"eq","","",168,[[["self"],["return"]],["bool"]]],[11,"eq","","",169,[[["self"],["self_"]],["bool"]]],[11,"eq","","",170,[[["self"],["static"]],["bool"]]],[11,"eq","","",171,[[["self"],["struct"]],["bool"]]],[11,"eq","","",172,[[["self"],["super"]],["bool"]]],[11,"eq","","",173,[[["self"],["trait"]],["bool"]]],[11,"eq","","",174,[[["self"],["type"]],["bool"]]],[11,"eq","","",175,[[["self"],["union"]],["bool"]]],[11,"eq","","",176,[[["self"],["unsafe"]],["bool"]]],[11,"eq","","",177,[[["self"],["use"]],["bool"]]],[11,"eq","","",178,[[["self"],["where"]],["bool"]]],[11,"eq","","",179,[[["self"],["while"]],["bool"]]],[11,"eq","","",180,[[["self"],["yield"]],["bool"]]],[11,"eq","syn","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",63,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",63,[[["self"],["attrstyle"]],["bool"]]],[11,"eq","","",64,[[["self"],["meta"]],["bool"]]],[11,"ne","","",64,[[["self"],["meta"]],["bool"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"eq","","",65,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",65,[[["self"],["nestedmeta"]],["bool"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"eq","","",66,[[["self"],["fields"]],["bool"]]],[11,"ne","","",66,[[["self"],["fields"]],["bool"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"eq","","",67,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",67,[[["self"],["visibility"]],["bool"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"eq","","",68,[[["self"],["expr"]],["bool"]]],[11,"ne","","",68,[[["self"],["expr"]],["bool"]]],[11,"eq","","",202,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",202,[[["self"],["exprbox"]],["bool"]]],[11,"eq","","",211,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",211,[[["self"],["exprinplace"]],["bool"]]],[11,"eq","","",198,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",198,[[["self"],["exprarray"]],["bool"]]],[11,"eq","","",11,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprcall"]],["bool"]]],[11,"eq","","",215,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",215,[[["self"],["exprmethodcall"]],["bool"]]],[11,"eq","","",222,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",222,[[["self"],["exprtuple"]],["bool"]]],[11,"eq","","",10,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprbinary"]],["bool"]]],[11,"eq","","",18,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprunary"]],["bool"]]],[11,"eq","","",15,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprlit"]],["bool"]]],[11,"eq","","",12,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprcast"]],["bool"]]],[11,"eq","","",223,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",223,[[["self"],["exprtype"]],["bool"]]],[11,"eq","","",209,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",209,[[["self"],["exprif"]],["bool"]]],[11,"eq","","",210,[[["self"],["expriflet"]],["bool"]]],[11,"ne","","",210,[[["self"],["expriflet"]],["bool"]]],[11,"eq","","",225,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",225,[[["self"],["exprwhile"]],["bool"]]],[11,"eq","","",226,[[["self"],["exprwhilelet"]],["bool"]]],[11,"ne","","",226,[[["self"],["exprwhilelet"]],["bool"]]],[11,"eq","","",207,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",207,[[["self"],["exprforloop"]],["bool"]]],[11,"eq","","",212,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",212,[[["self"],["exprloop"]],["bool"]]],[11,"eq","","",214,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",214,[[["self"],["exprmatch"]],["bool"]]],[11,"eq","","",205,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",205,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",224,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",224,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","","",201,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",201,[[["self"],["exprblock"]],["bool"]]],[11,"eq","","",199,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",199,[[["self"],["exprassign"]],["bool"]]],[11,"eq","","",200,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",200,[[["self"],["exprassignop"]],["bool"]]],[11,"eq","","",13,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprfield"]],["bool"]]],[11,"eq","","",14,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprindex"]],["bool"]]],[11,"eq","","",216,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",216,[[["self"],["exprrange"]],["bool"]]],[11,"eq","","",17,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprpath"]],["bool"]]],[11,"eq","","",217,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",217,[[["self"],["exprreference"]],["bool"]]],[11,"eq","","",203,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",203,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",206,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",206,[[["self"],["exprcontinue"]],["bool"]]],[11,"eq","","",219,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",219,[[["self"],["exprreturn"]],["bool"]]],[11,"eq","","",213,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",213,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","","",220,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",220,[[["self"],["exprstruct"]],["bool"]]],[11,"eq","","",218,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",218,[[["self"],["exprrepeat"]],["bool"]]],[11,"eq","","",16,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",208,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",208,[[["self"],["exprgroup"]],["bool"]]],[11,"eq","","",221,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",221,[[["self"],["exprtry"]],["bool"]]],[11,"eq","","",204,[[["self"],["exprcatch"]],["bool"]]],[11,"ne","","",204,[[["self"],["exprcatch"]],["bool"]]],[11,"eq","","",227,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",227,[[["self"],["expryield"]],["bool"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"eq","","",69,[[["self"],["member"]],["bool"]]],[11,"ne","","",69,[[["self"],["member"]],["bool"]]],[11,"eq","","",20,[[["self"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["generics"]],["bool"]]],[11,"ne","","",23,[[["self"],["generics"]],["bool"]]],[11,"eq","","",70,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",70,[[["self"],["genericparam"]],["bool"]]],[11,"eq","","",29,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",29,[[["self"],["typeparam"]],["bool"]]],[11,"eq","","",24,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",24,[[["self"],["lifetimedef"]],["bool"]]],[11,"eq","","",22,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",22,[[["self"],["constparam"]],["bool"]]],[11,"eq","","",228,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",228,[[["self"],["implgenerics"]],["bool"]]],[11,"eq","","",181,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",181,[[["self"],["typegenerics"]],["bool"]]],[11,"eq","","",229,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",229,[[["self"],["turbofish"]],["bool"]]],[11,"eq","","",21,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",21,[[["self"],["boundlifetimes"]],["bool"]]],[11,"eq","","",72,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",72,[[["self"],["typeparambound"]],["bool"]]],[11,"eq","","",28,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",28,[[["self"],["traitbound"]],["bool"]]],[11,"eq","","",71,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",71,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"eq","","",30,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",30,[[["self"],["whereclause"]],["bool"]]],[11,"eq","","",73,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",73,[[["self"],["wherepredicate"]],["bool"]]],[11,"eq","","",27,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",27,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",26,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",26,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",25,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",25,[[["self"],["predicateeq"]],["bool"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"eq","","",76,[[["self"],["lit"]],["bool"]]],[11,"ne","","",76,[[["self"],["lit"]],["bool"]]],[11,"eq","","",182,[[["self"],["self"]],["bool"]]],[11,"eq","","",183,[[["self"],["self"]],["bool"]]],[11,"eq","","",184,[[["self"],["self"]],["bool"]]],[11,"eq","","",185,[[["self"],["self"]],["bool"]]],[11,"eq","","",186,[[["self"],["self"]],["bool"]]],[11,"eq","","",187,[[["self"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"eq","","",77,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",77,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",75,[[["self"],["intsuffix"]],["bool"]]],[11,"eq","","",74,[[["self"],["floatsuffix"]],["bool"]]],[11,"eq","","",78,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",78,[[["self"],["macrodelimiter"]],["bool"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"eq","","",38,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",38,[[["self"],["deriveinput"]],["bool"]]],[11,"eq","","",79,[[["self"],["data"]],["bool"]]],[11,"ne","","",79,[[["self"],["data"]],["bool"]]],[11,"eq","","",36,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",36,[[["self"],["datastruct"]],["bool"]]],[11,"eq","","",35,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",35,[[["self"],["dataenum"]],["bool"]]],[11,"eq","","",37,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",37,[[["self"],["dataunion"]],["bool"]]],[11,"eq","","",80,[[["self"],["binop"]],["bool"]]],[11,"ne","","",80,[[["self"],["binop"]],["bool"]]],[11,"eq","","",81,[[["self"],["unop"]],["bool"]]],[11,"ne","","",81,[[["self"],["unop"]],["bool"]]],[11,"eq","","",84,[[["self"],["type"]],["bool"]]],[11,"ne","","",84,[[["self"],["type"]],["bool"]]],[11,"eq","","",52,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",52,[[["self"],["typeslice"]],["bool"]]],[11,"eq","","",41,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",41,[[["self"],["typearray"]],["bool"]]],[11,"eq","","",50,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",50,[[["self"],["typeptr"]],["bool"]]],[11,"eq","","",51,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",51,[[["self"],["typereference"]],["bool"]]],[11,"eq","","",42,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",42,[[["self"],["typebarefn"]],["bool"]]],[11,"eq","","",47,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",47,[[["self"],["typenever"]],["bool"]]],[11,"eq","","",54,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",54,[[["self"],["typetuple"]],["bool"]]],[11,"eq","","",49,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",49,[[["self"],["typepath"]],["bool"]]],[11,"eq","","",53,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",53,[[["self"],["typetraitobject"]],["bool"]]],[11,"eq","","",44,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",44,[[["self"],["typeimpltrait"]],["bool"]]],[11,"eq","","",48,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",48,[[["self"],["typeparen"]],["bool"]]],[11,"eq","","",43,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",43,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",45,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",45,[[["self"],["typeinfer"]],["bool"]]],[11,"eq","","",46,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",46,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",55,[[["self"],["self"]],["bool"]]],[11,"eq","","",39,[[["self"],["abi"]],["bool"]]],[11,"ne","","",39,[[["self"],["abi"]],["bool"]]],[11,"eq","","",40,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",40,[[["self"],["barefnarg"]],["bool"]]],[11,"eq","","",82,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",82,[[["self"],["barefnargname"]],["bool"]]],[11,"eq","","",83,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",83,[[["self"],["returntype"]],["bool"]]],[11,"eq","","",60,[[["self"],["path"]],["bool"]]],[11,"ne","","",60,[[["self"],["path"]],["bool"]]],[11,"eq","","",56,[[["self"],["pathtokens"]],["bool"]]],[11,"ne","","",56,[[["self"],["pathtokens"]],["bool"]]],[11,"eq","","",61,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",61,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",86,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",86,[[["self"],["patharguments"]],["bool"]]],[11,"eq","","",85,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",85,[[["self"],["genericargument"]],["bool"]]],[11,"eq","","",57,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",57,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"eq","","",58,[[["self"],["binding"]],["bool"]]],[11,"ne","","",58,[[["self"],["binding"]],["bool"]]],[11,"eq","","",59,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",59,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","","",62,[[["self"],["qself"]],["bool"]]],[11,"ne","","",62,[[["self"],["qself"]],["bool"]]],[11,"eq","syn::buffer","",189,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",189,[[["self"],["cursor"]],["bool"]]],[11,"eq","syn::punctuated","",191,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",191,[[["self"],["punctuated"]],["bool"]]],[11,"into_iter","","",191,N],[11,"cmp","syn","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::synom","",236,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::token","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::punctuated","",191,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::synom","",236,[[["self"],["formatter"]],["result"]]],[11,"index","syn::punctuated","",191,N],[11,"index_mut","","",191,N],[11,"hash","syn::token","",87,[[["self"],["h"]]]],[11,"hash","","",88,[[["self"],["h"]]]],[11,"hash","","",89,[[["self"],["h"]]]],[11,"hash","","",90,[[["self"],["h"]]]],[11,"hash","","",91,[[["self"],["h"]]]],[11,"hash","","",92,[[["self"],["h"]]]],[11,"hash","","",93,[[["self"],["h"]]]],[11,"hash","","",94,[[["self"],["h"]]]],[11,"hash","","",95,[[["self"],["h"]]]],[11,"hash","","",96,[[["self"],["h"]]]],[11,"hash","","",97,[[["self"],["h"]]]],[11,"hash","","",98,[[["self"],["h"]]]],[11,"hash","","",99,[[["self"],["h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"hash","","",102,[[["self"],["h"]]]],[11,"hash","","",103,[[["self"],["h"]]]],[11,"hash","","",104,[[["self"],["h"]]]],[11,"hash","","",105,[[["self"],["h"]]]],[11,"hash","","",106,[[["self"],["h"]]]],[11,"hash","","",107,[[["self"],["h"]]]],[11,"hash","","",108,[[["self"],["h"]]]],[11,"hash","","",109,[[["self"],["h"]]]],[11,"hash","","",110,[[["self"],["h"]]]],[11,"hash","","",111,[[["self"],["h"]]]],[11,"hash","","",112,[[["self"],["h"]]]],[11,"hash","","",113,[[["self"],["h"]]]],[11,"hash","","",114,[[["self"],["h"]]]],[11,"hash","","",115,[[["self"],["h"]]]],[11,"hash","","",116,[[["self"],["h"]]]],[11,"hash","","",117,[[["self"],["h"]]]],[11,"hash","","",118,[[["self"],["h"]]]],[11,"hash","","",119,[[["self"],["h"]]]],[11,"hash","","",120,[[["self"],["h"]]]],[11,"hash","","",121,[[["self"],["h"]]]],[11,"hash","","",122,[[["self"],["h"]]]],[11,"hash","","",123,[[["self"],["h"]]]],[11,"hash","","",124,[[["self"],["h"]]]],[11,"hash","","",125,[[["self"],["h"]]]],[11,"hash","","",126,[[["self"],["h"]]]],[11,"hash","","",127,[[["self"],["h"]]]],[11,"hash","","",128,[[["self"],["h"]]]],[11,"hash","","",129,[[["self"],["h"]]]],[11,"hash","","",130,[[["self"],["h"]]]],[11,"hash","","",131,[[["self"],["h"]]]],[11,"hash","","",132,[[["self"],["h"]]]],[11,"hash","","",133,[[["self"],["h"]]]],[11,"hash","","",134,[[["self"],["h"]]]],[11,"hash","","",135,[[["self"],["h"]]]],[11,"hash","","",136,[[["self"],["h"]]]],[11,"hash","","",137,[[["self"],["h"]]]],[11,"hash","","",138,[[["self"],["h"]]]],[11,"hash","","",139,[[["self"],["h"]]]],[11,"hash","","",140,[[["self"],["h"]]]],[11,"hash","","",141,[[["self"],["h"]]]],[11,"hash","","",142,[[["self"],["h"]]]],[11,"hash","","",143,[[["self"],["h"]]]],[11,"hash","","",144,[[["self"],["h"]]]],[11,"hash","","",145,[[["self"],["h"]]]],[11,"hash","","",146,[[["self"],["h"]]]],[11,"hash","","",147,[[["self"],["h"]]]],[11,"hash","","",148,[[["self"],["h"]]]],[11,"hash","","",149,[[["self"],["h"]]]],[11,"hash","","",150,[[["self"],["h"]]]],[11,"hash","","",151,[[["self"],["h"]]]],[11,"hash","","",152,[[["self"],["h"]]]],[11,"hash","","",153,[[["self"],["h"]]]],[11,"hash","","",154,[[["self"],["h"]]]],[11,"hash","","",155,[[["self"],["h"]]]],[11,"hash","","",156,[[["self"],["h"]]]],[11,"hash","","",157,[[["self"],["h"]]]],[11,"hash","","",158,[[["self"],["h"]]]],[11,"hash","","",159,[[["self"],["h"]]]],[11,"hash","","",160,[[["self"],["h"]]]],[11,"hash","","",161,[[["self"],["h"]]]],[11,"hash","","",162,[[["self"],["h"]]]],[11,"hash","","",163,[[["self"],["h"]]]],[11,"hash","","",164,[[["self"],["h"]]]],[11,"hash","","",165,[[["self"],["h"]]]],[11,"hash","","",166,[[["self"],["h"]]]],[11,"hash","","",167,[[["self"],["h"]]]],[11,"hash","","",168,[[["self"],["h"]]]],[11,"hash","","",169,[[["self"],["h"]]]],[11,"hash","","",170,[[["self"],["h"]]]],[11,"hash","","",171,[[["self"],["h"]]]],[11,"hash","","",172,[[["self"],["h"]]]],[11,"hash","","",173,[[["self"],["h"]]]],[11,"hash","","",174,[[["self"],["h"]]]],[11,"hash","","",175,[[["self"],["h"]]]],[11,"hash","","",176,[[["self"],["h"]]]],[11,"hash","","",177,[[["self"],["h"]]]],[11,"hash","","",178,[[["self"],["h"]]]],[11,"hash","","",179,[[["self"],["h"]]]],[11,"hash","","",180,[[["self"],["h"]]]],[11,"hash","syn","",0,[[["self"],["h"]]]],[11,"hash","","",63,N],[11,"hash","","",64,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",65,N],[11,"hash","","",6,N],[11,"hash","","",66,N],[11,"hash","","",4,N],[11,"hash","","",5,N],[11,"hash","","",3,N],[11,"hash","","",67,N],[11,"hash","","",8,N],[11,"hash","","",7,N],[11,"hash","","",9,N],[11,"hash","","",68,N],[11,"hash","","",202,N],[11,"hash","","",211,N],[11,"hash","","",198,N],[11,"hash","","",11,N],[11,"hash","","",215,N],[11,"hash","","",222,N],[11,"hash","","",10,N],[11,"hash","","",18,N],[11,"hash","","",15,N],[11,"hash","","",12,N],[11,"hash","","",223,N],[11,"hash","","",209,N],[11,"hash","","",210,N],[11,"hash","","",225,N],[11,"hash","","",226,N],[11,"hash","","",207,N],[11,"hash","","",212,N],[11,"hash","","",214,N],[11,"hash","","",205,N],[11,"hash","","",224,N],[11,"hash","","",201,N],[11,"hash","","",199,N],[11,"hash","","",200,N],[11,"hash","","",13,N],[11,"hash","","",14,N],[11,"hash","","",216,N],[11,"hash","","",17,N],[11,"hash","","",217,N],[11,"hash","","",203,N],[11,"hash","","",206,N],[11,"hash","","",219,N],[11,"hash","","",213,N],[11,"hash","","",220,N],[11,"hash","","",218,N],[11,"hash","","",16,N],[11,"hash","","",208,N],[11,"hash","","",221,N],[11,"hash","","",204,N],[11,"hash","","",227,N],[11,"hash","","",19,[[["self"],["h"]]]],[11,"hash","","",69,N],[11,"hash","","",20,[[["self"],["h"]]]],[11,"hash","","",23,N],[11,"hash","","",70,N],[11,"hash","","",29,N],[11,"hash","","",24,N],[11,"hash","","",22,N],[11,"hash","","",228,N],[11,"hash","","",181,N],[11,"hash","","",229,N],[11,"hash","","",21,N],[11,"hash","","",72,N],[11,"hash","","",28,N],[11,"hash","","",71,N],[11,"hash","","",30,N],[11,"hash","","",73,N],[11,"hash","","",27,N],[11,"hash","","",26,N],[11,"hash","","",25,N],[11,"hash","","",31,[[["self"],["h"]]]],[11,"hash","","",76,N],[11,"hash","","",182,[[["self"],["h"]]]],[11,"hash","","",183,[[["self"],["h"]]]],[11,"hash","","",184,[[["self"],["h"]]]],[11,"hash","","",185,[[["self"],["h"]]]],[11,"hash","","",186,[[["self"],["h"]]]],[11,"hash","","",187,[[["self"],["h"]]]],[11,"hash","","",32,[[["self"],["h"]]]],[11,"hash","","",33,[[["self"],["h"]]]],[11,"hash","","",77,N],[11,"hash","","",75,N],[11,"hash","","",74,N],[11,"hash","","",78,N],[11,"hash","","",34,[[["self"],["h"]]]],[11,"hash","","",38,N],[11,"hash","","",79,N],[11,"hash","","",36,N],[11,"hash","","",35,N],[11,"hash","","",37,N],[11,"hash","","",80,N],[11,"hash","","",81,N],[11,"hash","","",84,N],[11,"hash","","",52,N],[11,"hash","","",41,N],[11,"hash","","",50,N],[11,"hash","","",51,N],[11,"hash","","",42,N],[11,"hash","","",47,N],[11,"hash","","",54,N],[11,"hash","","",49,N],[11,"hash","","",53,N],[11,"hash","","",44,N],[11,"hash","","",48,N],[11,"hash","","",43,N],[11,"hash","","",45,N],[11,"hash","","",46,N],[11,"hash","","",55,[[["self"],["h"]]]],[11,"hash","","",39,N],[11,"hash","","",40,N],[11,"hash","","",82,N],[11,"hash","","",83,N],[11,"hash","","",60,N],[11,"hash","","",56,N],[11,"hash","","",61,N],[11,"hash","","",86,N],[11,"hash","","",85,N],[11,"hash","","",57,N],[11,"hash","","",58,N],[11,"hash","","",59,N],[11,"hash","","",62,N],[11,"hash","syn::punctuated","",191,N],[11,"from_iter","","",191,[[["i"]],["self"]]],[11,"from_iter","","",191,[[["i"]],["self"]]],[11,"description","syn::synom","",236,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn::punctuated","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"new","syn","Creates a new `Ident` with the given `string` as well as the specified `span`.",197,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",197,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",197,N],[11,"visit_abi","syn::visit","",196,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",196,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",196,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",196,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",196,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",196,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",196,[[["self"],["binop"]]]],[11,"visit_binding","","",196,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",196,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",196,[[["self"],["constparam"]]]],[11,"visit_data","","",196,[[["self"],["data"]]]],[11,"visit_data_enum","","",196,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",196,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",196,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",196,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",196,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",196,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",196,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",196,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",196,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",196,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",196,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",196,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",196,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",196,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",196,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",196,[[["self"],["field"]]]],[11,"visit_fields","","",196,[[["self"],["fields"]]]],[11,"visit_fields_named","","",196,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",196,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",196,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",196,[[["self"],["genericparam"]]]],[11,"visit_generics","","",196,[[["self"],["generics"]]]],[11,"visit_ident","","",196,[[["self"],["ident"]]]],[11,"visit_index","","",196,[[["self"],["index"]]]],[11,"visit_lifetime","","",196,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",196,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",196,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",196,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",196,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",196,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",196,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",196,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",196,[[["self"],["litint"]]]],[11,"visit_lit_str","","",196,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",196,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",196,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",196,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",196,[[["self"],["member"]]]],[11,"visit_meta","","",196,[[["self"],["meta"]]]],[11,"visit_meta_list","","",196,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",196,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",196,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",196,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",196,[[["self"],["path"]]]],[11,"visit_path_arguments","","",196,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",196,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",196,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",196,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",196,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",196,[[["self"],["qself"]]]],[11,"visit_return_type","","",196,[[["self"],["returntype"]]]],[11,"visit_span","","",196,[[["self"],["span"]]]],[11,"visit_trait_bound","","",196,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",196,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",196,[[["self"],["type"]]]],[11,"visit_type_array","","",196,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",196,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",196,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",196,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",196,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",196,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",196,[[["self"],["typenever"]]]],[11,"visit_type_param","","",196,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",196,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",196,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",196,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",196,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",196,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",196,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",196,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",196,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",196,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",196,[[["self"],["unop"]]]],[11,"visit_variant","","",196,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",196,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",196,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",196,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",196,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",196,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",196,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"Ident"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"ParseError"]]};
searchIndex["synstructure"]={"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",N,N],[12,"binding","","The name which this BindingInfo will bind to.",0,N],[12,"style","","The type of binding which this BindingInfo will create.",0,N],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",N,N],[12,"attrs","","",1,N],[12,"ident","","",1,N],[12,"fields","","",1,N],[12,"discriminant","","",1,N],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",N,N],[12,"prefix","","",2,N],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",N,N],[4,"BindStyle","","The type of binding to use when generating a pattern.",N,N],[13,"Move","","`x`",3,N],[13,"MoveMut","","`mut x`",3,N],[13,"Ref","","`ref x`",3,N],[13,"RefMut","","`ref mut x`",3,N],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",N,[[["t"]],["string"]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,[[["self"]],["vec",["ident"]]]],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,N],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,N],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the current variant.",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,[[["self"]],["vec",["ident"]]]],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,[[["deriveinput"]],["self"]]],[11,"variants","","Returns a slice of the variants in this Structure.",4,N],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,N],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",4,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,[[["self"]],["vec",["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",4,[[["self"],["genericparam"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,[[["self"],["traitbound"],["option"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",4,[[["self"],["tokenstream"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",N,N],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"clone","","",3,[[["self"]],["bindstyle"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"clone","","",4,[[["self"]],["structure"]]],[11,"eq","","",3,[[["self"],["bindstyle"]],["bool"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["variantast"]],["bool"]]],[11,"ne","","",1,[[["self"],["variantast"]],["bool"]]],[11,"eq","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"eq","","",4,[[["self"],["structure"]],["bool"]]],[11,"ne","","",4,[[["self"],["structure"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",4,N],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["tempfile"]={"doc":"Temporary files and directories.","items":[[3,"TempDir","tempfile","A directory in the filesystem that is automatically deleted when it goes out of scope.",N,N],[3,"NamedTempFile","","A named temporary file.",N,N],[3,"PersistError","","Error returned when persisting a temporary file fails.",N,N],[12,"error","","The underlying IO error.",0,N],[12,"file","","The temporary file that couldn't be persisted.",0,N],[3,"TempPath","","A path to a named temporary file without an open file handle.",N,N],[3,"Builder","","Create a new temporary file or directory with custom parameters.",N,N],[5,"tempdir","","Create a new temporary directory.",N,[[],["result",["tempdir"]]]],[5,"tempdir_in","","Create a new temporary directory.",N,[[["p"]],["result",["tempdir"]]]],[5,"tempfile","","Create a new temporary file.",N,[[],["result",["file"]]]],[5,"tempfile_in","","Create a new temporary file in the specified directory.",N,[[["p"]],["result",["file"]]]],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()`.",1,[[],["result",["tempdir"]]]],[11,"new_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically  deleted once the returned `TempDir` is destroyed.",1,[[["p"]],["result",["tempdir"]]]],[11,"path","","Accesses the [`Path`] to the temporary directory.",1,[[["self"]],["path"]]],[11,"into_path","","Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.",1,[[["self"]],["pathbuf"]]],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",1,[[["self"]],["result"]]],[11,"close","","Close and remove the temporary file.",2,[[["self"]],["result"]]],[11,"persist","","Persist the temporary file at the target path.",2,[[["self"],["p"]],["result",["pathpersisterror"]]]],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",2,[[["self"],["p"]],["result",["pathpersisterror"]]]],[11,"new","","Create a new named temporary file.",3,[[],["result",["namedtempfile"]]]],[11,"new_in","","Create a new named temporary file in the specified directory.",3,[[["p"]],["result",["namedtempfile"]]]],[11,"path","","Get the temporary file's path.",3,[[["self"]],["path"]]],[11,"close","","Close and remove the temporary file.",3,[[["self"]],["result"]]],[11,"persist","","Persist the temporary file at the target path.",3,[[["self"],["p"]],["result",["file","persisterror"]]]],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",3,[[["self"],["p"]],["result",["file","persisterror"]]]],[11,"reopen","","Reopen the temporary file.",3,[[["self"]],["result",["file"]]]],[11,"as_file","","Get a reference to the underlying file.",3,[[["self"]],["file"]]],[11,"as_file_mut","","Get a mutable reference to the underlying file.",3,[[["self"]],["file"]]],[11,"into_file","","Convert the temporary file into a `std::fs::File`.",3,[[["self"]],["file"]]],[11,"into_temp_path","","Closes the file, leaving only the temporary file path.",3,[[["self"]],["temppath"]]],[11,"new","","Create a new `Builder`.",4,[[],["self"]]],[11,"prefix","","Set a custom filename prefix.",4,[[["self"],["str"]],["self"]]],[11,"suffix","","Set a custom filename suffix.",4,[[["self"],["str"]],["self"]]],[11,"rand_bytes","","Set the number of random bytes.",4,[[["self"],["usize"]],["self"]]],[11,"tempfile","","Create the named temporary file.",4,[[["self"]],["result",["namedtempfile"]]]],[11,"tempfile_in","","Create the named temporary file in the specified directory.",4,[[["self"],["p"]],["result",["namedtempfile"]]]],[11,"tempdir","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,[[["self"]],["result",["tempdir"]]]],[11,"tempdir_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,[[["self"],["p"]],["result",["tempdir"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"clone","","",4,[[["self"]],["builder"]]],[11,"from","","",3,[[["persisterror"]],["namedtempfile"]]],[11,"drop","","",1,[[["self"]]]],[11,"drop","","",2,[[["self"]]]],[11,"as_ref","","",1,[[["self"]],["path"]]],[11,"as_ref","","",2,[[["self"]],["path"]]],[11,"as_ref","","",2,[[["self"]],["osstr"]]],[11,"as_ref","","",3,[[["self"]],["path"]]],[11,"default","","",4,[[],["self"]]],[11,"eq","","",4,[[["self"],["builder"]],["bool"]]],[11,"ne","","",4,[[["self"],["builder"]],["bool"]]],[11,"deref","","",2,[[["self"]],["path"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"read","","",3,N],[11,"seek","","",3,[[["self"],["seekfrom"]],["result",["u64"]]]],[11,"write","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"as_raw_fd","","",3,[[["self"]],["rawfd"]]]],"paths":[[3,"PersistError"],[3,"TempDir"],[3,"TempPath"],[3,"NamedTempFile"],[3,"Builder"]]};
searchIndex["test_utils"]={"doc":"","items":[[3,"TestLogger","test_utils","",N,N],[12,"log","","",0,N],[5,"create_wasm_from_file","","Load WASM from filesystem",N,[[["str"]],["vec",["u8"]]]],[5,"create_test_dna_with_wat","","Create DNA from WAT",N,[[["str"],["str"],["option",["str"]]],["dna"]]],[5,"create_test_dna_with_wasm","","Prepare valid DNA struct with that WASM in a zome's capability",N,[[["str"],["str"],["vec",["u8"]]],["dna"]]],[5,"create_test_cap","","",N,[[["membrane"]],["capability"]]],[5,"create_test_cap_with_fn_name","","",N,[[["str"]],["capability"]]],[5,"create_test_dna_with_cap","","Prepare valid DNA struct with that WASM in a zome's capability",N,N],[5,"test_logger","","",N,[[],["arc",["mutex"]]]],[5,"test_context_and_logger","","",N,N],[5,"test_context","","",N,[[["str"]],["arc",["context"]]]],[5,"calculate_hash","","calculates the native Rust hash has nothing to do with our hashing e.g. multihash @see https://doc.rust-lang.org/std/hash/index.html",N,[[["t"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from_bits","","",0,[[["t"]],["t"]]],[11,"clone","","",0,[[["self"]],["testlogger"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"log","","",0,[[["self"],["string"]]]]],"paths":[[3,"TestLogger"]]};
searchIndex["thread_id"]={"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",N,[[],["usize"]]]],"paths":[]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",1,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",1,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",1,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",1,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["box"]]]],[11,"size_hint","","",3,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"default","","",1,[[],["cachedthreadlocal"]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"into_iter","","",1,[[["self"]],["cachedintoiter"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",3,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",3,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",3,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",3,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",3,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",3,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",3,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",3,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",3,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",3,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",3,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",3,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",3,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",3,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",3,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",3,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",3,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",4,[[["self"],["precisetime"]],["duration"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,[[],["steadytime"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"clone","","",6,[[["self"]],["outofrangeerror"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["precisetime"]]],[11,"clone","","",5,[[["self"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"partial_cmp","","",3,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["duration"]],["bool"]]],[11,"le","","",3,[[["self"],["duration"]],["bool"]]],[11,"gt","","",3,[[["self"],["duration"]],["bool"]]],[11,"ge","","",3,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"eq","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"eq","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"cmp","","",3,[[["self"],["duration"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["steadytime"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",3,[[["self"],["duration"]],["duration"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"sub","","",5,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"add","","",3,[[["self"],["duration"]],["duration"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"add","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"mul","","",3,[[["self"],["i32"]],["duration"]]],[11,"div","","",3,[[["self"],["i32"]],["duration"]]],[11,"neg","","",3,[[["self"]],["duration"]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"description","","",6,[[["self"]],["str"]]],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"OutOfRangeError"],[3,"TmFmt"]]};
searchIndex["tiny_keccak"]={"doc":"An implementation of the FIPS-202-defined SHA-3 and SHAKE functions.","items":[[3,"Keccak","tiny_keccak","This structure should be used to create keccak/sha3 hash.",N,N],[3,"XofReader","","",N,N],[5,"keccakf","","keccak-f[1600]",N,N],[5,"shake128","","",N,N],[5,"shake256","","",N,N],[5,"keccak224","","",N,N],[5,"keccak256","","",N,N],[5,"keccak384","","",N,N],[5,"keccak512","","",N,N],[5,"sha3_224","","",N,N],[5,"sha3_256","","",N,N],[5,"sha3_384","","",N,N],[5,"sha3_512","","",N,N],[11,"new","","",0,[[["usize"],["u8"]],["keccak"]]],[11,"new_shake128","","",0,[[],["keccak"]]],[11,"shake128","","",0,N],[11,"new_shake256","","",0,[[],["keccak"]]],[11,"shake256","","",0,N],[11,"new_keccak224","","",0,[[],["keccak"]]],[11,"keccak224","","",0,N],[11,"new_keccak256","","",0,[[],["keccak"]]],[11,"keccak256","","",0,N],[11,"new_keccak384","","",0,[[],["keccak"]]],[11,"keccak384","","",0,N],[11,"new_keccak512","","",0,[[],["keccak"]]],[11,"keccak512","","",0,N],[11,"new_sha3_224","","",0,[[],["keccak"]]],[11,"sha3_224","","",0,N],[11,"new_sha3_256","","",0,[[],["keccak"]]],[11,"sha3_256","","",0,N],[11,"new_sha3_384","","",0,[[],["keccak"]]],[11,"sha3_384","","",0,N],[11,"new_sha3_512","","",0,[[],["keccak"]]],[11,"sha3_512","","",0,N],[11,"update","","",0,N],[11,"keccakf","","",0,[[["self"]]]],[11,"finalize","","",0,N],[11,"absorb","","",0,N],[11,"pad","","",0,[[["self"]]]],[11,"fill_block","","",0,[[["self"]]]],[11,"squeeze","","",0,N],[11,"xof","","",0,[[["self"]],["xofreader"]]],[11,"squeeze","","",1,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["self"]]]],"paths":[[3,"Keccak"],[3,"XofReader"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",1,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",1,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",1,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",1,N],[13,"DateInvalid","","A serialized date was invalid.",1,N],[13,"NumberInvalid","","A serialized number was invalid.",1,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",1,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",1,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",2,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",2,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",2,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",2,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",2,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",2,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",2,[[["self"],["bool"]],["self"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",3,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",3,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",3,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",4,[[["self"]],["option"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N],[11,"from","toml::value","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","toml::ser","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","toml::de","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"clone","toml::value","",0,[[["self"]],["value"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"clone","","",6,[[["self"]],["datetimeparseerror"]]],[11,"clone","toml::ser","",1,[[["self"]],["error"]]],[11,"clone","toml::de","",4,[[["self"]],["error"]]],[11,"from","toml::value","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",5,[[["self"],["datetime"]],["bool"]]],[11,"eq","toml::ser","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","toml::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::de","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::de","",4,[[["self"],["formatter"]],["result"]]],[11,"index","toml::value","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"from_str","","",5,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"description","toml::ser","",1,[[["self"]],["str"]]],[11,"description","toml::de","",4,[[["self"]],["str"]]],[11,"into_deserializer","toml::value","",0,[[["self"]],["self"]]],[11,"custom","toml::ser","",1,[[["t"]],["error"]]],[11,"serialize","toml::value","",0,[[["self"],["s"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize","","",5,[[["d"]],["result",["datetime"]]]],[11,"custom","toml::de","",4,[[["t"]],["error"]]],[11,"deserialize_any","toml::value","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]]],"paths":[[4,"Value"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"],[3,"Error"],[3,"Datetime"],[3,"DatetimeParseError"]]};
searchIndex["typenum"]={"doc":"This crate provides type-level numbers evaluated at compile time. It depends only on libcore.","items":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Greater`.",N,N],[3,"Less","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Less`.",N,N],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Equal`.",N,N],[0,"consts","","Type aliases for many constants.",N,N],[6,"True","typenum::consts","",N,N],[6,"False","","",N,N],[6,"U0","","",N,N],[6,"U1","","",N,N],[6,"P1","","",N,N],[6,"N1","","",N,N],[6,"U2","","",N,N],[6,"P2","","",N,N],[6,"N2","","",N,N],[6,"U3","","",N,N],[6,"P3","","",N,N],[6,"N3","","",N,N],[6,"U4","","",N,N],[6,"P4","","",N,N],[6,"N4","","",N,N],[6,"U5","","",N,N],[6,"P5","","",N,N],[6,"N5","","",N,N],[6,"U6","","",N,N],[6,"P6","","",N,N],[6,"N6","","",N,N],[6,"U7","","",N,N],[6,"P7","","",N,N],[6,"N7","","",N,N],[6,"U8","","",N,N],[6,"P8","","",N,N],[6,"N8","","",N,N],[6,"U9","","",N,N],[6,"P9","","",N,N],[6,"N9","","",N,N],[6,"U10","","",N,N],[6,"P10","","",N,N],[6,"N10","","",N,N],[6,"U11","","",N,N],[6,"P11","","",N,N],[6,"N11","","",N,N],[6,"U12","","",N,N],[6,"P12","","",N,N],[6,"N12","","",N,N],[6,"U13","","",N,N],[6,"P13","","",N,N],[6,"N13","","",N,N],[6,"U14","","",N,N],[6,"P14","","",N,N],[6,"N14","","",N,N],[6,"U15","","",N,N],[6,"P15","","",N,N],[6,"N15","","",N,N],[6,"U16","","",N,N],[6,"P16","","",N,N],[6,"N16","","",N,N],[6,"U17","","",N,N],[6,"P17","","",N,N],[6,"N17","","",N,N],[6,"U18","","",N,N],[6,"P18","","",N,N],[6,"N18","","",N,N],[6,"U19","","",N,N],[6,"P19","","",N,N],[6,"N19","","",N,N],[6,"U20","","",N,N],[6,"P20","","",N,N],[6,"N20","","",N,N],[6,"U21","","",N,N],[6,"P21","","",N,N],[6,"N21","","",N,N],[6,"U22","","",N,N],[6,"P22","","",N,N],[6,"N22","","",N,N],[6,"U23","","",N,N],[6,"P23","","",N,N],[6,"N23","","",N,N],[6,"U24","","",N,N],[6,"P24","","",N,N],[6,"N24","","",N,N],[6,"U25","","",N,N],[6,"P25","","",N,N],[6,"N25","","",N,N],[6,"U26","","",N,N],[6,"P26","","",N,N],[6,"N26","","",N,N],[6,"U27","","",N,N],[6,"P27","","",N,N],[6,"N27","","",N,N],[6,"U28","","",N,N],[6,"P28","","",N,N],[6,"N28","","",N,N],[6,"U29","","",N,N],[6,"P29","","",N,N],[6,"N29","","",N,N],[6,"U30","","",N,N],[6,"P30","","",N,N],[6,"N30","","",N,N],[6,"U31","","",N,N],[6,"P31","","",N,N],[6,"N31","","",N,N],[6,"U32","","",N,N],[6,"P32","","",N,N],[6,"N32","","",N,N],[6,"U33","","",N,N],[6,"P33","","",N,N],[6,"N33","","",N,N],[6,"U34","","",N,N],[6,"P34","","",N,N],[6,"N34","","",N,N],[6,"U35","","",N,N],[6,"P35","","",N,N],[6,"N35","","",N,N],[6,"U36","","",N,N],[6,"P36","","",N,N],[6,"N36","","",N,N],[6,"U37","","",N,N],[6,"P37","","",N,N],[6,"N37","","",N,N],[6,"U38","","",N,N],[6,"P38","","",N,N],[6,"N38","","",N,N],[6,"U39","","",N,N],[6,"P39","","",N,N],[6,"N39","","",N,N],[6,"U40","","",N,N],[6,"P40","","",N,N],[6,"N40","","",N,N],[6,"U41","","",N,N],[6,"P41","","",N,N],[6,"N41","","",N,N],[6,"U42","","",N,N],[6,"P42","","",N,N],[6,"N42","","",N,N],[6,"U43","","",N,N],[6,"P43","","",N,N],[6,"N43","","",N,N],[6,"U44","","",N,N],[6,"P44","","",N,N],[6,"N44","","",N,N],[6,"U45","","",N,N],[6,"P45","","",N,N],[6,"N45","","",N,N],[6,"U46","","",N,N],[6,"P46","","",N,N],[6,"N46","","",N,N],[6,"U47","","",N,N],[6,"P47","","",N,N],[6,"N47","","",N,N],[6,"U48","","",N,N],[6,"P48","","",N,N],[6,"N48","","",N,N],[6,"U49","","",N,N],[6,"P49","","",N,N],[6,"N49","","",N,N],[6,"U50","","",N,N],[6,"P50","","",N,N],[6,"N50","","",N,N],[6,"U51","","",N,N],[6,"P51","","",N,N],[6,"N51","","",N,N],[6,"U52","","",N,N],[6,"P52","","",N,N],[6,"N52","","",N,N],[6,"U53","","",N,N],[6,"P53","","",N,N],[6,"N53","","",N,N],[6,"U54","","",N,N],[6,"P54","","",N,N],[6,"N54","","",N,N],[6,"U55","","",N,N],[6,"P55","","",N,N],[6,"N55","","",N,N],[6,"U56","","",N,N],[6,"P56","","",N,N],[6,"N56","","",N,N],[6,"U57","","",N,N],[6,"P57","","",N,N],[6,"N57","","",N,N],[6,"U58","","",N,N],[6,"P58","","",N,N],[6,"N58","","",N,N],[6,"U59","","",N,N],[6,"P59","","",N,N],[6,"N59","","",N,N],[6,"U60","","",N,N],[6,"P60","","",N,N],[6,"N60","","",N,N],[6,"U61","","",N,N],[6,"P61","","",N,N],[6,"N61","","",N,N],[6,"U62","","",N,N],[6,"P62","","",N,N],[6,"N62","","",N,N],[6,"U63","","",N,N],[6,"P63","","",N,N],[6,"N63","","",N,N],[6,"U64","","",N,N],[6,"P64","","",N,N],[6,"N64","","",N,N],[6,"U65","","",N,N],[6,"P65","","",N,N],[6,"N65","","",N,N],[6,"U66","","",N,N],[6,"P66","","",N,N],[6,"N66","","",N,N],[6,"U67","","",N,N],[6,"P67","","",N,N],[6,"N67","","",N,N],[6,"U68","","",N,N],[6,"P68","","",N,N],[6,"N68","","",N,N],[6,"U69","","",N,N],[6,"P69","","",N,N],[6,"N69","","",N,N],[6,"U70","","",N,N],[6,"P70","","",N,N],[6,"N70","","",N,N],[6,"U71","","",N,N],[6,"P71","","",N,N],[6,"N71","","",N,N],[6,"U72","","",N,N],[6,"P72","","",N,N],[6,"N72","","",N,N],[6,"U73","","",N,N],[6,"P73","","",N,N],[6,"N73","","",N,N],[6,"U74","","",N,N],[6,"P74","","",N,N],[6,"N74","","",N,N],[6,"U75","","",N,N],[6,"P75","","",N,N],[6,"N75","","",N,N],[6,"U76","","",N,N],[6,"P76","","",N,N],[6,"N76","","",N,N],[6,"U77","","",N,N],[6,"P77","","",N,N],[6,"N77","","",N,N],[6,"U78","","",N,N],[6,"P78","","",N,N],[6,"N78","","",N,N],[6,"U79","","",N,N],[6,"P79","","",N,N],[6,"N79","","",N,N],[6,"U80","","",N,N],[6,"P80","","",N,N],[6,"N80","","",N,N],[6,"U81","","",N,N],[6,"P81","","",N,N],[6,"N81","","",N,N],[6,"U82","","",N,N],[6,"P82","","",N,N],[6,"N82","","",N,N],[6,"U83","","",N,N],[6,"P83","","",N,N],[6,"N83","","",N,N],[6,"U84","","",N,N],[6,"P84","","",N,N],[6,"N84","","",N,N],[6,"U85","","",N,N],[6,"P85","","",N,N],[6,"N85","","",N,N],[6,"U86","","",N,N],[6,"P86","","",N,N],[6,"N86","","",N,N],[6,"U87","","",N,N],[6,"P87","","",N,N],[6,"N87","","",N,N],[6,"U88","","",N,N],[6,"P88","","",N,N],[6,"N88","","",N,N],[6,"U89","","",N,N],[6,"P89","","",N,N],[6,"N89","","",N,N],[6,"U90","","",N,N],[6,"P90","","",N,N],[6,"N90","","",N,N],[6,"U91","","",N,N],[6,"P91","","",N,N],[6,"N91","","",N,N],[6,"U92","","",N,N],[6,"P92","","",N,N],[6,"N92","","",N,N],[6,"U93","","",N,N],[6,"P93","","",N,N],[6,"N93","","",N,N],[6,"U94","","",N,N],[6,"P94","","",N,N],[6,"N94","","",N,N],[6,"U95","","",N,N],[6,"P95","","",N,N],[6,"N95","","",N,N],[6,"U96","","",N,N],[6,"P96","","",N,N],[6,"N96","","",N,N],[6,"U97","","",N,N],[6,"P97","","",N,N],[6,"N97","","",N,N],[6,"U98","","",N,N],[6,"P98","","",N,N],[6,"N98","","",N,N],[6,"U99","","",N,N],[6,"P99","","",N,N],[6,"N99","","",N,N],[6,"U100","","",N,N],[6,"P100","","",N,N],[6,"N100","","",N,N],[6,"U101","","",N,N],[6,"P101","","",N,N],[6,"N101","","",N,N],[6,"U102","","",N,N],[6,"P102","","",N,N],[6,"N102","","",N,N],[6,"U103","","",N,N],[6,"P103","","",N,N],[6,"N103","","",N,N],[6,"U104","","",N,N],[6,"P104","","",N,N],[6,"N104","","",N,N],[6,"U105","","",N,N],[6,"P105","","",N,N],[6,"N105","","",N,N],[6,"U106","","",N,N],[6,"P106","","",N,N],[6,"N106","","",N,N],[6,"U107","","",N,N],[6,"P107","","",N,N],[6,"N107","","",N,N],[6,"U108","","",N,N],[6,"P108","","",N,N],[6,"N108","","",N,N],[6,"U109","","",N,N],[6,"P109","","",N,N],[6,"N109","","",N,N],[6,"U110","","",N,N],[6,"P110","","",N,N],[6,"N110","","",N,N],[6,"U111","","",N,N],[6,"P111","","",N,N],[6,"N111","","",N,N],[6,"U112","","",N,N],[6,"P112","","",N,N],[6,"N112","","",N,N],[6,"U113","","",N,N],[6,"P113","","",N,N],[6,"N113","","",N,N],[6,"U114","","",N,N],[6,"P114","","",N,N],[6,"N114","","",N,N],[6,"U115","","",N,N],[6,"P115","","",N,N],[6,"N115","","",N,N],[6,"U116","","",N,N],[6,"P116","","",N,N],[6,"N116","","",N,N],[6,"U117","","",N,N],[6,"P117","","",N,N],[6,"N117","","",N,N],[6,"U118","","",N,N],[6,"P118","","",N,N],[6,"N118","","",N,N],[6,"U119","","",N,N],[6,"P119","","",N,N],[6,"N119","","",N,N],[6,"U120","","",N,N],[6,"P120","","",N,N],[6,"N120","","",N,N],[6,"U121","","",N,N],[6,"P121","","",N,N],[6,"N121","","",N,N],[6,"U122","","",N,N],[6,"P122","","",N,N],[6,"N122","","",N,N],[6,"U123","","",N,N],[6,"P123","","",N,N],[6,"N123","","",N,N],[6,"U124","","",N,N],[6,"P124","","",N,N],[6,"N124","","",N,N],[6,"U125","","",N,N],[6,"P125","","",N,N],[6,"N125","","",N,N],[6,"U126","","",N,N],[6,"P126","","",N,N],[6,"N126","","",N,N],[6,"U127","","",N,N],[6,"P127","","",N,N],[6,"N127","","",N,N],[6,"U128","","",N,N],[6,"P128","","",N,N],[6,"N128","","",N,N],[6,"U129","","",N,N],[6,"P129","","",N,N],[6,"N129","","",N,N],[6,"U130","","",N,N],[6,"P130","","",N,N],[6,"N130","","",N,N],[6,"U131","","",N,N],[6,"P131","","",N,N],[6,"N131","","",N,N],[6,"U132","","",N,N],[6,"P132","","",N,N],[6,"N132","","",N,N],[6,"U133","","",N,N],[6,"P133","","",N,N],[6,"N133","","",N,N],[6,"U134","","",N,N],[6,"P134","","",N,N],[6,"N134","","",N,N],[6,"U135","","",N,N],[6,"P135","","",N,N],[6,"N135","","",N,N],[6,"U136","","",N,N],[6,"P136","","",N,N],[6,"N136","","",N,N],[6,"U137","","",N,N],[6,"P137","","",N,N],[6,"N137","","",N,N],[6,"U138","","",N,N],[6,"P138","","",N,N],[6,"N138","","",N,N],[6,"U139","","",N,N],[6,"P139","","",N,N],[6,"N139","","",N,N],[6,"U140","","",N,N],[6,"P140","","",N,N],[6,"N140","","",N,N],[6,"U141","","",N,N],[6,"P141","","",N,N],[6,"N141","","",N,N],[6,"U142","","",N,N],[6,"P142","","",N,N],[6,"N142","","",N,N],[6,"U143","","",N,N],[6,"P143","","",N,N],[6,"N143","","",N,N],[6,"U144","","",N,N],[6,"P144","","",N,N],[6,"N144","","",N,N],[6,"U145","","",N,N],[6,"P145","","",N,N],[6,"N145","","",N,N],[6,"U146","","",N,N],[6,"P146","","",N,N],[6,"N146","","",N,N],[6,"U147","","",N,N],[6,"P147","","",N,N],[6,"N147","","",N,N],[6,"U148","","",N,N],[6,"P148","","",N,N],[6,"N148","","",N,N],[6,"U149","","",N,N],[6,"P149","","",N,N],[6,"N149","","",N,N],[6,"U150","","",N,N],[6,"P150","","",N,N],[6,"N150","","",N,N],[6,"U151","","",N,N],[6,"P151","","",N,N],[6,"N151","","",N,N],[6,"U152","","",N,N],[6,"P152","","",N,N],[6,"N152","","",N,N],[6,"U153","","",N,N],[6,"P153","","",N,N],[6,"N153","","",N,N],[6,"U154","","",N,N],[6,"P154","","",N,N],[6,"N154","","",N,N],[6,"U155","","",N,N],[6,"P155","","",N,N],[6,"N155","","",N,N],[6,"U156","","",N,N],[6,"P156","","",N,N],[6,"N156","","",N,N],[6,"U157","","",N,N],[6,"P157","","",N,N],[6,"N157","","",N,N],[6,"U158","","",N,N],[6,"P158","","",N,N],[6,"N158","","",N,N],[6,"U159","","",N,N],[6,"P159","","",N,N],[6,"N159","","",N,N],[6,"U160","","",N,N],[6,"P160","","",N,N],[6,"N160","","",N,N],[6,"U161","","",N,N],[6,"P161","","",N,N],[6,"N161","","",N,N],[6,"U162","","",N,N],[6,"P162","","",N,N],[6,"N162","","",N,N],[6,"U163","","",N,N],[6,"P163","","",N,N],[6,"N163","","",N,N],[6,"U164","","",N,N],[6,"P164","","",N,N],[6,"N164","","",N,N],[6,"U165","","",N,N],[6,"P165","","",N,N],[6,"N165","","",N,N],[6,"U166","","",N,N],[6,"P166","","",N,N],[6,"N166","","",N,N],[6,"U167","","",N,N],[6,"P167","","",N,N],[6,"N167","","",N,N],[6,"U168","","",N,N],[6,"P168","","",N,N],[6,"N168","","",N,N],[6,"U169","","",N,N],[6,"P169","","",N,N],[6,"N169","","",N,N],[6,"U170","","",N,N],[6,"P170","","",N,N],[6,"N170","","",N,N],[6,"U171","","",N,N],[6,"P171","","",N,N],[6,"N171","","",N,N],[6,"U172","","",N,N],[6,"P172","","",N,N],[6,"N172","","",N,N],[6,"U173","","",N,N],[6,"P173","","",N,N],[6,"N173","","",N,N],[6,"U174","","",N,N],[6,"P174","","",N,N],[6,"N174","","",N,N],[6,"U175","","",N,N],[6,"P175","","",N,N],[6,"N175","","",N,N],[6,"U176","","",N,N],[6,"P176","","",N,N],[6,"N176","","",N,N],[6,"U177","","",N,N],[6,"P177","","",N,N],[6,"N177","","",N,N],[6,"U178","","",N,N],[6,"P178","","",N,N],[6,"N178","","",N,N],[6,"U179","","",N,N],[6,"P179","","",N,N],[6,"N179","","",N,N],[6,"U180","","",N,N],[6,"P180","","",N,N],[6,"N180","","",N,N],[6,"U181","","",N,N],[6,"P181","","",N,N],[6,"N181","","",N,N],[6,"U182","","",N,N],[6,"P182","","",N,N],[6,"N182","","",N,N],[6,"U183","","",N,N],[6,"P183","","",N,N],[6,"N183","","",N,N],[6,"U184","","",N,N],[6,"P184","","",N,N],[6,"N184","","",N,N],[6,"U185","","",N,N],[6,"P185","","",N,N],[6,"N185","","",N,N],[6,"U186","","",N,N],[6,"P186","","",N,N],[6,"N186","","",N,N],[6,"U187","","",N,N],[6,"P187","","",N,N],[6,"N187","","",N,N],[6,"U188","","",N,N],[6,"P188","","",N,N],[6,"N188","","",N,N],[6,"U189","","",N,N],[6,"P189","","",N,N],[6,"N189","","",N,N],[6,"U190","","",N,N],[6,"P190","","",N,N],[6,"N190","","",N,N],[6,"U191","","",N,N],[6,"P191","","",N,N],[6,"N191","","",N,N],[6,"U192","","",N,N],[6,"P192","","",N,N],[6,"N192","","",N,N],[6,"U193","","",N,N],[6,"P193","","",N,N],[6,"N193","","",N,N],[6,"U194","","",N,N],[6,"P194","","",N,N],[6,"N194","","",N,N],[6,"U195","","",N,N],[6,"P195","","",N,N],[6,"N195","","",N,N],[6,"U196","","",N,N],[6,"P196","","",N,N],[6,"N196","","",N,N],[6,"U197","","",N,N],[6,"P197","","",N,N],[6,"N197","","",N,N],[6,"U198","","",N,N],[6,"P198","","",N,N],[6,"N198","","",N,N],[6,"U199","","",N,N],[6,"P199","","",N,N],[6,"N199","","",N,N],[6,"U200","","",N,N],[6,"P200","","",N,N],[6,"N200","","",N,N],[6,"U201","","",N,N],[6,"P201","","",N,N],[6,"N201","","",N,N],[6,"U202","","",N,N],[6,"P202","","",N,N],[6,"N202","","",N,N],[6,"U203","","",N,N],[6,"P203","","",N,N],[6,"N203","","",N,N],[6,"U204","","",N,N],[6,"P204","","",N,N],[6,"N204","","",N,N],[6,"U205","","",N,N],[6,"P205","","",N,N],[6,"N205","","",N,N],[6,"U206","","",N,N],[6,"P206","","",N,N],[6,"N206","","",N,N],[6,"U207","","",N,N],[6,"P207","","",N,N],[6,"N207","","",N,N],[6,"U208","","",N,N],[6,"P208","","",N,N],[6,"N208","","",N,N],[6,"U209","","",N,N],[6,"P209","","",N,N],[6,"N209","","",N,N],[6,"U210","","",N,N],[6,"P210","","",N,N],[6,"N210","","",N,N],[6,"U211","","",N,N],[6,"P211","","",N,N],[6,"N211","","",N,N],[6,"U212","","",N,N],[6,"P212","","",N,N],[6,"N212","","",N,N],[6,"U213","","",N,N],[6,"P213","","",N,N],[6,"N213","","",N,N],[6,"U214","","",N,N],[6,"P214","","",N,N],[6,"N214","","",N,N],[6,"U215","","",N,N],[6,"P215","","",N,N],[6,"N215","","",N,N],[6,"U216","","",N,N],[6,"P216","","",N,N],[6,"N216","","",N,N],[6,"U217","","",N,N],[6,"P217","","",N,N],[6,"N217","","",N,N],[6,"U218","","",N,N],[6,"P218","","",N,N],[6,"N218","","",N,N],[6,"U219","","",N,N],[6,"P219","","",N,N],[6,"N219","","",N,N],[6,"U220","","",N,N],[6,"P220","","",N,N],[6,"N220","","",N,N],[6,"U221","","",N,N],[6,"P221","","",N,N],[6,"N221","","",N,N],[6,"U222","","",N,N],[6,"P222","","",N,N],[6,"N222","","",N,N],[6,"U223","","",N,N],[6,"P223","","",N,N],[6,"N223","","",N,N],[6,"U224","","",N,N],[6,"P224","","",N,N],[6,"N224","","",N,N],[6,"U225","","",N,N],[6,"P225","","",N,N],[6,"N225","","",N,N],[6,"U226","","",N,N],[6,"P226","","",N,N],[6,"N226","","",N,N],[6,"U227","","",N,N],[6,"P227","","",N,N],[6,"N227","","",N,N],[6,"U228","","",N,N],[6,"P228","","",N,N],[6,"N228","","",N,N],[6,"U229","","",N,N],[6,"P229","","",N,N],[6,"N229","","",N,N],[6,"U230","","",N,N],[6,"P230","","",N,N],[6,"N230","","",N,N],[6,"U231","","",N,N],[6,"P231","","",N,N],[6,"N231","","",N,N],[6,"U232","","",N,N],[6,"P232","","",N,N],[6,"N232","","",N,N],[6,"U233","","",N,N],[6,"P233","","",N,N],[6,"N233","","",N,N],[6,"U234","","",N,N],[6,"P234","","",N,N],[6,"N234","","",N,N],[6,"U235","","",N,N],[6,"P235","","",N,N],[6,"N235","","",N,N],[6,"U236","","",N,N],[6,"P236","","",N,N],[6,"N236","","",N,N],[6,"U237","","",N,N],[6,"P237","","",N,N],[6,"N237","","",N,N],[6,"U238","","",N,N],[6,"P238","","",N,N],[6,"N238","","",N,N],[6,"U239","","",N,N],[6,"P239","","",N,N],[6,"N239","","",N,N],[6,"U240","","",N,N],[6,"P240","","",N,N],[6,"N240","","",N,N],[6,"U241","","",N,N],[6,"P241","","",N,N],[6,"N241","","",N,N],[6,"U242","","",N,N],[6,"P242","","",N,N],[6,"N242","","",N,N],[6,"U243","","",N,N],[6,"P243","","",N,N],[6,"N243","","",N,N],[6,"U244","","",N,N],[6,"P244","","",N,N],[6,"N244","","",N,N],[6,"U245","","",N,N],[6,"P245","","",N,N],[6,"N245","","",N,N],[6,"U246","","",N,N],[6,"P246","","",N,N],[6,"N246","","",N,N],[6,"U247","","",N,N],[6,"P247","","",N,N],[6,"N247","","",N,N],[6,"U248","","",N,N],[6,"P248","","",N,N],[6,"N248","","",N,N],[6,"U249","","",N,N],[6,"P249","","",N,N],[6,"N249","","",N,N],[6,"U250","","",N,N],[6,"P250","","",N,N],[6,"N250","","",N,N],[6,"U251","","",N,N],[6,"P251","","",N,N],[6,"N251","","",N,N],[6,"U252","","",N,N],[6,"P252","","",N,N],[6,"N252","","",N,N],[6,"U253","","",N,N],[6,"P253","","",N,N],[6,"N253","","",N,N],[6,"U254","","",N,N],[6,"P254","","",N,N],[6,"N254","","",N,N],[6,"U255","","",N,N],[6,"P255","","",N,N],[6,"N255","","",N,N],[6,"U256","","",N,N],[6,"P256","","",N,N],[6,"N256","","",N,N],[6,"U257","","",N,N],[6,"P257","","",N,N],[6,"N257","","",N,N],[6,"U258","","",N,N],[6,"P258","","",N,N],[6,"N258","","",N,N],[6,"U259","","",N,N],[6,"P259","","",N,N],[6,"N259","","",N,N],[6,"U260","","",N,N],[6,"P260","","",N,N],[6,"N260","","",N,N],[6,"U261","","",N,N],[6,"P261","","",N,N],[6,"N261","","",N,N],[6,"U262","","",N,N],[6,"P262","","",N,N],[6,"N262","","",N,N],[6,"U263","","",N,N],[6,"P263","","",N,N],[6,"N263","","",N,N],[6,"U264","","",N,N],[6,"P264","","",N,N],[6,"N264","","",N,N],[6,"U265","","",N,N],[6,"P265","","",N,N],[6,"N265","","",N,N],[6,"U266","","",N,N],[6,"P266","","",N,N],[6,"N266","","",N,N],[6,"U267","","",N,N],[6,"P267","","",N,N],[6,"N267","","",N,N],[6,"U268","","",N,N],[6,"P268","","",N,N],[6,"N268","","",N,N],[6,"U269","","",N,N],[6,"P269","","",N,N],[6,"N269","","",N,N],[6,"U270","","",N,N],[6,"P270","","",N,N],[6,"N270","","",N,N],[6,"U271","","",N,N],[6,"P271","","",N,N],[6,"N271","","",N,N],[6,"U272","","",N,N],[6,"P272","","",N,N],[6,"N272","","",N,N],[6,"U273","","",N,N],[6,"P273","","",N,N],[6,"N273","","",N,N],[6,"U274","","",N,N],[6,"P274","","",N,N],[6,"N274","","",N,N],[6,"U275","","",N,N],[6,"P275","","",N,N],[6,"N275","","",N,N],[6,"U276","","",N,N],[6,"P276","","",N,N],[6,"N276","","",N,N],[6,"U277","","",N,N],[6,"P277","","",N,N],[6,"N277","","",N,N],[6,"U278","","",N,N],[6,"P278","","",N,N],[6,"N278","","",N,N],[6,"U279","","",N,N],[6,"P279","","",N,N],[6,"N279","","",N,N],[6,"U280","","",N,N],[6,"P280","","",N,N],[6,"N280","","",N,N],[6,"U281","","",N,N],[6,"P281","","",N,N],[6,"N281","","",N,N],[6,"U282","","",N,N],[6,"P282","","",N,N],[6,"N282","","",N,N],[6,"U283","","",N,N],[6,"P283","","",N,N],[6,"N283","","",N,N],[6,"U284","","",N,N],[6,"P284","","",N,N],[6,"N284","","",N,N],[6,"U285","","",N,N],[6,"P285","","",N,N],[6,"N285","","",N,N],[6,"U286","","",N,N],[6,"P286","","",N,N],[6,"N286","","",N,N],[6,"U287","","",N,N],[6,"P287","","",N,N],[6,"N287","","",N,N],[6,"U288","","",N,N],[6,"P288","","",N,N],[6,"N288","","",N,N],[6,"U289","","",N,N],[6,"P289","","",N,N],[6,"N289","","",N,N],[6,"U290","","",N,N],[6,"P290","","",N,N],[6,"N290","","",N,N],[6,"U291","","",N,N],[6,"P291","","",N,N],[6,"N291","","",N,N],[6,"U292","","",N,N],[6,"P292","","",N,N],[6,"N292","","",N,N],[6,"U293","","",N,N],[6,"P293","","",N,N],[6,"N293","","",N,N],[6,"U294","","",N,N],[6,"P294","","",N,N],[6,"N294","","",N,N],[6,"U295","","",N,N],[6,"P295","","",N,N],[6,"N295","","",N,N],[6,"U296","","",N,N],[6,"P296","","",N,N],[6,"N296","","",N,N],[6,"U297","","",N,N],[6,"P297","","",N,N],[6,"N297","","",N,N],[6,"U298","","",N,N],[6,"P298","","",N,N],[6,"N298","","",N,N],[6,"U299","","",N,N],[6,"P299","","",N,N],[6,"N299","","",N,N],[6,"U300","","",N,N],[6,"P300","","",N,N],[6,"N300","","",N,N],[6,"U301","","",N,N],[6,"P301","","",N,N],[6,"N301","","",N,N],[6,"U302","","",N,N],[6,"P302","","",N,N],[6,"N302","","",N,N],[6,"U303","","",N,N],[6,"P303","","",N,N],[6,"N303","","",N,N],[6,"U304","","",N,N],[6,"P304","","",N,N],[6,"N304","","",N,N],[6,"U305","","",N,N],[6,"P305","","",N,N],[6,"N305","","",N,N],[6,"U306","","",N,N],[6,"P306","","",N,N],[6,"N306","","",N,N],[6,"U307","","",N,N],[6,"P307","","",N,N],[6,"N307","","",N,N],[6,"U308","","",N,N],[6,"P308","","",N,N],[6,"N308","","",N,N],[6,"U309","","",N,N],[6,"P309","","",N,N],[6,"N309","","",N,N],[6,"U310","","",N,N],[6,"P310","","",N,N],[6,"N310","","",N,N],[6,"U311","","",N,N],[6,"P311","","",N,N],[6,"N311","","",N,N],[6,"U312","","",N,N],[6,"P312","","",N,N],[6,"N312","","",N,N],[6,"U313","","",N,N],[6,"P313","","",N,N],[6,"N313","","",N,N],[6,"U314","","",N,N],[6,"P314","","",N,N],[6,"N314","","",N,N],[6,"U315","","",N,N],[6,"P315","","",N,N],[6,"N315","","",N,N],[6,"U316","","",N,N],[6,"P316","","",N,N],[6,"N316","","",N,N],[6,"U317","","",N,N],[6,"P317","","",N,N],[6,"N317","","",N,N],[6,"U318","","",N,N],[6,"P318","","",N,N],[6,"N318","","",N,N],[6,"U319","","",N,N],[6,"P319","","",N,N],[6,"N319","","",N,N],[6,"U320","","",N,N],[6,"P320","","",N,N],[6,"N320","","",N,N],[6,"U321","","",N,N],[6,"P321","","",N,N],[6,"N321","","",N,N],[6,"U322","","",N,N],[6,"P322","","",N,N],[6,"N322","","",N,N],[6,"U323","","",N,N],[6,"P323","","",N,N],[6,"N323","","",N,N],[6,"U324","","",N,N],[6,"P324","","",N,N],[6,"N324","","",N,N],[6,"U325","","",N,N],[6,"P325","","",N,N],[6,"N325","","",N,N],[6,"U326","","",N,N],[6,"P326","","",N,N],[6,"N326","","",N,N],[6,"U327","","",N,N],[6,"P327","","",N,N],[6,"N327","","",N,N],[6,"U328","","",N,N],[6,"P328","","",N,N],[6,"N328","","",N,N],[6,"U329","","",N,N],[6,"P329","","",N,N],[6,"N329","","",N,N],[6,"U330","","",N,N],[6,"P330","","",N,N],[6,"N330","","",N,N],[6,"U331","","",N,N],[6,"P331","","",N,N],[6,"N331","","",N,N],[6,"U332","","",N,N],[6,"P332","","",N,N],[6,"N332","","",N,N],[6,"U333","","",N,N],[6,"P333","","",N,N],[6,"N333","","",N,N],[6,"U334","","",N,N],[6,"P334","","",N,N],[6,"N334","","",N,N],[6,"U335","","",N,N],[6,"P335","","",N,N],[6,"N335","","",N,N],[6,"U336","","",N,N],[6,"P336","","",N,N],[6,"N336","","",N,N],[6,"U337","","",N,N],[6,"P337","","",N,N],[6,"N337","","",N,N],[6,"U338","","",N,N],[6,"P338","","",N,N],[6,"N338","","",N,N],[6,"U339","","",N,N],[6,"P339","","",N,N],[6,"N339","","",N,N],[6,"U340","","",N,N],[6,"P340","","",N,N],[6,"N340","","",N,N],[6,"U341","","",N,N],[6,"P341","","",N,N],[6,"N341","","",N,N],[6,"U342","","",N,N],[6,"P342","","",N,N],[6,"N342","","",N,N],[6,"U343","","",N,N],[6,"P343","","",N,N],[6,"N343","","",N,N],[6,"U344","","",N,N],[6,"P344","","",N,N],[6,"N344","","",N,N],[6,"U345","","",N,N],[6,"P345","","",N,N],[6,"N345","","",N,N],[6,"U346","","",N,N],[6,"P346","","",N,N],[6,"N346","","",N,N],[6,"U347","","",N,N],[6,"P347","","",N,N],[6,"N347","","",N,N],[6,"U348","","",N,N],[6,"P348","","",N,N],[6,"N348","","",N,N],[6,"U349","","",N,N],[6,"P349","","",N,N],[6,"N349","","",N,N],[6,"U350","","",N,N],[6,"P350","","",N,N],[6,"N350","","",N,N],[6,"U351","","",N,N],[6,"P351","","",N,N],[6,"N351","","",N,N],[6,"U352","","",N,N],[6,"P352","","",N,N],[6,"N352","","",N,N],[6,"U353","","",N,N],[6,"P353","","",N,N],[6,"N353","","",N,N],[6,"U354","","",N,N],[6,"P354","","",N,N],[6,"N354","","",N,N],[6,"U355","","",N,N],[6,"P355","","",N,N],[6,"N355","","",N,N],[6,"U356","","",N,N],[6,"P356","","",N,N],[6,"N356","","",N,N],[6,"U357","","",N,N],[6,"P357","","",N,N],[6,"N357","","",N,N],[6,"U358","","",N,N],[6,"P358","","",N,N],[6,"N358","","",N,N],[6,"U359","","",N,N],[6,"P359","","",N,N],[6,"N359","","",N,N],[6,"U360","","",N,N],[6,"P360","","",N,N],[6,"N360","","",N,N],[6,"U361","","",N,N],[6,"P361","","",N,N],[6,"N361","","",N,N],[6,"U362","","",N,N],[6,"P362","","",N,N],[6,"N362","","",N,N],[6,"U363","","",N,N],[6,"P363","","",N,N],[6,"N363","","",N,N],[6,"U364","","",N,N],[6,"P364","","",N,N],[6,"N364","","",N,N],[6,"U365","","",N,N],[6,"P365","","",N,N],[6,"N365","","",N,N],[6,"U366","","",N,N],[6,"P366","","",N,N],[6,"N366","","",N,N],[6,"U367","","",N,N],[6,"P367","","",N,N],[6,"N367","","",N,N],[6,"U368","","",N,N],[6,"P368","","",N,N],[6,"N368","","",N,N],[6,"U369","","",N,N],[6,"P369","","",N,N],[6,"N369","","",N,N],[6,"U370","","",N,N],[6,"P370","","",N,N],[6,"N370","","",N,N],[6,"U371","","",N,N],[6,"P371","","",N,N],[6,"N371","","",N,N],[6,"U372","","",N,N],[6,"P372","","",N,N],[6,"N372","","",N,N],[6,"U373","","",N,N],[6,"P373","","",N,N],[6,"N373","","",N,N],[6,"U374","","",N,N],[6,"P374","","",N,N],[6,"N374","","",N,N],[6,"U375","","",N,N],[6,"P375","","",N,N],[6,"N375","","",N,N],[6,"U376","","",N,N],[6,"P376","","",N,N],[6,"N376","","",N,N],[6,"U377","","",N,N],[6,"P377","","",N,N],[6,"N377","","",N,N],[6,"U378","","",N,N],[6,"P378","","",N,N],[6,"N378","","",N,N],[6,"U379","","",N,N],[6,"P379","","",N,N],[6,"N379","","",N,N],[6,"U380","","",N,N],[6,"P380","","",N,N],[6,"N380","","",N,N],[6,"U381","","",N,N],[6,"P381","","",N,N],[6,"N381","","",N,N],[6,"U382","","",N,N],[6,"P382","","",N,N],[6,"N382","","",N,N],[6,"U383","","",N,N],[6,"P383","","",N,N],[6,"N383","","",N,N],[6,"U384","","",N,N],[6,"P384","","",N,N],[6,"N384","","",N,N],[6,"U385","","",N,N],[6,"P385","","",N,N],[6,"N385","","",N,N],[6,"U386","","",N,N],[6,"P386","","",N,N],[6,"N386","","",N,N],[6,"U387","","",N,N],[6,"P387","","",N,N],[6,"N387","","",N,N],[6,"U388","","",N,N],[6,"P388","","",N,N],[6,"N388","","",N,N],[6,"U389","","",N,N],[6,"P389","","",N,N],[6,"N389","","",N,N],[6,"U390","","",N,N],[6,"P390","","",N,N],[6,"N390","","",N,N],[6,"U391","","",N,N],[6,"P391","","",N,N],[6,"N391","","",N,N],[6,"U392","","",N,N],[6,"P392","","",N,N],[6,"N392","","",N,N],[6,"U393","","",N,N],[6,"P393","","",N,N],[6,"N393","","",N,N],[6,"U394","","",N,N],[6,"P394","","",N,N],[6,"N394","","",N,N],[6,"U395","","",N,N],[6,"P395","","",N,N],[6,"N395","","",N,N],[6,"U396","","",N,N],[6,"P396","","",N,N],[6,"N396","","",N,N],[6,"U397","","",N,N],[6,"P397","","",N,N],[6,"N397","","",N,N],[6,"U398","","",N,N],[6,"P398","","",N,N],[6,"N398","","",N,N],[6,"U399","","",N,N],[6,"P399","","",N,N],[6,"N399","","",N,N],[6,"U400","","",N,N],[6,"P400","","",N,N],[6,"N400","","",N,N],[6,"U401","","",N,N],[6,"P401","","",N,N],[6,"N401","","",N,N],[6,"U402","","",N,N],[6,"P402","","",N,N],[6,"N402","","",N,N],[6,"U403","","",N,N],[6,"P403","","",N,N],[6,"N403","","",N,N],[6,"U404","","",N,N],[6,"P404","","",N,N],[6,"N404","","",N,N],[6,"U405","","",N,N],[6,"P405","","",N,N],[6,"N405","","",N,N],[6,"U406","","",N,N],[6,"P406","","",N,N],[6,"N406","","",N,N],[6,"U407","","",N,N],[6,"P407","","",N,N],[6,"N407","","",N,N],[6,"U408","","",N,N],[6,"P408","","",N,N],[6,"N408","","",N,N],[6,"U409","","",N,N],[6,"P409","","",N,N],[6,"N409","","",N,N],[6,"U410","","",N,N],[6,"P410","","",N,N],[6,"N410","","",N,N],[6,"U411","","",N,N],[6,"P411","","",N,N],[6,"N411","","",N,N],[6,"U412","","",N,N],[6,"P412","","",N,N],[6,"N412","","",N,N],[6,"U413","","",N,N],[6,"P413","","",N,N],[6,"N413","","",N,N],[6,"U414","","",N,N],[6,"P414","","",N,N],[6,"N414","","",N,N],[6,"U415","","",N,N],[6,"P415","","",N,N],[6,"N415","","",N,N],[6,"U416","","",N,N],[6,"P416","","",N,N],[6,"N416","","",N,N],[6,"U417","","",N,N],[6,"P417","","",N,N],[6,"N417","","",N,N],[6,"U418","","",N,N],[6,"P418","","",N,N],[6,"N418","","",N,N],[6,"U419","","",N,N],[6,"P419","","",N,N],[6,"N419","","",N,N],[6,"U420","","",N,N],[6,"P420","","",N,N],[6,"N420","","",N,N],[6,"U421","","",N,N],[6,"P421","","",N,N],[6,"N421","","",N,N],[6,"U422","","",N,N],[6,"P422","","",N,N],[6,"N422","","",N,N],[6,"U423","","",N,N],[6,"P423","","",N,N],[6,"N423","","",N,N],[6,"U424","","",N,N],[6,"P424","","",N,N],[6,"N424","","",N,N],[6,"U425","","",N,N],[6,"P425","","",N,N],[6,"N425","","",N,N],[6,"U426","","",N,N],[6,"P426","","",N,N],[6,"N426","","",N,N],[6,"U427","","",N,N],[6,"P427","","",N,N],[6,"N427","","",N,N],[6,"U428","","",N,N],[6,"P428","","",N,N],[6,"N428","","",N,N],[6,"U429","","",N,N],[6,"P429","","",N,N],[6,"N429","","",N,N],[6,"U430","","",N,N],[6,"P430","","",N,N],[6,"N430","","",N,N],[6,"U431","","",N,N],[6,"P431","","",N,N],[6,"N431","","",N,N],[6,"U432","","",N,N],[6,"P432","","",N,N],[6,"N432","","",N,N],[6,"U433","","",N,N],[6,"P433","","",N,N],[6,"N433","","",N,N],[6,"U434","","",N,N],[6,"P434","","",N,N],[6,"N434","","",N,N],[6,"U435","","",N,N],[6,"P435","","",N,N],[6,"N435","","",N,N],[6,"U436","","",N,N],[6,"P436","","",N,N],[6,"N436","","",N,N],[6,"U437","","",N,N],[6,"P437","","",N,N],[6,"N437","","",N,N],[6,"U438","","",N,N],[6,"P438","","",N,N],[6,"N438","","",N,N],[6,"U439","","",N,N],[6,"P439","","",N,N],[6,"N439","","",N,N],[6,"U440","","",N,N],[6,"P440","","",N,N],[6,"N440","","",N,N],[6,"U441","","",N,N],[6,"P441","","",N,N],[6,"N441","","",N,N],[6,"U442","","",N,N],[6,"P442","","",N,N],[6,"N442","","",N,N],[6,"U443","","",N,N],[6,"P443","","",N,N],[6,"N443","","",N,N],[6,"U444","","",N,N],[6,"P444","","",N,N],[6,"N444","","",N,N],[6,"U445","","",N,N],[6,"P445","","",N,N],[6,"N445","","",N,N],[6,"U446","","",N,N],[6,"P446","","",N,N],[6,"N446","","",N,N],[6,"U447","","",N,N],[6,"P447","","",N,N],[6,"N447","","",N,N],[6,"U448","","",N,N],[6,"P448","","",N,N],[6,"N448","","",N,N],[6,"U449","","",N,N],[6,"P449","","",N,N],[6,"N449","","",N,N],[6,"U450","","",N,N],[6,"P450","","",N,N],[6,"N450","","",N,N],[6,"U451","","",N,N],[6,"P451","","",N,N],[6,"N451","","",N,N],[6,"U452","","",N,N],[6,"P452","","",N,N],[6,"N452","","",N,N],[6,"U453","","",N,N],[6,"P453","","",N,N],[6,"N453","","",N,N],[6,"U454","","",N,N],[6,"P454","","",N,N],[6,"N454","","",N,N],[6,"U455","","",N,N],[6,"P455","","",N,N],[6,"N455","","",N,N],[6,"U456","","",N,N],[6,"P456","","",N,N],[6,"N456","","",N,N],[6,"U457","","",N,N],[6,"P457","","",N,N],[6,"N457","","",N,N],[6,"U458","","",N,N],[6,"P458","","",N,N],[6,"N458","","",N,N],[6,"U459","","",N,N],[6,"P459","","",N,N],[6,"N459","","",N,N],[6,"U460","","",N,N],[6,"P460","","",N,N],[6,"N460","","",N,N],[6,"U461","","",N,N],[6,"P461","","",N,N],[6,"N461","","",N,N],[6,"U462","","",N,N],[6,"P462","","",N,N],[6,"N462","","",N,N],[6,"U463","","",N,N],[6,"P463","","",N,N],[6,"N463","","",N,N],[6,"U464","","",N,N],[6,"P464","","",N,N],[6,"N464","","",N,N],[6,"U465","","",N,N],[6,"P465","","",N,N],[6,"N465","","",N,N],[6,"U466","","",N,N],[6,"P466","","",N,N],[6,"N466","","",N,N],[6,"U467","","",N,N],[6,"P467","","",N,N],[6,"N467","","",N,N],[6,"U468","","",N,N],[6,"P468","","",N,N],[6,"N468","","",N,N],[6,"U469","","",N,N],[6,"P469","","",N,N],[6,"N469","","",N,N],[6,"U470","","",N,N],[6,"P470","","",N,N],[6,"N470","","",N,N],[6,"U471","","",N,N],[6,"P471","","",N,N],[6,"N471","","",N,N],[6,"U472","","",N,N],[6,"P472","","",N,N],[6,"N472","","",N,N],[6,"U473","","",N,N],[6,"P473","","",N,N],[6,"N473","","",N,N],[6,"U474","","",N,N],[6,"P474","","",N,N],[6,"N474","","",N,N],[6,"U475","","",N,N],[6,"P475","","",N,N],[6,"N475","","",N,N],[6,"U476","","",N,N],[6,"P476","","",N,N],[6,"N476","","",N,N],[6,"U477","","",N,N],[6,"P477","","",N,N],[6,"N477","","",N,N],[6,"U478","","",N,N],[6,"P478","","",N,N],[6,"N478","","",N,N],[6,"U479","","",N,N],[6,"P479","","",N,N],[6,"N479","","",N,N],[6,"U480","","",N,N],[6,"P480","","",N,N],[6,"N480","","",N,N],[6,"U481","","",N,N],[6,"P481","","",N,N],[6,"N481","","",N,N],[6,"U482","","",N,N],[6,"P482","","",N,N],[6,"N482","","",N,N],[6,"U483","","",N,N],[6,"P483","","",N,N],[6,"N483","","",N,N],[6,"U484","","",N,N],[6,"P484","","",N,N],[6,"N484","","",N,N],[6,"U485","","",N,N],[6,"P485","","",N,N],[6,"N485","","",N,N],[6,"U486","","",N,N],[6,"P486","","",N,N],[6,"N486","","",N,N],[6,"U487","","",N,N],[6,"P487","","",N,N],[6,"N487","","",N,N],[6,"U488","","",N,N],[6,"P488","","",N,N],[6,"N488","","",N,N],[6,"U489","","",N,N],[6,"P489","","",N,N],[6,"N489","","",N,N],[6,"U490","","",N,N],[6,"P490","","",N,N],[6,"N490","","",N,N],[6,"U491","","",N,N],[6,"P491","","",N,N],[6,"N491","","",N,N],[6,"U492","","",N,N],[6,"P492","","",N,N],[6,"N492","","",N,N],[6,"U493","","",N,N],[6,"P493","","",N,N],[6,"N493","","",N,N],[6,"U494","","",N,N],[6,"P494","","",N,N],[6,"N494","","",N,N],[6,"U495","","",N,N],[6,"P495","","",N,N],[6,"N495","","",N,N],[6,"U496","","",N,N],[6,"P496","","",N,N],[6,"N496","","",N,N],[6,"U497","","",N,N],[6,"P497","","",N,N],[6,"N497","","",N,N],[6,"U498","","",N,N],[6,"P498","","",N,N],[6,"N498","","",N,N],[6,"U499","","",N,N],[6,"P499","","",N,N],[6,"N499","","",N,N],[6,"U500","","",N,N],[6,"P500","","",N,N],[6,"N500","","",N,N],[6,"U501","","",N,N],[6,"P501","","",N,N],[6,"N501","","",N,N],[6,"U502","","",N,N],[6,"P502","","",N,N],[6,"N502","","",N,N],[6,"U503","","",N,N],[6,"P503","","",N,N],[6,"N503","","",N,N],[6,"U504","","",N,N],[6,"P504","","",N,N],[6,"N504","","",N,N],[6,"U505","","",N,N],[6,"P505","","",N,N],[6,"N505","","",N,N],[6,"U506","","",N,N],[6,"P506","","",N,N],[6,"N506","","",N,N],[6,"U507","","",N,N],[6,"P507","","",N,N],[6,"N507","","",N,N],[6,"U508","","",N,N],[6,"P508","","",N,N],[6,"N508","","",N,N],[6,"U509","","",N,N],[6,"P509","","",N,N],[6,"N509","","",N,N],[6,"U510","","",N,N],[6,"P510","","",N,N],[6,"N510","","",N,N],[6,"U511","","",N,N],[6,"P511","","",N,N],[6,"N511","","",N,N],[6,"U512","","",N,N],[6,"P512","","",N,N],[6,"N512","","",N,N],[6,"U513","","",N,N],[6,"P513","","",N,N],[6,"N513","","",N,N],[6,"U514","","",N,N],[6,"P514","","",N,N],[6,"N514","","",N,N],[6,"U515","","",N,N],[6,"P515","","",N,N],[6,"N515","","",N,N],[6,"U516","","",N,N],[6,"P516","","",N,N],[6,"N516","","",N,N],[6,"U517","","",N,N],[6,"P517","","",N,N],[6,"N517","","",N,N],[6,"U518","","",N,N],[6,"P518","","",N,N],[6,"N518","","",N,N],[6,"U519","","",N,N],[6,"P519","","",N,N],[6,"N519","","",N,N],[6,"U520","","",N,N],[6,"P520","","",N,N],[6,"N520","","",N,N],[6,"U521","","",N,N],[6,"P521","","",N,N],[6,"N521","","",N,N],[6,"U522","","",N,N],[6,"P522","","",N,N],[6,"N522","","",N,N],[6,"U523","","",N,N],[6,"P523","","",N,N],[6,"N523","","",N,N],[6,"U524","","",N,N],[6,"P524","","",N,N],[6,"N524","","",N,N],[6,"U525","","",N,N],[6,"P525","","",N,N],[6,"N525","","",N,N],[6,"U526","","",N,N],[6,"P526","","",N,N],[6,"N526","","",N,N],[6,"U527","","",N,N],[6,"P527","","",N,N],[6,"N527","","",N,N],[6,"U528","","",N,N],[6,"P528","","",N,N],[6,"N528","","",N,N],[6,"U529","","",N,N],[6,"P529","","",N,N],[6,"N529","","",N,N],[6,"U530","","",N,N],[6,"P530","","",N,N],[6,"N530","","",N,N],[6,"U531","","",N,N],[6,"P531","","",N,N],[6,"N531","","",N,N],[6,"U532","","",N,N],[6,"P532","","",N,N],[6,"N532","","",N,N],[6,"U533","","",N,N],[6,"P533","","",N,N],[6,"N533","","",N,N],[6,"U534","","",N,N],[6,"P534","","",N,N],[6,"N534","","",N,N],[6,"U535","","",N,N],[6,"P535","","",N,N],[6,"N535","","",N,N],[6,"U536","","",N,N],[6,"P536","","",N,N],[6,"N536","","",N,N],[6,"U537","","",N,N],[6,"P537","","",N,N],[6,"N537","","",N,N],[6,"U538","","",N,N],[6,"P538","","",N,N],[6,"N538","","",N,N],[6,"U539","","",N,N],[6,"P539","","",N,N],[6,"N539","","",N,N],[6,"U540","","",N,N],[6,"P540","","",N,N],[6,"N540","","",N,N],[6,"U541","","",N,N],[6,"P541","","",N,N],[6,"N541","","",N,N],[6,"U542","","",N,N],[6,"P542","","",N,N],[6,"N542","","",N,N],[6,"U543","","",N,N],[6,"P543","","",N,N],[6,"N543","","",N,N],[6,"U544","","",N,N],[6,"P544","","",N,N],[6,"N544","","",N,N],[6,"U545","","",N,N],[6,"P545","","",N,N],[6,"N545","","",N,N],[6,"U546","","",N,N],[6,"P546","","",N,N],[6,"N546","","",N,N],[6,"U547","","",N,N],[6,"P547","","",N,N],[6,"N547","","",N,N],[6,"U548","","",N,N],[6,"P548","","",N,N],[6,"N548","","",N,N],[6,"U549","","",N,N],[6,"P549","","",N,N],[6,"N549","","",N,N],[6,"U550","","",N,N],[6,"P550","","",N,N],[6,"N550","","",N,N],[6,"U551","","",N,N],[6,"P551","","",N,N],[6,"N551","","",N,N],[6,"U552","","",N,N],[6,"P552","","",N,N],[6,"N552","","",N,N],[6,"U553","","",N,N],[6,"P553","","",N,N],[6,"N553","","",N,N],[6,"U554","","",N,N],[6,"P554","","",N,N],[6,"N554","","",N,N],[6,"U555","","",N,N],[6,"P555","","",N,N],[6,"N555","","",N,N],[6,"U556","","",N,N],[6,"P556","","",N,N],[6,"N556","","",N,N],[6,"U557","","",N,N],[6,"P557","","",N,N],[6,"N557","","",N,N],[6,"U558","","",N,N],[6,"P558","","",N,N],[6,"N558","","",N,N],[6,"U559","","",N,N],[6,"P559","","",N,N],[6,"N559","","",N,N],[6,"U560","","",N,N],[6,"P560","","",N,N],[6,"N560","","",N,N],[6,"U561","","",N,N],[6,"P561","","",N,N],[6,"N561","","",N,N],[6,"U562","","",N,N],[6,"P562","","",N,N],[6,"N562","","",N,N],[6,"U563","","",N,N],[6,"P563","","",N,N],[6,"N563","","",N,N],[6,"U564","","",N,N],[6,"P564","","",N,N],[6,"N564","","",N,N],[6,"U565","","",N,N],[6,"P565","","",N,N],[6,"N565","","",N,N],[6,"U566","","",N,N],[6,"P566","","",N,N],[6,"N566","","",N,N],[6,"U567","","",N,N],[6,"P567","","",N,N],[6,"N567","","",N,N],[6,"U568","","",N,N],[6,"P568","","",N,N],[6,"N568","","",N,N],[6,"U569","","",N,N],[6,"P569","","",N,N],[6,"N569","","",N,N],[6,"U570","","",N,N],[6,"P570","","",N,N],[6,"N570","","",N,N],[6,"U571","","",N,N],[6,"P571","","",N,N],[6,"N571","","",N,N],[6,"U572","","",N,N],[6,"P572","","",N,N],[6,"N572","","",N,N],[6,"U573","","",N,N],[6,"P573","","",N,N],[6,"N573","","",N,N],[6,"U574","","",N,N],[6,"P574","","",N,N],[6,"N574","","",N,N],[6,"U575","","",N,N],[6,"P575","","",N,N],[6,"N575","","",N,N],[6,"U576","","",N,N],[6,"P576","","",N,N],[6,"N576","","",N,N],[6,"U577","","",N,N],[6,"P577","","",N,N],[6,"N577","","",N,N],[6,"U578","","",N,N],[6,"P578","","",N,N],[6,"N578","","",N,N],[6,"U579","","",N,N],[6,"P579","","",N,N],[6,"N579","","",N,N],[6,"U580","","",N,N],[6,"P580","","",N,N],[6,"N580","","",N,N],[6,"U581","","",N,N],[6,"P581","","",N,N],[6,"N581","","",N,N],[6,"U582","","",N,N],[6,"P582","","",N,N],[6,"N582","","",N,N],[6,"U583","","",N,N],[6,"P583","","",N,N],[6,"N583","","",N,N],[6,"U584","","",N,N],[6,"P584","","",N,N],[6,"N584","","",N,N],[6,"U585","","",N,N],[6,"P585","","",N,N],[6,"N585","","",N,N],[6,"U586","","",N,N],[6,"P586","","",N,N],[6,"N586","","",N,N],[6,"U587","","",N,N],[6,"P587","","",N,N],[6,"N587","","",N,N],[6,"U588","","",N,N],[6,"P588","","",N,N],[6,"N588","","",N,N],[6,"U589","","",N,N],[6,"P589","","",N,N],[6,"N589","","",N,N],[6,"U590","","",N,N],[6,"P590","","",N,N],[6,"N590","","",N,N],[6,"U591","","",N,N],[6,"P591","","",N,N],[6,"N591","","",N,N],[6,"U592","","",N,N],[6,"P592","","",N,N],[6,"N592","","",N,N],[6,"U593","","",N,N],[6,"P593","","",N,N],[6,"N593","","",N,N],[6,"U594","","",N,N],[6,"P594","","",N,N],[6,"N594","","",N,N],[6,"U595","","",N,N],[6,"P595","","",N,N],[6,"N595","","",N,N],[6,"U596","","",N,N],[6,"P596","","",N,N],[6,"N596","","",N,N],[6,"U597","","",N,N],[6,"P597","","",N,N],[6,"N597","","",N,N],[6,"U598","","",N,N],[6,"P598","","",N,N],[6,"N598","","",N,N],[6,"U599","","",N,N],[6,"P599","","",N,N],[6,"N599","","",N,N],[6,"U600","","",N,N],[6,"P600","","",N,N],[6,"N600","","",N,N],[6,"U601","","",N,N],[6,"P601","","",N,N],[6,"N601","","",N,N],[6,"U602","","",N,N],[6,"P602","","",N,N],[6,"N602","","",N,N],[6,"U603","","",N,N],[6,"P603","","",N,N],[6,"N603","","",N,N],[6,"U604","","",N,N],[6,"P604","","",N,N],[6,"N604","","",N,N],[6,"U605","","",N,N],[6,"P605","","",N,N],[6,"N605","","",N,N],[6,"U606","","",N,N],[6,"P606","","",N,N],[6,"N606","","",N,N],[6,"U607","","",N,N],[6,"P607","","",N,N],[6,"N607","","",N,N],[6,"U608","","",N,N],[6,"P608","","",N,N],[6,"N608","","",N,N],[6,"U609","","",N,N],[6,"P609","","",N,N],[6,"N609","","",N,N],[6,"U610","","",N,N],[6,"P610","","",N,N],[6,"N610","","",N,N],[6,"U611","","",N,N],[6,"P611","","",N,N],[6,"N611","","",N,N],[6,"U612","","",N,N],[6,"P612","","",N,N],[6,"N612","","",N,N],[6,"U613","","",N,N],[6,"P613","","",N,N],[6,"N613","","",N,N],[6,"U614","","",N,N],[6,"P614","","",N,N],[6,"N614","","",N,N],[6,"U615","","",N,N],[6,"P615","","",N,N],[6,"N615","","",N,N],[6,"U616","","",N,N],[6,"P616","","",N,N],[6,"N616","","",N,N],[6,"U617","","",N,N],[6,"P617","","",N,N],[6,"N617","","",N,N],[6,"U618","","",N,N],[6,"P618","","",N,N],[6,"N618","","",N,N],[6,"U619","","",N,N],[6,"P619","","",N,N],[6,"N619","","",N,N],[6,"U620","","",N,N],[6,"P620","","",N,N],[6,"N620","","",N,N],[6,"U621","","",N,N],[6,"P621","","",N,N],[6,"N621","","",N,N],[6,"U622","","",N,N],[6,"P622","","",N,N],[6,"N622","","",N,N],[6,"U623","","",N,N],[6,"P623","","",N,N],[6,"N623","","",N,N],[6,"U624","","",N,N],[6,"P624","","",N,N],[6,"N624","","",N,N],[6,"U625","","",N,N],[6,"P625","","",N,N],[6,"N625","","",N,N],[6,"U626","","",N,N],[6,"P626","","",N,N],[6,"N626","","",N,N],[6,"U627","","",N,N],[6,"P627","","",N,N],[6,"N627","","",N,N],[6,"U628","","",N,N],[6,"P628","","",N,N],[6,"N628","","",N,N],[6,"U629","","",N,N],[6,"P629","","",N,N],[6,"N629","","",N,N],[6,"U630","","",N,N],[6,"P630","","",N,N],[6,"N630","","",N,N],[6,"U631","","",N,N],[6,"P631","","",N,N],[6,"N631","","",N,N],[6,"U632","","",N,N],[6,"P632","","",N,N],[6,"N632","","",N,N],[6,"U633","","",N,N],[6,"P633","","",N,N],[6,"N633","","",N,N],[6,"U634","","",N,N],[6,"P634","","",N,N],[6,"N634","","",N,N],[6,"U635","","",N,N],[6,"P635","","",N,N],[6,"N635","","",N,N],[6,"U636","","",N,N],[6,"P636","","",N,N],[6,"N636","","",N,N],[6,"U637","","",N,N],[6,"P637","","",N,N],[6,"N637","","",N,N],[6,"U638","","",N,N],[6,"P638","","",N,N],[6,"N638","","",N,N],[6,"U639","","",N,N],[6,"P639","","",N,N],[6,"N639","","",N,N],[6,"U640","","",N,N],[6,"P640","","",N,N],[6,"N640","","",N,N],[6,"U641","","",N,N],[6,"P641","","",N,N],[6,"N641","","",N,N],[6,"U642","","",N,N],[6,"P642","","",N,N],[6,"N642","","",N,N],[6,"U643","","",N,N],[6,"P643","","",N,N],[6,"N643","","",N,N],[6,"U644","","",N,N],[6,"P644","","",N,N],[6,"N644","","",N,N],[6,"U645","","",N,N],[6,"P645","","",N,N],[6,"N645","","",N,N],[6,"U646","","",N,N],[6,"P646","","",N,N],[6,"N646","","",N,N],[6,"U647","","",N,N],[6,"P647","","",N,N],[6,"N647","","",N,N],[6,"U648","","",N,N],[6,"P648","","",N,N],[6,"N648","","",N,N],[6,"U649","","",N,N],[6,"P649","","",N,N],[6,"N649","","",N,N],[6,"U650","","",N,N],[6,"P650","","",N,N],[6,"N650","","",N,N],[6,"U651","","",N,N],[6,"P651","","",N,N],[6,"N651","","",N,N],[6,"U652","","",N,N],[6,"P652","","",N,N],[6,"N652","","",N,N],[6,"U653","","",N,N],[6,"P653","","",N,N],[6,"N653","","",N,N],[6,"U654","","",N,N],[6,"P654","","",N,N],[6,"N654","","",N,N],[6,"U655","","",N,N],[6,"P655","","",N,N],[6,"N655","","",N,N],[6,"U656","","",N,N],[6,"P656","","",N,N],[6,"N656","","",N,N],[6,"U657","","",N,N],[6,"P657","","",N,N],[6,"N657","","",N,N],[6,"U658","","",N,N],[6,"P658","","",N,N],[6,"N658","","",N,N],[6,"U659","","",N,N],[6,"P659","","",N,N],[6,"N659","","",N,N],[6,"U660","","",N,N],[6,"P660","","",N,N],[6,"N660","","",N,N],[6,"U661","","",N,N],[6,"P661","","",N,N],[6,"N661","","",N,N],[6,"U662","","",N,N],[6,"P662","","",N,N],[6,"N662","","",N,N],[6,"U663","","",N,N],[6,"P663","","",N,N],[6,"N663","","",N,N],[6,"U664","","",N,N],[6,"P664","","",N,N],[6,"N664","","",N,N],[6,"U665","","",N,N],[6,"P665","","",N,N],[6,"N665","","",N,N],[6,"U666","","",N,N],[6,"P666","","",N,N],[6,"N666","","",N,N],[6,"U667","","",N,N],[6,"P667","","",N,N],[6,"N667","","",N,N],[6,"U668","","",N,N],[6,"P668","","",N,N],[6,"N668","","",N,N],[6,"U669","","",N,N],[6,"P669","","",N,N],[6,"N669","","",N,N],[6,"U670","","",N,N],[6,"P670","","",N,N],[6,"N670","","",N,N],[6,"U671","","",N,N],[6,"P671","","",N,N],[6,"N671","","",N,N],[6,"U672","","",N,N],[6,"P672","","",N,N],[6,"N672","","",N,N],[6,"U673","","",N,N],[6,"P673","","",N,N],[6,"N673","","",N,N],[6,"U674","","",N,N],[6,"P674","","",N,N],[6,"N674","","",N,N],[6,"U675","","",N,N],[6,"P675","","",N,N],[6,"N675","","",N,N],[6,"U676","","",N,N],[6,"P676","","",N,N],[6,"N676","","",N,N],[6,"U677","","",N,N],[6,"P677","","",N,N],[6,"N677","","",N,N],[6,"U678","","",N,N],[6,"P678","","",N,N],[6,"N678","","",N,N],[6,"U679","","",N,N],[6,"P679","","",N,N],[6,"N679","","",N,N],[6,"U680","","",N,N],[6,"P680","","",N,N],[6,"N680","","",N,N],[6,"U681","","",N,N],[6,"P681","","",N,N],[6,"N681","","",N,N],[6,"U682","","",N,N],[6,"P682","","",N,N],[6,"N682","","",N,N],[6,"U683","","",N,N],[6,"P683","","",N,N],[6,"N683","","",N,N],[6,"U684","","",N,N],[6,"P684","","",N,N],[6,"N684","","",N,N],[6,"U685","","",N,N],[6,"P685","","",N,N],[6,"N685","","",N,N],[6,"U686","","",N,N],[6,"P686","","",N,N],[6,"N686","","",N,N],[6,"U687","","",N,N],[6,"P687","","",N,N],[6,"N687","","",N,N],[6,"U688","","",N,N],[6,"P688","","",N,N],[6,"N688","","",N,N],[6,"U689","","",N,N],[6,"P689","","",N,N],[6,"N689","","",N,N],[6,"U690","","",N,N],[6,"P690","","",N,N],[6,"N690","","",N,N],[6,"U691","","",N,N],[6,"P691","","",N,N],[6,"N691","","",N,N],[6,"U692","","",N,N],[6,"P692","","",N,N],[6,"N692","","",N,N],[6,"U693","","",N,N],[6,"P693","","",N,N],[6,"N693","","",N,N],[6,"U694","","",N,N],[6,"P694","","",N,N],[6,"N694","","",N,N],[6,"U695","","",N,N],[6,"P695","","",N,N],[6,"N695","","",N,N],[6,"U696","","",N,N],[6,"P696","","",N,N],[6,"N696","","",N,N],[6,"U697","","",N,N],[6,"P697","","",N,N],[6,"N697","","",N,N],[6,"U698","","",N,N],[6,"P698","","",N,N],[6,"N698","","",N,N],[6,"U699","","",N,N],[6,"P699","","",N,N],[6,"N699","","",N,N],[6,"U700","","",N,N],[6,"P700","","",N,N],[6,"N700","","",N,N],[6,"U701","","",N,N],[6,"P701","","",N,N],[6,"N701","","",N,N],[6,"U702","","",N,N],[6,"P702","","",N,N],[6,"N702","","",N,N],[6,"U703","","",N,N],[6,"P703","","",N,N],[6,"N703","","",N,N],[6,"U704","","",N,N],[6,"P704","","",N,N],[6,"N704","","",N,N],[6,"U705","","",N,N],[6,"P705","","",N,N],[6,"N705","","",N,N],[6,"U706","","",N,N],[6,"P706","","",N,N],[6,"N706","","",N,N],[6,"U707","","",N,N],[6,"P707","","",N,N],[6,"N707","","",N,N],[6,"U708","","",N,N],[6,"P708","","",N,N],[6,"N708","","",N,N],[6,"U709","","",N,N],[6,"P709","","",N,N],[6,"N709","","",N,N],[6,"U710","","",N,N],[6,"P710","","",N,N],[6,"N710","","",N,N],[6,"U711","","",N,N],[6,"P711","","",N,N],[6,"N711","","",N,N],[6,"U712","","",N,N],[6,"P712","","",N,N],[6,"N712","","",N,N],[6,"U713","","",N,N],[6,"P713","","",N,N],[6,"N713","","",N,N],[6,"U714","","",N,N],[6,"P714","","",N,N],[6,"N714","","",N,N],[6,"U715","","",N,N],[6,"P715","","",N,N],[6,"N715","","",N,N],[6,"U716","","",N,N],[6,"P716","","",N,N],[6,"N716","","",N,N],[6,"U717","","",N,N],[6,"P717","","",N,N],[6,"N717","","",N,N],[6,"U718","","",N,N],[6,"P718","","",N,N],[6,"N718","","",N,N],[6,"U719","","",N,N],[6,"P719","","",N,N],[6,"N719","","",N,N],[6,"U720","","",N,N],[6,"P720","","",N,N],[6,"N720","","",N,N],[6,"U721","","",N,N],[6,"P721","","",N,N],[6,"N721","","",N,N],[6,"U722","","",N,N],[6,"P722","","",N,N],[6,"N722","","",N,N],[6,"U723","","",N,N],[6,"P723","","",N,N],[6,"N723","","",N,N],[6,"U724","","",N,N],[6,"P724","","",N,N],[6,"N724","","",N,N],[6,"U725","","",N,N],[6,"P725","","",N,N],[6,"N725","","",N,N],[6,"U726","","",N,N],[6,"P726","","",N,N],[6,"N726","","",N,N],[6,"U727","","",N,N],[6,"P727","","",N,N],[6,"N727","","",N,N],[6,"U728","","",N,N],[6,"P728","","",N,N],[6,"N728","","",N,N],[6,"U729","","",N,N],[6,"P729","","",N,N],[6,"N729","","",N,N],[6,"U730","","",N,N],[6,"P730","","",N,N],[6,"N730","","",N,N],[6,"U731","","",N,N],[6,"P731","","",N,N],[6,"N731","","",N,N],[6,"U732","","",N,N],[6,"P732","","",N,N],[6,"N732","","",N,N],[6,"U733","","",N,N],[6,"P733","","",N,N],[6,"N733","","",N,N],[6,"U734","","",N,N],[6,"P734","","",N,N],[6,"N734","","",N,N],[6,"U735","","",N,N],[6,"P735","","",N,N],[6,"N735","","",N,N],[6,"U736","","",N,N],[6,"P736","","",N,N],[6,"N736","","",N,N],[6,"U737","","",N,N],[6,"P737","","",N,N],[6,"N737","","",N,N],[6,"U738","","",N,N],[6,"P738","","",N,N],[6,"N738","","",N,N],[6,"U739","","",N,N],[6,"P739","","",N,N],[6,"N739","","",N,N],[6,"U740","","",N,N],[6,"P740","","",N,N],[6,"N740","","",N,N],[6,"U741","","",N,N],[6,"P741","","",N,N],[6,"N741","","",N,N],[6,"U742","","",N,N],[6,"P742","","",N,N],[6,"N742","","",N,N],[6,"U743","","",N,N],[6,"P743","","",N,N],[6,"N743","","",N,N],[6,"U744","","",N,N],[6,"P744","","",N,N],[6,"N744","","",N,N],[6,"U745","","",N,N],[6,"P745","","",N,N],[6,"N745","","",N,N],[6,"U746","","",N,N],[6,"P746","","",N,N],[6,"N746","","",N,N],[6,"U747","","",N,N],[6,"P747","","",N,N],[6,"N747","","",N,N],[6,"U748","","",N,N],[6,"P748","","",N,N],[6,"N748","","",N,N],[6,"U749","","",N,N],[6,"P749","","",N,N],[6,"N749","","",N,N],[6,"U750","","",N,N],[6,"P750","","",N,N],[6,"N750","","",N,N],[6,"U751","","",N,N],[6,"P751","","",N,N],[6,"N751","","",N,N],[6,"U752","","",N,N],[6,"P752","","",N,N],[6,"N752","","",N,N],[6,"U753","","",N,N],[6,"P753","","",N,N],[6,"N753","","",N,N],[6,"U754","","",N,N],[6,"P754","","",N,N],[6,"N754","","",N,N],[6,"U755","","",N,N],[6,"P755","","",N,N],[6,"N755","","",N,N],[6,"U756","","",N,N],[6,"P756","","",N,N],[6,"N756","","",N,N],[6,"U757","","",N,N],[6,"P757","","",N,N],[6,"N757","","",N,N],[6,"U758","","",N,N],[6,"P758","","",N,N],[6,"N758","","",N,N],[6,"U759","","",N,N],[6,"P759","","",N,N],[6,"N759","","",N,N],[6,"U760","","",N,N],[6,"P760","","",N,N],[6,"N760","","",N,N],[6,"U761","","",N,N],[6,"P761","","",N,N],[6,"N761","","",N,N],[6,"U762","","",N,N],[6,"P762","","",N,N],[6,"N762","","",N,N],[6,"U763","","",N,N],[6,"P763","","",N,N],[6,"N763","","",N,N],[6,"U764","","",N,N],[6,"P764","","",N,N],[6,"N764","","",N,N],[6,"U765","","",N,N],[6,"P765","","",N,N],[6,"N765","","",N,N],[6,"U766","","",N,N],[6,"P766","","",N,N],[6,"N766","","",N,N],[6,"U767","","",N,N],[6,"P767","","",N,N],[6,"N767","","",N,N],[6,"U768","","",N,N],[6,"P768","","",N,N],[6,"N768","","",N,N],[6,"U769","","",N,N],[6,"P769","","",N,N],[6,"N769","","",N,N],[6,"U770","","",N,N],[6,"P770","","",N,N],[6,"N770","","",N,N],[6,"U771","","",N,N],[6,"P771","","",N,N],[6,"N771","","",N,N],[6,"U772","","",N,N],[6,"P772","","",N,N],[6,"N772","","",N,N],[6,"U773","","",N,N],[6,"P773","","",N,N],[6,"N773","","",N,N],[6,"U774","","",N,N],[6,"P774","","",N,N],[6,"N774","","",N,N],[6,"U775","","",N,N],[6,"P775","","",N,N],[6,"N775","","",N,N],[6,"U776","","",N,N],[6,"P776","","",N,N],[6,"N776","","",N,N],[6,"U777","","",N,N],[6,"P777","","",N,N],[6,"N777","","",N,N],[6,"U778","","",N,N],[6,"P778","","",N,N],[6,"N778","","",N,N],[6,"U779","","",N,N],[6,"P779","","",N,N],[6,"N779","","",N,N],[6,"U780","","",N,N],[6,"P780","","",N,N],[6,"N780","","",N,N],[6,"U781","","",N,N],[6,"P781","","",N,N],[6,"N781","","",N,N],[6,"U782","","",N,N],[6,"P782","","",N,N],[6,"N782","","",N,N],[6,"U783","","",N,N],[6,"P783","","",N,N],[6,"N783","","",N,N],[6,"U784","","",N,N],[6,"P784","","",N,N],[6,"N784","","",N,N],[6,"U785","","",N,N],[6,"P785","","",N,N],[6,"N785","","",N,N],[6,"U786","","",N,N],[6,"P786","","",N,N],[6,"N786","","",N,N],[6,"U787","","",N,N],[6,"P787","","",N,N],[6,"N787","","",N,N],[6,"U788","","",N,N],[6,"P788","","",N,N],[6,"N788","","",N,N],[6,"U789","","",N,N],[6,"P789","","",N,N],[6,"N789","","",N,N],[6,"U790","","",N,N],[6,"P790","","",N,N],[6,"N790","","",N,N],[6,"U791","","",N,N],[6,"P791","","",N,N],[6,"N791","","",N,N],[6,"U792","","",N,N],[6,"P792","","",N,N],[6,"N792","","",N,N],[6,"U793","","",N,N],[6,"P793","","",N,N],[6,"N793","","",N,N],[6,"U794","","",N,N],[6,"P794","","",N,N],[6,"N794","","",N,N],[6,"U795","","",N,N],[6,"P795","","",N,N],[6,"N795","","",N,N],[6,"U796","","",N,N],[6,"P796","","",N,N],[6,"N796","","",N,N],[6,"U797","","",N,N],[6,"P797","","",N,N],[6,"N797","","",N,N],[6,"U798","","",N,N],[6,"P798","","",N,N],[6,"N798","","",N,N],[6,"U799","","",N,N],[6,"P799","","",N,N],[6,"N799","","",N,N],[6,"U800","","",N,N],[6,"P800","","",N,N],[6,"N800","","",N,N],[6,"U801","","",N,N],[6,"P801","","",N,N],[6,"N801","","",N,N],[6,"U802","","",N,N],[6,"P802","","",N,N],[6,"N802","","",N,N],[6,"U803","","",N,N],[6,"P803","","",N,N],[6,"N803","","",N,N],[6,"U804","","",N,N],[6,"P804","","",N,N],[6,"N804","","",N,N],[6,"U805","","",N,N],[6,"P805","","",N,N],[6,"N805","","",N,N],[6,"U806","","",N,N],[6,"P806","","",N,N],[6,"N806","","",N,N],[6,"U807","","",N,N],[6,"P807","","",N,N],[6,"N807","","",N,N],[6,"U808","","",N,N],[6,"P808","","",N,N],[6,"N808","","",N,N],[6,"U809","","",N,N],[6,"P809","","",N,N],[6,"N809","","",N,N],[6,"U810","","",N,N],[6,"P810","","",N,N],[6,"N810","","",N,N],[6,"U811","","",N,N],[6,"P811","","",N,N],[6,"N811","","",N,N],[6,"U812","","",N,N],[6,"P812","","",N,N],[6,"N812","","",N,N],[6,"U813","","",N,N],[6,"P813","","",N,N],[6,"N813","","",N,N],[6,"U814","","",N,N],[6,"P814","","",N,N],[6,"N814","","",N,N],[6,"U815","","",N,N],[6,"P815","","",N,N],[6,"N815","","",N,N],[6,"U816","","",N,N],[6,"P816","","",N,N],[6,"N816","","",N,N],[6,"U817","","",N,N],[6,"P817","","",N,N],[6,"N817","","",N,N],[6,"U818","","",N,N],[6,"P818","","",N,N],[6,"N818","","",N,N],[6,"U819","","",N,N],[6,"P819","","",N,N],[6,"N819","","",N,N],[6,"U820","","",N,N],[6,"P820","","",N,N],[6,"N820","","",N,N],[6,"U821","","",N,N],[6,"P821","","",N,N],[6,"N821","","",N,N],[6,"U822","","",N,N],[6,"P822","","",N,N],[6,"N822","","",N,N],[6,"U823","","",N,N],[6,"P823","","",N,N],[6,"N823","","",N,N],[6,"U824","","",N,N],[6,"P824","","",N,N],[6,"N824","","",N,N],[6,"U825","","",N,N],[6,"P825","","",N,N],[6,"N825","","",N,N],[6,"U826","","",N,N],[6,"P826","","",N,N],[6,"N826","","",N,N],[6,"U827","","",N,N],[6,"P827","","",N,N],[6,"N827","","",N,N],[6,"U828","","",N,N],[6,"P828","","",N,N],[6,"N828","","",N,N],[6,"U829","","",N,N],[6,"P829","","",N,N],[6,"N829","","",N,N],[6,"U830","","",N,N],[6,"P830","","",N,N],[6,"N830","","",N,N],[6,"U831","","",N,N],[6,"P831","","",N,N],[6,"N831","","",N,N],[6,"U832","","",N,N],[6,"P832","","",N,N],[6,"N832","","",N,N],[6,"U833","","",N,N],[6,"P833","","",N,N],[6,"N833","","",N,N],[6,"U834","","",N,N],[6,"P834","","",N,N],[6,"N834","","",N,N],[6,"U835","","",N,N],[6,"P835","","",N,N],[6,"N835","","",N,N],[6,"U836","","",N,N],[6,"P836","","",N,N],[6,"N836","","",N,N],[6,"U837","","",N,N],[6,"P837","","",N,N],[6,"N837","","",N,N],[6,"U838","","",N,N],[6,"P838","","",N,N],[6,"N838","","",N,N],[6,"U839","","",N,N],[6,"P839","","",N,N],[6,"N839","","",N,N],[6,"U840","","",N,N],[6,"P840","","",N,N],[6,"N840","","",N,N],[6,"U841","","",N,N],[6,"P841","","",N,N],[6,"N841","","",N,N],[6,"U842","","",N,N],[6,"P842","","",N,N],[6,"N842","","",N,N],[6,"U843","","",N,N],[6,"P843","","",N,N],[6,"N843","","",N,N],[6,"U844","","",N,N],[6,"P844","","",N,N],[6,"N844","","",N,N],[6,"U845","","",N,N],[6,"P845","","",N,N],[6,"N845","","",N,N],[6,"U846","","",N,N],[6,"P846","","",N,N],[6,"N846","","",N,N],[6,"U847","","",N,N],[6,"P847","","",N,N],[6,"N847","","",N,N],[6,"U848","","",N,N],[6,"P848","","",N,N],[6,"N848","","",N,N],[6,"U849","","",N,N],[6,"P849","","",N,N],[6,"N849","","",N,N],[6,"U850","","",N,N],[6,"P850","","",N,N],[6,"N850","","",N,N],[6,"U851","","",N,N],[6,"P851","","",N,N],[6,"N851","","",N,N],[6,"U852","","",N,N],[6,"P852","","",N,N],[6,"N852","","",N,N],[6,"U853","","",N,N],[6,"P853","","",N,N],[6,"N853","","",N,N],[6,"U854","","",N,N],[6,"P854","","",N,N],[6,"N854","","",N,N],[6,"U855","","",N,N],[6,"P855","","",N,N],[6,"N855","","",N,N],[6,"U856","","",N,N],[6,"P856","","",N,N],[6,"N856","","",N,N],[6,"U857","","",N,N],[6,"P857","","",N,N],[6,"N857","","",N,N],[6,"U858","","",N,N],[6,"P858","","",N,N],[6,"N858","","",N,N],[6,"U859","","",N,N],[6,"P859","","",N,N],[6,"N859","","",N,N],[6,"U860","","",N,N],[6,"P860","","",N,N],[6,"N860","","",N,N],[6,"U861","","",N,N],[6,"P861","","",N,N],[6,"N861","","",N,N],[6,"U862","","",N,N],[6,"P862","","",N,N],[6,"N862","","",N,N],[6,"U863","","",N,N],[6,"P863","","",N,N],[6,"N863","","",N,N],[6,"U864","","",N,N],[6,"P864","","",N,N],[6,"N864","","",N,N],[6,"U865","","",N,N],[6,"P865","","",N,N],[6,"N865","","",N,N],[6,"U866","","",N,N],[6,"P866","","",N,N],[6,"N866","","",N,N],[6,"U867","","",N,N],[6,"P867","","",N,N],[6,"N867","","",N,N],[6,"U868","","",N,N],[6,"P868","","",N,N],[6,"N868","","",N,N],[6,"U869","","",N,N],[6,"P869","","",N,N],[6,"N869","","",N,N],[6,"U870","","",N,N],[6,"P870","","",N,N],[6,"N870","","",N,N],[6,"U871","","",N,N],[6,"P871","","",N,N],[6,"N871","","",N,N],[6,"U872","","",N,N],[6,"P872","","",N,N],[6,"N872","","",N,N],[6,"U873","","",N,N],[6,"P873","","",N,N],[6,"N873","","",N,N],[6,"U874","","",N,N],[6,"P874","","",N,N],[6,"N874","","",N,N],[6,"U875","","",N,N],[6,"P875","","",N,N],[6,"N875","","",N,N],[6,"U876","","",N,N],[6,"P876","","",N,N],[6,"N876","","",N,N],[6,"U877","","",N,N],[6,"P877","","",N,N],[6,"N877","","",N,N],[6,"U878","","",N,N],[6,"P878","","",N,N],[6,"N878","","",N,N],[6,"U879","","",N,N],[6,"P879","","",N,N],[6,"N879","","",N,N],[6,"U880","","",N,N],[6,"P880","","",N,N],[6,"N880","","",N,N],[6,"U881","","",N,N],[6,"P881","","",N,N],[6,"N881","","",N,N],[6,"U882","","",N,N],[6,"P882","","",N,N],[6,"N882","","",N,N],[6,"U883","","",N,N],[6,"P883","","",N,N],[6,"N883","","",N,N],[6,"U884","","",N,N],[6,"P884","","",N,N],[6,"N884","","",N,N],[6,"U885","","",N,N],[6,"P885","","",N,N],[6,"N885","","",N,N],[6,"U886","","",N,N],[6,"P886","","",N,N],[6,"N886","","",N,N],[6,"U887","","",N,N],[6,"P887","","",N,N],[6,"N887","","",N,N],[6,"U888","","",N,N],[6,"P888","","",N,N],[6,"N888","","",N,N],[6,"U889","","",N,N],[6,"P889","","",N,N],[6,"N889","","",N,N],[6,"U890","","",N,N],[6,"P890","","",N,N],[6,"N890","","",N,N],[6,"U891","","",N,N],[6,"P891","","",N,N],[6,"N891","","",N,N],[6,"U892","","",N,N],[6,"P892","","",N,N],[6,"N892","","",N,N],[6,"U893","","",N,N],[6,"P893","","",N,N],[6,"N893","","",N,N],[6,"U894","","",N,N],[6,"P894","","",N,N],[6,"N894","","",N,N],[6,"U895","","",N,N],[6,"P895","","",N,N],[6,"N895","","",N,N],[6,"U896","","",N,N],[6,"P896","","",N,N],[6,"N896","","",N,N],[6,"U897","","",N,N],[6,"P897","","",N,N],[6,"N897","","",N,N],[6,"U898","","",N,N],[6,"P898","","",N,N],[6,"N898","","",N,N],[6,"U899","","",N,N],[6,"P899","","",N,N],[6,"N899","","",N,N],[6,"U900","","",N,N],[6,"P900","","",N,N],[6,"N900","","",N,N],[6,"U901","","",N,N],[6,"P901","","",N,N],[6,"N901","","",N,N],[6,"U902","","",N,N],[6,"P902","","",N,N],[6,"N902","","",N,N],[6,"U903","","",N,N],[6,"P903","","",N,N],[6,"N903","","",N,N],[6,"U904","","",N,N],[6,"P904","","",N,N],[6,"N904","","",N,N],[6,"U905","","",N,N],[6,"P905","","",N,N],[6,"N905","","",N,N],[6,"U906","","",N,N],[6,"P906","","",N,N],[6,"N906","","",N,N],[6,"U907","","",N,N],[6,"P907","","",N,N],[6,"N907","","",N,N],[6,"U908","","",N,N],[6,"P908","","",N,N],[6,"N908","","",N,N],[6,"U909","","",N,N],[6,"P909","","",N,N],[6,"N909","","",N,N],[6,"U910","","",N,N],[6,"P910","","",N,N],[6,"N910","","",N,N],[6,"U911","","",N,N],[6,"P911","","",N,N],[6,"N911","","",N,N],[6,"U912","","",N,N],[6,"P912","","",N,N],[6,"N912","","",N,N],[6,"U913","","",N,N],[6,"P913","","",N,N],[6,"N913","","",N,N],[6,"U914","","",N,N],[6,"P914","","",N,N],[6,"N914","","",N,N],[6,"U915","","",N,N],[6,"P915","","",N,N],[6,"N915","","",N,N],[6,"U916","","",N,N],[6,"P916","","",N,N],[6,"N916","","",N,N],[6,"U917","","",N,N],[6,"P917","","",N,N],[6,"N917","","",N,N],[6,"U918","","",N,N],[6,"P918","","",N,N],[6,"N918","","",N,N],[6,"U919","","",N,N],[6,"P919","","",N,N],[6,"N919","","",N,N],[6,"U920","","",N,N],[6,"P920","","",N,N],[6,"N920","","",N,N],[6,"U921","","",N,N],[6,"P921","","",N,N],[6,"N921","","",N,N],[6,"U922","","",N,N],[6,"P922","","",N,N],[6,"N922","","",N,N],[6,"U923","","",N,N],[6,"P923","","",N,N],[6,"N923","","",N,N],[6,"U924","","",N,N],[6,"P924","","",N,N],[6,"N924","","",N,N],[6,"U925","","",N,N],[6,"P925","","",N,N],[6,"N925","","",N,N],[6,"U926","","",N,N],[6,"P926","","",N,N],[6,"N926","","",N,N],[6,"U927","","",N,N],[6,"P927","","",N,N],[6,"N927","","",N,N],[6,"U928","","",N,N],[6,"P928","","",N,N],[6,"N928","","",N,N],[6,"U929","","",N,N],[6,"P929","","",N,N],[6,"N929","","",N,N],[6,"U930","","",N,N],[6,"P930","","",N,N],[6,"N930","","",N,N],[6,"U931","","",N,N],[6,"P931","","",N,N],[6,"N931","","",N,N],[6,"U932","","",N,N],[6,"P932","","",N,N],[6,"N932","","",N,N],[6,"U933","","",N,N],[6,"P933","","",N,N],[6,"N933","","",N,N],[6,"U934","","",N,N],[6,"P934","","",N,N],[6,"N934","","",N,N],[6,"U935","","",N,N],[6,"P935","","",N,N],[6,"N935","","",N,N],[6,"U936","","",N,N],[6,"P936","","",N,N],[6,"N936","","",N,N],[6,"U937","","",N,N],[6,"P937","","",N,N],[6,"N937","","",N,N],[6,"U938","","",N,N],[6,"P938","","",N,N],[6,"N938","","",N,N],[6,"U939","","",N,N],[6,"P939","","",N,N],[6,"N939","","",N,N],[6,"U940","","",N,N],[6,"P940","","",N,N],[6,"N940","","",N,N],[6,"U941","","",N,N],[6,"P941","","",N,N],[6,"N941","","",N,N],[6,"U942","","",N,N],[6,"P942","","",N,N],[6,"N942","","",N,N],[6,"U943","","",N,N],[6,"P943","","",N,N],[6,"N943","","",N,N],[6,"U944","","",N,N],[6,"P944","","",N,N],[6,"N944","","",N,N],[6,"U945","","",N,N],[6,"P945","","",N,N],[6,"N945","","",N,N],[6,"U946","","",N,N],[6,"P946","","",N,N],[6,"N946","","",N,N],[6,"U947","","",N,N],[6,"P947","","",N,N],[6,"N947","","",N,N],[6,"U948","","",N,N],[6,"P948","","",N,N],[6,"N948","","",N,N],[6,"U949","","",N,N],[6,"P949","","",N,N],[6,"N949","","",N,N],[6,"U950","","",N,N],[6,"P950","","",N,N],[6,"N950","","",N,N],[6,"U951","","",N,N],[6,"P951","","",N,N],[6,"N951","","",N,N],[6,"U952","","",N,N],[6,"P952","","",N,N],[6,"N952","","",N,N],[6,"U953","","",N,N],[6,"P953","","",N,N],[6,"N953","","",N,N],[6,"U954","","",N,N],[6,"P954","","",N,N],[6,"N954","","",N,N],[6,"U955","","",N,N],[6,"P955","","",N,N],[6,"N955","","",N,N],[6,"U956","","",N,N],[6,"P956","","",N,N],[6,"N956","","",N,N],[6,"U957","","",N,N],[6,"P957","","",N,N],[6,"N957","","",N,N],[6,"U958","","",N,N],[6,"P958","","",N,N],[6,"N958","","",N,N],[6,"U959","","",N,N],[6,"P959","","",N,N],[6,"N959","","",N,N],[6,"U960","","",N,N],[6,"P960","","",N,N],[6,"N960","","",N,N],[6,"U961","","",N,N],[6,"P961","","",N,N],[6,"N961","","",N,N],[6,"U962","","",N,N],[6,"P962","","",N,N],[6,"N962","","",N,N],[6,"U963","","",N,N],[6,"P963","","",N,N],[6,"N963","","",N,N],[6,"U964","","",N,N],[6,"P964","","",N,N],[6,"N964","","",N,N],[6,"U965","","",N,N],[6,"P965","","",N,N],[6,"N965","","",N,N],[6,"U966","","",N,N],[6,"P966","","",N,N],[6,"N966","","",N,N],[6,"U967","","",N,N],[6,"P967","","",N,N],[6,"N967","","",N,N],[6,"U968","","",N,N],[6,"P968","","",N,N],[6,"N968","","",N,N],[6,"U969","","",N,N],[6,"P969","","",N,N],[6,"N969","","",N,N],[6,"U970","","",N,N],[6,"P970","","",N,N],[6,"N970","","",N,N],[6,"U971","","",N,N],[6,"P971","","",N,N],[6,"N971","","",N,N],[6,"U972","","",N,N],[6,"P972","","",N,N],[6,"N972","","",N,N],[6,"U973","","",N,N],[6,"P973","","",N,N],[6,"N973","","",N,N],[6,"U974","","",N,N],[6,"P974","","",N,N],[6,"N974","","",N,N],[6,"U975","","",N,N],[6,"P975","","",N,N],[6,"N975","","",N,N],[6,"U976","","",N,N],[6,"P976","","",N,N],[6,"N976","","",N,N],[6,"U977","","",N,N],[6,"P977","","",N,N],[6,"N977","","",N,N],[6,"U978","","",N,N],[6,"P978","","",N,N],[6,"N978","","",N,N],[6,"U979","","",N,N],[6,"P979","","",N,N],[6,"N979","","",N,N],[6,"U980","","",N,N],[6,"P980","","",N,N],[6,"N980","","",N,N],[6,"U981","","",N,N],[6,"P981","","",N,N],[6,"N981","","",N,N],[6,"U982","","",N,N],[6,"P982","","",N,N],[6,"N982","","",N,N],[6,"U983","","",N,N],[6,"P983","","",N,N],[6,"N983","","",N,N],[6,"U984","","",N,N],[6,"P984","","",N,N],[6,"N984","","",N,N],[6,"U985","","",N,N],[6,"P985","","",N,N],[6,"N985","","",N,N],[6,"U986","","",N,N],[6,"P986","","",N,N],[6,"N986","","",N,N],[6,"U987","","",N,N],[6,"P987","","",N,N],[6,"N987","","",N,N],[6,"U988","","",N,N],[6,"P988","","",N,N],[6,"N988","","",N,N],[6,"U989","","",N,N],[6,"P989","","",N,N],[6,"N989","","",N,N],[6,"U990","","",N,N],[6,"P990","","",N,N],[6,"N990","","",N,N],[6,"U991","","",N,N],[6,"P991","","",N,N],[6,"N991","","",N,N],[6,"U992","","",N,N],[6,"P992","","",N,N],[6,"N992","","",N,N],[6,"U993","","",N,N],[6,"P993","","",N,N],[6,"N993","","",N,N],[6,"U994","","",N,N],[6,"P994","","",N,N],[6,"N994","","",N,N],[6,"U995","","",N,N],[6,"P995","","",N,N],[6,"N995","","",N,N],[6,"U996","","",N,N],[6,"P996","","",N,N],[6,"N996","","",N,N],[6,"U997","","",N,N],[6,"P997","","",N,N],[6,"N997","","",N,N],[6,"U998","","",N,N],[6,"P998","","",N,N],[6,"N998","","",N,N],[6,"U999","","",N,N],[6,"P999","","",N,N],[6,"N999","","",N,N],[6,"U1000","","",N,N],[6,"P1000","","",N,N],[6,"N1000","","",N,N],[6,"U1001","","",N,N],[6,"P1001","","",N,N],[6,"N1001","","",N,N],[6,"U1002","","",N,N],[6,"P1002","","",N,N],[6,"N1002","","",N,N],[6,"U1003","","",N,N],[6,"P1003","","",N,N],[6,"N1003","","",N,N],[6,"U1004","","",N,N],[6,"P1004","","",N,N],[6,"N1004","","",N,N],[6,"U1005","","",N,N],[6,"P1005","","",N,N],[6,"N1005","","",N,N],[6,"U1006","","",N,N],[6,"P1006","","",N,N],[6,"N1006","","",N,N],[6,"U1007","","",N,N],[6,"P1007","","",N,N],[6,"N1007","","",N,N],[6,"U1008","","",N,N],[6,"P1008","","",N,N],[6,"N1008","","",N,N],[6,"U1009","","",N,N],[6,"P1009","","",N,N],[6,"N1009","","",N,N],[6,"U1010","","",N,N],[6,"P1010","","",N,N],[6,"N1010","","",N,N],[6,"U1011","","",N,N],[6,"P1011","","",N,N],[6,"N1011","","",N,N],[6,"U1012","","",N,N],[6,"P1012","","",N,N],[6,"N1012","","",N,N],[6,"U1013","","",N,N],[6,"P1013","","",N,N],[6,"N1013","","",N,N],[6,"U1014","","",N,N],[6,"P1014","","",N,N],[6,"N1014","","",N,N],[6,"U1015","","",N,N],[6,"P1015","","",N,N],[6,"N1015","","",N,N],[6,"U1016","","",N,N],[6,"P1016","","",N,N],[6,"N1016","","",N,N],[6,"U1017","","",N,N],[6,"P1017","","",N,N],[6,"N1017","","",N,N],[6,"U1018","","",N,N],[6,"P1018","","",N,N],[6,"N1018","","",N,N],[6,"U1019","","",N,N],[6,"P1019","","",N,N],[6,"N1019","","",N,N],[6,"U1020","","",N,N],[6,"P1020","","",N,N],[6,"N1020","","",N,N],[6,"U1021","","",N,N],[6,"P1021","","",N,N],[6,"N1021","","",N,N],[6,"U1022","","",N,N],[6,"P1022","","",N,N],[6,"N1022","","",N,N],[6,"U1023","","",N,N],[6,"P1023","","",N,N],[6,"N1023","","",N,N],[6,"U1024","","",N,N],[6,"P1024","","",N,N],[6,"N1024","","",N,N],[6,"U2048","","",N,N],[6,"P2048","","",N,N],[6,"N2048","","",N,N],[6,"U4096","","",N,N],[6,"P4096","","",N,N],[6,"N4096","","",N,N],[6,"U8192","","",N,N],[6,"P8192","","",N,N],[6,"N8192","","",N,N],[6,"U16384","","",N,N],[6,"P16384","","",N,N],[6,"N16384","","",N,N],[6,"U32768","","",N,N],[6,"P32768","","",N,N],[6,"N32768","","",N,N],[6,"U65536","","",N,N],[6,"P65536","","",N,N],[6,"N65536","","",N,N],[6,"U131072","","",N,N],[6,"P131072","","",N,N],[6,"N131072","","",N,N],[6,"U262144","","",N,N],[6,"P262144","","",N,N],[6,"N262144","","",N,N],[6,"U524288","","",N,N],[6,"P524288","","",N,N],[6,"N524288","","",N,N],[6,"U1048576","","",N,N],[6,"P1048576","","",N,N],[6,"N1048576","","",N,N],[6,"U2097152","","",N,N],[6,"P2097152","","",N,N],[6,"N2097152","","",N,N],[6,"U4194304","","",N,N],[6,"P4194304","","",N,N],[6,"N4194304","","",N,N],[6,"U8388608","","",N,N],[6,"P8388608","","",N,N],[6,"N8388608","","",N,N],[6,"U16777216","","",N,N],[6,"P16777216","","",N,N],[6,"N16777216","","",N,N],[6,"U33554432","","",N,N],[6,"P33554432","","",N,N],[6,"N33554432","","",N,N],[6,"U67108864","","",N,N],[6,"P67108864","","",N,N],[6,"N67108864","","",N,N],[6,"U134217728","","",N,N],[6,"P134217728","","",N,N],[6,"N134217728","","",N,N],[6,"U268435456","","",N,N],[6,"P268435456","","",N,N],[6,"N268435456","","",N,N],[6,"U536870912","","",N,N],[6,"P536870912","","",N,N],[6,"N536870912","","",N,N],[6,"U1073741824","","",N,N],[6,"P1073741824","","",N,N],[6,"N1073741824","","",N,N],[6,"U2147483648","","",N,N],[6,"P2147483648","","",N,N],[6,"N2147483648","","",N,N],[6,"U4294967296","","",N,N],[6,"P4294967296","","",N,N],[6,"N4294967296","","",N,N],[6,"U8589934592","","",N,N],[6,"P8589934592","","",N,N],[6,"N8589934592","","",N,N],[6,"U17179869184","","",N,N],[6,"P17179869184","","",N,N],[6,"N17179869184","","",N,N],[6,"U34359738368","","",N,N],[6,"P34359738368","","",N,N],[6,"N34359738368","","",N,N],[6,"U68719476736","","",N,N],[6,"P68719476736","","",N,N],[6,"N68719476736","","",N,N],[6,"U137438953472","","",N,N],[6,"P137438953472","","",N,N],[6,"N137438953472","","",N,N],[6,"U274877906944","","",N,N],[6,"P274877906944","","",N,N],[6,"N274877906944","","",N,N],[6,"U549755813888","","",N,N],[6,"P549755813888","","",N,N],[6,"N549755813888","","",N,N],[6,"U1099511627776","","",N,N],[6,"P1099511627776","","",N,N],[6,"N1099511627776","","",N,N],[6,"U2199023255552","","",N,N],[6,"P2199023255552","","",N,N],[6,"N2199023255552","","",N,N],[6,"U4398046511104","","",N,N],[6,"P4398046511104","","",N,N],[6,"N4398046511104","","",N,N],[6,"U8796093022208","","",N,N],[6,"P8796093022208","","",N,N],[6,"N8796093022208","","",N,N],[6,"U17592186044416","","",N,N],[6,"P17592186044416","","",N,N],[6,"N17592186044416","","",N,N],[6,"U35184372088832","","",N,N],[6,"P35184372088832","","",N,N],[6,"N35184372088832","","",N,N],[6,"U70368744177664","","",N,N],[6,"P70368744177664","","",N,N],[6,"N70368744177664","","",N,N],[6,"U140737488355328","","",N,N],[6,"P140737488355328","","",N,N],[6,"N140737488355328","","",N,N],[6,"U281474976710656","","",N,N],[6,"P281474976710656","","",N,N],[6,"N281474976710656","","",N,N],[6,"U562949953421312","","",N,N],[6,"P562949953421312","","",N,N],[6,"N562949953421312","","",N,N],[6,"U1125899906842624","","",N,N],[6,"P1125899906842624","","",N,N],[6,"N1125899906842624","","",N,N],[6,"U2251799813685248","","",N,N],[6,"P2251799813685248","","",N,N],[6,"N2251799813685248","","",N,N],[6,"U4503599627370496","","",N,N],[6,"P4503599627370496","","",N,N],[6,"N4503599627370496","","",N,N],[6,"U9007199254740992","","",N,N],[6,"P9007199254740992","","",N,N],[6,"N9007199254740992","","",N,N],[6,"U18014398509481984","","",N,N],[6,"P18014398509481984","","",N,N],[6,"N18014398509481984","","",N,N],[6,"U36028797018963968","","",N,N],[6,"P36028797018963968","","",N,N],[6,"N36028797018963968","","",N,N],[6,"U72057594037927936","","",N,N],[6,"P72057594037927936","","",N,N],[6,"N72057594037927936","","",N,N],[6,"U144115188075855872","","",N,N],[6,"P144115188075855872","","",N,N],[6,"N144115188075855872","","",N,N],[6,"U288230376151711744","","",N,N],[6,"P288230376151711744","","",N,N],[6,"N288230376151711744","","",N,N],[6,"U576460752303423488","","",N,N],[6,"P576460752303423488","","",N,N],[6,"N576460752303423488","","",N,N],[6,"U1152921504606846976","","",N,N],[6,"P1152921504606846976","","",N,N],[6,"N1152921504606846976","","",N,N],[6,"U2305843009213693952","","",N,N],[6,"P2305843009213693952","","",N,N],[6,"N2305843009213693952","","",N,N],[6,"U4611686018427387904","","",N,N],[6,"P4611686018427387904","","",N,N],[6,"N4611686018427387904","","",N,N],[6,"U9223372036854775808","","",N,N],[6,"U10000","","",N,N],[6,"P10000","","",N,N],[6,"N10000","","",N,N],[6,"U100000","","",N,N],[6,"P100000","","",N,N],[6,"N100000","","",N,N],[6,"U1000000","","",N,N],[6,"P1000000","","",N,N],[6,"N1000000","","",N,N],[6,"U10000000","","",N,N],[6,"P10000000","","",N,N],[6,"N10000000","","",N,N],[6,"U100000000","","",N,N],[6,"P100000000","","",N,N],[6,"N100000000","","",N,N],[6,"U1000000000","","",N,N],[6,"P1000000000","","",N,N],[6,"N1000000000","","",N,N],[6,"U10000000000","","",N,N],[6,"P10000000000","","",N,N],[6,"N10000000000","","",N,N],[6,"U100000000000","","",N,N],[6,"P100000000000","","",N,N],[6,"N100000000000","","",N,N],[6,"U1000000000000","","",N,N],[6,"P1000000000000","","",N,N],[6,"N1000000000000","","",N,N],[6,"U10000000000000","","",N,N],[6,"P10000000000000","","",N,N],[6,"N10000000000000","","",N,N],[6,"U100000000000000","","",N,N],[6,"P100000000000000","","",N,N],[6,"N100000000000000","","",N,N],[6,"U1000000000000000","","",N,N],[6,"P1000000000000000","","",N,N],[6,"N1000000000000000","","",N,N],[6,"U10000000000000000","","",N,N],[6,"P10000000000000000","","",N,N],[6,"N10000000000000000","","",N,N],[6,"U100000000000000000","","",N,N],[6,"P100000000000000000","","",N,N],[6,"N100000000000000000","","",N,N],[6,"U1000000000000000000","","",N,N],[6,"P1000000000000000000","","",N,N],[6,"N1000000000000000000","","",N,N],[6,"U10000000000000000000","","",N,N],[0,"bit","typenum","Type-level bits.",N,N],[3,"B0","typenum::bit","The type-level bit 0.",N,N],[3,"B1","","The type-level bit 1.",N,N],[11,"new","","Instantiates a singleton representing this bit.",0,[[],["b0"]]],[11,"new","","Instantiates a singleton representing this bit.",1,[[],["b1"]]],[0,"uint","typenum","Type-level unsigned integers.",N,N],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the most significant bit. `UTerm` by itself represents zero, which is aliased to `U0`.",N,N],[3,"UInt","","`UInt` is defined recursively, where `B` is the least significant bit and `U` is the rest of the number. Conceptually, `U` should be bound by the trait `Unsigned` and `B` should be bound by the trait `Bit`, but enforcing these bounds causes linear instead of logrithmic scaling in some places, so they are left off for now. They may be enforced in future.",N,N],[6,"GetBitOut","","",N,N],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I, B> = <N as SetBit<I, B>>::Output`.",N,N],[8,"GetBit","","",N,N],[16,"Output","","",2,N],[8,"SetBit","","A type operator that, when implemented for unsigned integer `N`, sets the bit at position `I` to `B`.",N,N],[16,"Output","","",3,N],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,[[],["uterm"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,[[],["uint"]]],[0,"int","typenum","Type-level signed integers.",N,N],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",N,N],[3,"NInt","","Type-level signed integers with negative sign.",N,N],[3,"Z0","","The type-level signed integer 0.",N,N],[11,"new","","Instantiates a singleton representing this strictly positive integer.",6,[[],["pint"]]],[11,"new","","Instantiates a singleton representing this strictly negative integer.",7,[[],["nint"]]],[11,"new","","Instantiates a singleton representing the integer 0.",8,[[],["z0"]]],[0,"marker_traits","typenum","All of the marker traits used in typenum.",N,N],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`.",N,N],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",N,N],[10,"to_ordering","","",9,[[],["ordering"]]],[8,"Bit","","The marker trait for compile time bits.",N,N],[18,"U8","","",10,N],[18,"BOOL","","",10,N],[10,"to_u8","","",10,[[],["u8"]]],[10,"to_bool","","",10,[[],["bool"]]],[8,"Unsigned","","The marker trait for compile time unsigned integers.",N,N],[18,"U8","","",11,N],[18,"U16","","",11,N],[18,"U32","","",11,N],[18,"U64","","",11,N],[18,"USIZE","","",11,N],[18,"I8","","",11,N],[18,"I16","","",11,N],[18,"I32","","",11,N],[18,"I64","","",11,N],[18,"ISIZE","","",11,N],[10,"to_u8","","",11,[[],["u8"]]],[10,"to_u16","","",11,[[],["u16"]]],[10,"to_u32","","",11,[[],["u32"]]],[10,"to_u64","","",11,[[],["u64"]]],[10,"to_usize","","",11,[[],["usize"]]],[10,"to_i8","","",11,[[],["i8"]]],[10,"to_i16","","",11,[[],["i16"]]],[10,"to_i32","","",11,[[],["i32"]]],[10,"to_i64","","",11,[[],["i64"]]],[10,"to_isize","","",11,[[],["isize"]]],[8,"Integer","","The marker trait for compile time signed integers.",N,N],[18,"I8","","",12,N],[18,"I16","","",12,N],[18,"I32","","",12,N],[18,"I64","","",12,N],[18,"ISIZE","","",12,N],[10,"to_i8","","",12,[[],["i8"]]],[10,"to_i16","","",12,[[],["i16"]]],[10,"to_i32","","",12,[[],["i32"]]],[10,"to_i64","","",12,[[],["i64"]]],[10,"to_isize","","",12,[[],["isize"]]],[8,"TypeArray","","The marker trait for type-level arrays of type-level numbers.",N,N],[8,"PowerOfTwo","","The marker trait for type-level numbers which are a power of two.",N,N],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",N,N],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators.",N,N],[16,"Output","","Should always be `Self`",13,N],[8,"Abs","","A type operator that returns the absolute value.",N,N],[16,"Output","","The absolute value.",14,N],[8,"Pow","","A type operator that provides exponentiation by repeated squaring.",N,N],[16,"Output","","The result of the exponentiation.",15,N],[10,"powi","","This function isn't used in this crate, but may be useful for others. It is implemented for primitives.",15,N],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types.",N,N],[16,"Output","","The result of the comparison. It should only ever be one of `Greater`, `Less`, or `Equal`.",16,N],[8,"Len","","A type operator that gives the length of an `Array` or the number of bits in a `UInt`.",N,N],[16,"Output","","The length as a type-level unsigned integer.",17,N],[10,"len","","This function isn't used in this crate, but may be useful for others.",17,N],[8,"PartialDiv","","Division as a partial function. This type operator performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder).",N,N],[16,"Output","","The type of the result of the division",18,N],[10,"partial_div","","Method for performing the division",18,N],[8,"Min","","A type operator that returns the minimum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the minimum of `Self` and `Rhs`",19,N],[10,"min","","Method returning the minimum",19,N],[8,"Max","","A type operator that returns the maximum of `Self` and `Rhs`.",N,N],[16,"Output","","The type of the maximum of `Self` and `Rhs`",20,N],[10,"max","","Method returning the maximum",20,N],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",21,N],[10,"is_less","","Method returning `True` or `False`.",21,N],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",22,N],[10,"is_equal","","Method returning `True` or `False`.",22,N],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",23,N],[10,"is_greater","","Method returning `True` or `False`.",23,N],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",24,N],[10,"is_less_or_equal","","Method returning `True` or `False`.",24,N],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",25,N],[10,"is_not_equal","","Method returning `True` or `False`.",25,N],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`, otherwise returns `False`.",N,N],[16,"Output","","The type representing either `True` or `False`",26,N],[10,"is_greater_or_equal","","Method returning `True` or `False`.",26,N],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their purpose is to increase the ergonomics of performing operations on the types defined here. For even more ergonomics, consider using the `op!` macro instead.",N,N],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A as BitAnd<B>>::Output`",N,N],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A as BitOr<B>>::Output`",N,N],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A as BitXor<B>>::Output`",N,N],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A as Shl<B>>::Output`",N,N],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> = <A as Shr<B>>::Output`",N,N],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as Add<B>>::Output`",N,N],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A as Sub<B>>::Output`",N,N],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A as Mul<B>>::Output`",N,N],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A as Div<B>>::Output`",N,N],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as Rem<B>>::Output`",N,N],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`: `PartialQuot<A, B> = <A as PartialDiv<B>>::Output`",N,N],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as Neg>::Output`",N,N],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as Abs>::Output`",N,N],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as Pow<B>>::Output`",N,N],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as Add<B1>>::Output`",N,N],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as Sub<B1>>::Output`",N,N],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as Mul<A>>::Output`",N,N],[6,"Cube","","Alias to make it easy to cube. `Cube<A> = <Square<A> as Mul<A>>::Output`",N,N],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> = <A as Cmp<B>>::Output`",N,N],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as Len>::Output`",N,N],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> = <A as Min<B>>::Output`",N,N],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> = <A as Max<B>>::Output`",N,N],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A as IsLess<B>>::Output`",N,N],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A as IsEqual<B>>::Output`",N,N],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> = <A as IsGreater<B>>::Output`",N,N],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`: `GrEq<A, B> = <A as IsGreaterOrEqual<B>>::Output`",N,N],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A, B> = <A as IsLessOrEqual<B>>::Output`",N,N],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A, B> = <A as IsNotEqual<B>>::Output`",N,N],[0,"array","typenum","A type-level array of type-level numbers.",N,N],[3,"ATerm","typenum::array","The terminating type for type arrays.",N,N],[3,"TArr","","`TArr` is a type that acts as an array of types. It is defined similarly to `UInt`, only its values can be more than bits, and it is designed to act as an array. So you can only add two if they have the same number of elements, for example.",N,N],[14,"op","typenum","Convenient type operations.",N,N],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!` instead.",N,N],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0 or newer.",N,N],[14,"assert_type_eq","","Asserts that two types are the same.",N,N],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",N,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"is_less","typenum::bit","",0,N],[11,"is_equal","","",0,N],[11,"is_greater","","",0,N],[11,"is_less_or_equal","","",0,N],[11,"is_not_equal","","",0,N],[11,"is_greater_or_equal","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"is_less","","",1,N],[11,"is_equal","","",1,N],[11,"is_greater","","",1,N],[11,"is_less_or_equal","","",1,N],[11,"is_not_equal","","",1,N],[11,"is_greater_or_equal","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"powi","typenum::uint","",4,N],[11,"partial_div","","",4,N],[11,"is_less","","",4,N],[11,"is_equal","","",4,N],[11,"is_greater","","",4,N],[11,"is_less_or_equal","","",4,N],[11,"is_not_equal","","",4,N],[11,"is_greater_or_equal","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"powi","","",5,N],[11,"partial_div","","",5,N],[11,"is_less","","",5,N],[11,"is_equal","","",5,N],[11,"is_greater","","",5,N],[11,"is_less_or_equal","","",5,N],[11,"is_not_equal","","",5,N],[11,"is_greater_or_equal","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"powi","typenum::int","",6,N],[11,"partial_div","","",6,N],[11,"is_less","","",6,N],[11,"is_equal","","",6,N],[11,"is_greater","","",6,N],[11,"is_less_or_equal","","",6,N],[11,"is_not_equal","","",6,N],[11,"is_greater_or_equal","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"powi","","",7,N],[11,"partial_div","","",7,N],[11,"is_less","","",7,N],[11,"is_equal","","",7,N],[11,"is_greater","","",7,N],[11,"is_less_or_equal","","",7,N],[11,"is_not_equal","","",7,N],[11,"is_greater_or_equal","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"powi","","",8,N],[11,"partial_div","","",8,N],[11,"is_less","","",8,N],[11,"is_equal","","",8,N],[11,"is_greater","","",8,N],[11,"is_less_or_equal","","",8,N],[11,"is_not_equal","","",8,N],[11,"is_greater_or_equal","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"partial_div","typenum::array","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"partial_div","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"to_ordering","typenum","",27,[[],["ordering"]]],[11,"to_ordering","","",28,[[],["ordering"]]],[11,"to_ordering","","",29,[[],["ordering"]]],[11,"to_u8","typenum::bit","",0,[[],["u8"]]],[11,"to_bool","","",0,[[],["bool"]]],[11,"to_u8","","",1,[[],["u8"]]],[11,"to_bool","","",1,[[],["bool"]]],[11,"to_u8","typenum::uint","",4,[[],["u8"]]],[11,"to_u16","","",4,[[],["u16"]]],[11,"to_u32","","",4,[[],["u32"]]],[11,"to_u64","","",4,[[],["u64"]]],[11,"to_usize","","",4,[[],["usize"]]],[11,"to_i8","","",4,[[],["i8"]]],[11,"to_i16","","",4,[[],["i16"]]],[11,"to_i32","","",4,[[],["i32"]]],[11,"to_i64","","",4,[[],["i64"]]],[11,"to_isize","","",4,[[],["isize"]]],[11,"to_u8","","",5,[[],["u8"]]],[11,"to_u16","","",5,[[],["u16"]]],[11,"to_u32","","",5,[[],["u32"]]],[11,"to_u64","","",5,[[],["u64"]]],[11,"to_usize","","",5,[[],["usize"]]],[11,"to_i8","","",5,[[],["i8"]]],[11,"to_i16","","",5,[[],["i16"]]],[11,"to_i32","","",5,[[],["i32"]]],[11,"to_i64","","",5,[[],["i64"]]],[11,"to_isize","","",5,[[],["isize"]]],[11,"to_i8","typenum::int","",8,[[],["i8"]]],[11,"to_i16","","",8,[[],["i16"]]],[11,"to_i32","","",8,[[],["i32"]]],[11,"to_i64","","",8,[[],["i64"]]],[11,"to_isize","","",8,[[],["isize"]]],[11,"to_i8","","",6,[[],["i8"]]],[11,"to_i16","","",6,[[],["i16"]]],[11,"to_i32","","",6,[[],["i32"]]],[11,"to_i64","","",6,[[],["i64"]]],[11,"to_isize","","",6,[[],["isize"]]],[11,"to_i8","","",7,[[],["i8"]]],[11,"to_i16","","",7,[[],["i16"]]],[11,"to_i32","","",7,[[],["i32"]]],[11,"to_i64","","",7,[[],["i64"]]],[11,"to_isize","","",7,[[],["isize"]]],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","","",8,N],[11,"powi","typenum","",32,N],[11,"powi","","",33,N],[11,"powi","","",33,N],[11,"powi","typenum::int","",6,N],[11,"powi","","",7,N],[11,"powi","","",6,N],[11,"powi","","",7,N],[11,"powi","","",7,N],[11,"len","typenum::uint","",4,N],[11,"len","","",5,N],[11,"len","typenum::array","",30,N],[11,"len","","",31,N],[11,"partial_div","typenum::uint","",4,N],[11,"partial_div","","",5,N],[11,"partial_div","typenum::array","",30,N],[11,"partial_div","","",31,N],[11,"min","typenum::bit","",0,[[["self"],["b0"]],["b0"]]],[11,"min","","",0,[[["self"],["b1"]],["b0"]]],[11,"min","","",1,[[["self"],["b0"]],["b0"]]],[11,"min","","",1,[[["self"],["b1"]],["b1"]]],[11,"min","typenum::uint","",4,N],[11,"min","","",5,N],[11,"min","typenum::int","",8,N],[11,"min","","",8,N],[11,"min","","",8,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"min","","",6,N],[11,"min","","",7,N],[11,"max","typenum::bit","",0,[[["self"],["b0"]],["b0"]]],[11,"max","","",0,[[["self"],["b1"]],["b1"]]],[11,"max","","",1,[[["self"],["b0"]],["b1"]]],[11,"max","","",1,[[["self"],["b1"]],["b1"]]],[11,"max","typenum::uint","",4,N],[11,"max","","",5,N],[11,"max","typenum::int","",8,N],[11,"max","","",8,N],[11,"max","","",8,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"max","","",6,N],[11,"max","","",7,N],[11,"fmt","typenum::bit","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","typenum::uint","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","typenum::int","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","typenum::array","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","typenum","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"sub","typenum::uint","",4,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",5,N],[11,"sub","","",4,N],[11,"sub","","",5,N],[11,"sub","typenum::int","",8,N],[11,"sub","","",8,N],[11,"sub","","",8,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","","",6,N],[11,"sub","","",7,N],[11,"sub","typenum::array","",30,N],[11,"sub","","",31,N],[11,"eq","typenum::bit","",0,[[["self"],["b0"]],["bool"]]],[11,"eq","","",1,[[["self"],["b1"]],["bool"]]],[11,"eq","typenum::uint","",4,[[["self"],["uterm"]],["bool"]]],[11,"eq","","",5,[[["self"],["uint"]],["bool"]]],[11,"ne","","",5,[[["self"],["uint"]],["bool"]]],[11,"eq","typenum::int","",6,[[["self"],["pint"]],["bool"]]],[11,"ne","","",6,[[["self"],["pint"]],["bool"]]],[11,"eq","","",7,[[["self"],["nint"]],["bool"]]],[11,"ne","","",7,[[["self"],["nint"]],["bool"]]],[11,"eq","","",8,[[["self"],["z0"]],["bool"]]],[11,"eq","typenum::array","",30,[[["self"],["aterm"]],["bool"]]],[11,"eq","","",31,[[["self"],["tarr"]],["bool"]]],[11,"ne","","",31,[[["self"],["tarr"]],["bool"]]],[11,"eq","typenum","",27,[[["self"],["greater"]],["bool"]]],[11,"eq","","",28,[[["self"],["less"]],["bool"]]],[11,"eq","","",29,[[["self"],["equal"]],["bool"]]],[11,"cmp","typenum::bit","",0,[[["self"],["b0"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["b1"]],["ordering"]]],[11,"cmp","typenum::uint","",4,[[["self"],["uterm"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["uint"]],["ordering"]]],[11,"cmp","typenum::int","",6,[[["self"],["pint"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["nint"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["z0"]],["ordering"]]],[11,"cmp","typenum::array","",30,[[["self"],["aterm"]],["ordering"]]],[11,"cmp","","",31,[[["self"],["tarr"]],["ordering"]]],[11,"cmp","typenum","",27,[[["self"],["greater"]],["ordering"]]],[11,"cmp","","",28,[[["self"],["less"]],["ordering"]]],[11,"cmp","","",29,[[["self"],["equal"]],["ordering"]]],[11,"partial_cmp","typenum::bit","",0,[[["self"],["b0"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["b1"]],["option",["ordering"]]]],[11,"partial_cmp","typenum::uint","",4,[[["self"],["uterm"]],["option",["ordering"]]]],[11,"partial_cmp","","",5,[[["self"],["uint"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["uint"]],["bool"]]],[11,"le","","",5,[[["self"],["uint"]],["bool"]]],[11,"gt","","",5,[[["self"],["uint"]],["bool"]]],[11,"ge","","",5,[[["self"],["uint"]],["bool"]]],[11,"partial_cmp","typenum::int","",6,[[["self"],["pint"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["pint"]],["bool"]]],[11,"le","","",6,[[["self"],["pint"]],["bool"]]],[11,"gt","","",6,[[["self"],["pint"]],["bool"]]],[11,"ge","","",6,[[["self"],["pint"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["nint"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["nint"]],["bool"]]],[11,"le","","",7,[[["self"],["nint"]],["bool"]]],[11,"gt","","",7,[[["self"],["nint"]],["bool"]]],[11,"ge","","",7,[[["self"],["nint"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["z0"]],["option",["ordering"]]]],[11,"partial_cmp","typenum::array","",30,[[["self"],["aterm"]],["option",["ordering"]]]],[11,"partial_cmp","","",31,[[["self"],["tarr"]],["option",["ordering"]]]],[11,"lt","","",31,[[["self"],["tarr"]],["bool"]]],[11,"le","","",31,[[["self"],["tarr"]],["bool"]]],[11,"gt","","",31,[[["self"],["tarr"]],["bool"]]],[11,"ge","","",31,[[["self"],["tarr"]],["bool"]]],[11,"partial_cmp","typenum","",27,[[["self"],["greater"]],["option",["ordering"]]]],[11,"partial_cmp","","",28,[[["self"],["less"]],["option",["ordering"]]]],[11,"partial_cmp","","",29,[[["self"],["equal"]],["option",["ordering"]]]],[11,"add","typenum::uint","",4,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",4,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","","",5,N],[11,"add","typenum::int","",8,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","","",6,N],[11,"add","","",7,N],[11,"add","typenum::array","",30,N],[11,"add","","",31,N],[11,"mul","typenum::uint","",5,N],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"mul","","",4,N],[11,"mul","","",5,N],[11,"mul","","",5,N],[11,"mul","typenum::int","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","typenum::array","",30,N],[11,"mul","","",31,N],[11,"mul","typenum::int","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"mul","","",8,N],[11,"mul","","",6,N],[11,"mul","","",7,N],[11,"div","typenum::uint","",4,N],[11,"div","","",5,N],[11,"div","typenum::int","",8,N],[11,"div","","",6,N],[11,"div","","",6,N],[11,"div","","",7,N],[11,"div","","",7,N],[11,"div","typenum::array","",30,N],[11,"div","","",31,N],[11,"rem","typenum::uint","",4,N],[11,"rem","","",5,N],[11,"rem","typenum::int","",8,N],[11,"rem","","",6,N],[11,"rem","","",6,N],[11,"rem","","",7,N],[11,"rem","","",7,N],[11,"rem","typenum::array","",30,N],[11,"rem","","",31,N],[11,"neg","typenum::int","",8,N],[11,"neg","","",6,N],[11,"neg","","",7,N],[11,"neg","typenum::array","",30,N],[11,"neg","","",31,N],[11,"not","typenum::bit","",0,N],[11,"not","","",1,N],[11,"bitand","","",0,N],[11,"bitand","","",1,N],[11,"bitand","","",1,N],[11,"bitand","typenum::uint","",4,N],[11,"bitand","","",5,N],[11,"bitor","typenum::bit","",0,N],[11,"bitor","","",0,N],[11,"bitor","","",1,N],[11,"bitor","typenum::uint","",4,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitor","","",5,N],[11,"bitxor","typenum::bit","",0,N],[11,"bitxor","","",1,N],[11,"bitxor","","",0,N],[11,"bitxor","","",1,N],[11,"bitxor","typenum::uint","",4,N],[11,"bitxor","","",5,N],[11,"shl","","",4,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",5,N],[11,"shl","","",4,N],[11,"shl","","",5,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",4,N],[11,"shr","","",4,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"shr","","",5,N],[11,"hash","typenum::bit","",0,N],[11,"hash","","",1,N],[11,"hash","typenum::uint","",4,N],[11,"hash","","",5,N],[11,"hash","typenum::int","",6,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","typenum::array","",30,N],[11,"hash","","",31,N],[11,"hash","typenum","",27,N],[11,"hash","","",28,N],[11,"hash","","",29,N],[11,"clone","typenum::bit","",0,[[["self"]],["b0"]]],[11,"clone","","",1,[[["self"]],["b1"]]],[11,"clone","typenum::uint","",4,[[["self"]],["uterm"]]],[11,"clone","","",5,[[["self"]],["uint"]]],[11,"clone","typenum::int","",6,[[["self"]],["pint"]]],[11,"clone","","",7,[[["self"]],["nint"]]],[11,"clone","","",8,[[["self"]],["z0"]]],[11,"clone","typenum::array","",30,[[["self"]],["aterm"]]],[11,"clone","","",31,[[["self"]],["tarr"]]],[11,"clone","typenum","",27,[[["self"]],["greater"]]],[11,"clone","","",28,[[["self"]],["less"]]],[11,"clone","","",29,[[["self"]],["equal"]]],[11,"default","typenum::bit","",0,[[],["b0"]]],[11,"default","","",1,[[],["b1"]]],[11,"default","typenum::uint","",4,[[],["uterm"]]],[11,"default","","",5,[[],["uint"]]],[11,"default","typenum::int","",6,[[],["pint"]]],[11,"default","","",7,[[],["nint"]]],[11,"default","","",8,[[],["z0"]]],[11,"default","typenum","",27,[[],["greater"]]],[11,"default","","",28,[[],["less"]]],[11,"default","","",29,[[],["equal"]]]],"paths":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[3,"Greater"],[3,"Less"],[3,"Equal"],[3,"ATerm"],[3,"TArr"],[6,"P1"],[6,"N1"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unwrap_to"]={"doc":"unwrap_to A simple utility macro that allows you to easily unwrap a ADT(Abstract Data Type) enum into a reference of its inner type. ``` #[macro_use] extern crate unwrap_to;","items":[[14,"unwrap_to","unwrap_to","",N,N]],"paths":[]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"]={"doc":"Generate and parse UUIDs.","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",N,N],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",N,N],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",N,N],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",N,N],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",N,N],[13,"Mac","","Version 1: MAC address",0,N],[13,"Dce","","Version 2: DCE Security",0,N],[13,"Md5","","Version 3: MD5 hash",0,N],[13,"Random","","Version 4: Random",0,N],[13,"Sha1","","Version 5: SHA-1 hash",0,N],[4,"UuidVariant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",1,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,N],[13,"Future","","Reserved for future expansion",1,N],[4,"ParseError","","Error details for string parsing failures.",N,N],[13,"InvalidLength","","",2,N],[13,"InvalidCharacter","","",2,N],[13,"InvalidGroups","","",2,N],[13,"InvalidGroupLength","","",2,N],[0,"prelude","","The [`uuid`] prelude.",N,N],[3,"Uuid","uuid::prelude","A Universally Unique Identifier (UUID).",N,N],[4,"UuidVariant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",1,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,N],[13,"Future","","Reserved for future expansion",1,N],[6,"UuidBytes","uuid","A 128-bit (16 byte) buffer containing the ID.",N,N],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",N,N],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",N,N],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",N,N],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",N,N],[11,"nil","uuid::prelude","The 'nil UUID'.",3,[[],["uuid"]]],[11,"new","","Creates a new `Uuid`.",3,[[["uuidversion"]],["option",["uuid"]]]],[11,"new_v4","","Creates a random `Uuid`.",3,[[],["uuid"]]],[11,"from_fields","","Creates a `Uuid` from four field values.",3,N],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,N],[11,"from_uuid_bytes","","Creates a `Uuid` using the supplied bytes.",3,[[["uuidbytes"]],["uuid"]]],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",3,N],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,[[["self"]],["option",["uuidvariant"]]]],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the `Uuid`.",3,[[["self"]],["option",["uuidversion"]]]],[11,"as_fields","","Returns the four field values of the UUID.",3,N],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",3,N],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,[[["self"]],["simple"]]],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,[[["self"]],["hyphenated"]]],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,[[["self"]],["urn"]]],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",3,[[["self"]],["option"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,[[["str"]],["result",["uuid","parseerror"]]]],[11,"is_nil","","Tests if the UUID is nil",3,[[["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","uuid","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","uuid::prelude","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","uuid","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["uuidversion"]]],[11,"clone","uuid::prelude","",1,[[["self"]],["uuidvariant"]]],[11,"clone","","",3,[[["self"]],["uuid"]]],[11,"clone","uuid","",2,[[["self"]],["parseerror"]]],[11,"partial_cmp","uuid::prelude","",3,[[["self"],["uuid"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["uuid"]],["bool"]]],[11,"le","","",3,[[["self"],["uuid"]],["bool"]]],[11,"gt","","",3,[[["self"],["uuid"]],["bool"]]],[11,"ge","","",3,[[["self"],["uuid"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","uuid","",0,[[["self"],["uuidversion"]],["bool"]]],[11,"eq","uuid::prelude","",1,[[["self"],["uuidvariant"]],["bool"]]],[11,"eq","","",3,[[["self"],["uuid"]],["bool"]]],[11,"ne","","",3,[[["self"],["uuid"]],["bool"]]],[11,"eq","uuid","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"cmp","uuid::prelude","",3,[[["self"],["uuid"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::prelude","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","uuid::prelude","",3,N],[11,"from_str","","",3,[[["str"]],["result",["uuid","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::prelude","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["wabt"]={"doc":"Bindings to the wabt library.","items":[[3,"Error","wabt","A structure to represent errors coming out from wabt.",N,N],[3,"WabtBuf","","Buffer returned by wabt.",N,N],[3,"ReadBinaryOptions","","Options for reading read binary.",N,N],[3,"Module","","WebAssembly module.",N,N],[3,"Wat2Wasm","","A builder for translate wasm text source to wasm binary format.",N,N],[3,"Wasm2Wat","","A builder for converting wasm binary to wasm text format.",N,N],[5,"wat2wasm","","Translate wasm text source to wasm binary format.",N,[[["s"]],["result",["vec","error"]]]],[5,"wasm2wat","","Disassemble wasm binary to wasm text format.",N,[[["s"]],["result",["string","error"]]]],[0,"script","","Module for parsing [WebAssembly script format] (a.k.a. wast).",N,N],[3,"ModuleBinary","wabt::script","This is a handle to get the binary representation of the module.",N,N],[3,"Command","","Command in the script.",N,N],[12,"line","","Line number the command is defined on.",0,N],[12,"kind","","Kind of the command.",0,N],[3,"ScriptParser","","Parser which allows to parse WebAssembly script text format.",N,N],[4,"Error","","Error that can happen when parsing spec.",N,N],[13,"IoError","","IO error happened during parsing or preparing to parse.",1,N],[13,"WabtError","","WABT reported an error while converting wast to json.",1,N],[13,"Other","","Other error represented by String.",1,N],[13,"WithLineInfo","","Not a different kind of an error but just a wrapper for a error which we have a line number information.",1,N],[12,"line","wabt::script::Error","Line number of the script on which just error happen.",1,N],[12,"error","","Box with actual error.",1,N],[4,"Value","wabt::script","Wasm value",N,N],[13,"I32","","32-bit signed or unsigned integer.",2,N],[13,"I64","","64-bit signed or unsigned integer.",2,N],[13,"F32","","32-bit floating point number.",2,N],[13,"F64","","64-bit floating point number.",2,N],[4,"Action","","Description of action that should be performed on a wasm module.",N,N],[13,"Invoke","","Invoke a specified function.",3,N],[12,"module","wabt::script::Action","Name of the module. If `None`, last defined module should be used.",3,N],[12,"field","","Field name on which action should be performed.",3,N],[12,"args","","Arguments that should be passed to the invoked function.",3,N],[13,"Get","wabt::script","Read the specified global variable.",3,N],[12,"module","wabt::script::Action","Name of the module. If `None`, last defined module should be used.",3,N],[12,"field","","Field name on which action should be performed.",3,N],[4,"CommandKind","wabt::script","Script's command.",N,N],[13,"Module","","Define, validate and instantiate a module.",4,N],[12,"module","wabt::script::CommandKind","Wasm module binary to define, validate and instantiate.",4,N],[12,"name","","If the `name` is specified, the module should be registered under this name.",4,N],[13,"AssertReturn","wabt::script","Assert that specified action should yield specified results.",4,N],[12,"action","wabt::script::CommandKind","Action to perform.",4,N],[12,"expected","","Values that expected to be yielded by the action.",4,N],[13,"AssertReturnCanonicalNan","wabt::script","Assert that specified action should yield NaN in canonical form.",4,N],[12,"action","wabt::script::CommandKind","Action to perform.",4,N],[13,"AssertReturnArithmeticNan","wabt::script","Assert that specified action should yield NaN with 1 in MSB of fraction field.",4,N],[12,"action","wabt::script::CommandKind","Action to perform.",4,N],[13,"AssertTrap","wabt::script","Assert that performing specified action must yield in a trap.",4,N],[12,"action","wabt::script::CommandKind","Action to perform.",4,N],[12,"message","","Expected failure should be with this message.",4,N],[13,"AssertInvalid","wabt::script","Assert that specified module is invalid.",4,N],[12,"module","wabt::script::CommandKind","Module that should be invalid.",4,N],[12,"message","","Expected failure should be with this message.",4,N],[13,"AssertMalformed","wabt::script","Assert that specified module cannot be decoded.",4,N],[12,"module","wabt::script::CommandKind","Module that should be malformed.",4,N],[12,"message","","Expected failure should be with this message.",4,N],[13,"AssertUninstantiable","wabt::script","Assert that specified module is uninstantiable.",4,N],[12,"module","wabt::script::CommandKind","Module that should be uninstantiable.",4,N],[12,"message","","Expected failure should be with this message.",4,N],[13,"AssertExhaustion","wabt::script","Assert that specified action should yield in resource exhaustion.",4,N],[12,"action","wabt::script::CommandKind","Action to perform.",4,N],[13,"AssertUnlinkable","wabt::script","Assert that specified module fails to link.",4,N],[12,"module","wabt::script::CommandKind","Module that should be unlinkable.",4,N],[12,"message","","Expected failure should be with this message.",4,N],[13,"Register","wabt::script","Register a module under specified name (`as_name`).",4,N],[12,"name","wabt::script::CommandKind","Name of the module, which should be registered under different name.",4,N],[12,"as_name","","New name of the specified module.",4,N],[13,"PerformAction","wabt::script","Perform the specified [action].",4,N],[8,"FromBits","","Bitwise conversion from T",N,N],[10,"from_bits","","Convert `other` to `Self`, preserving bitwise representation",5,[[["t"]],["self"]]],[11,"into_vec","","Convert this object into wasm module binary representation.",6,[[["self"]],["vec",["u8"]]]],[11,"from_source_and_name","","Create `ScriptParser` from the script in specified file.",7,N],[11,"from_str","","Create `ScriptParser` from the script source.",7,[[["str"]],["result",["error"]]]],[11,"next","","Returns the next [`Command`] from the script.",7,[[["self"]],["result",["option","error"]]]],[11,"parse_wat","wabt","Parse source in WebAssembly text format.",8,[[["str"],["s"]],["result",["module","error"]]]],[11,"read_binary","","Read WebAssembly binary.",8,[[["s"],["readbinaryoptions"]],["result",["module","error"]]]],[11,"validate","","Validate the module.",8,[[["self"]],["result",["error"]]]],[11,"new","","Create `Wat2Wasm` with default configuration.",9,[[],["wat2wasm"]]],[11,"canonicalize_lebs","","Write canonicalized LEB128 for var ints.",9,[[["self"],["bool"]],["wat2wasm"]]],[11,"relocatable","","Create a relocatable wasm binary",9,[[["self"],["bool"]],["wat2wasm"]]],[11,"write_debug_names","","Write debug names to the generated binary file",9,[[["self"],["bool"]],["wat2wasm"]]],[11,"validate","","Check for validity of module before writing.",9,[[["self"],["bool"]],["wat2wasm"]]],[11,"convert","","Perform conversion.",9,[[["self"],["s"]],["result",["wabtbuf","error"]]]],[11,"new","","Create `Wasm2Wat` with default configuration.",10,[[],["wasm2wat"]]],[11,"read_debug_names","","Read debug names in the binary file.",10,[[["self"],["bool"]],["wasm2wat"]]],[11,"fold_exprs","","Write folded expressions where possible.",10,[[["self"],["bool"]],["wasm2wat"]]],[11,"inline_export","","Write all exports inline.",10,[[["self"],["bool"]],["wasm2wat"]]],[11,"convert","","Perform conversion.",10,[[["self"],["s"]],["result",["wabtbuf","error"]]]],[11,"from_bits","","",11,[[["t"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"equivalent","","",11,[[["self"],["k"]],["bool"]]],[11,"from_bits","","",12,[[["t"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from_bits","","",13,[[["t"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from_bits","","",8,[[["t"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from_bits","","",9,[[["t"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from_bits","","",10,[[["t"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from_bits","wabt::script","",6,[[["t"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"equivalent","","",6,[[["self"],["k"]],["bool"]]],[11,"from_bits","","",0,[[["t"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from_bits","","",7,[[["t"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from_bits","","",1,[[["t"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from_bits","","",2,[[["t"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from_bits","","",3,[[["t"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from_bits","","",4,[[["t"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"clone","","",2,[[["self"]],["value"]]],[11,"clone","","",3,[[["self"]],["action"]]],[11,"clone","","",6,[[["self"]],["modulebinary"]]],[11,"clone","","",4,[[["self"]],["commandkind"]]],[11,"clone","","",0,[[["self"]],["command"]]],[11,"from","","",1,[[["wabterror"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","wabt","",11,[[["nulerror"]],["error"]]],[11,"drop","","",12,[[["self"]]]],[11,"drop","","",8,[[["self"]]]],[11,"as_ref","","",12,N],[11,"partial_cmp","wabt::script","",2,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["value"]],["bool"]]],[11,"le","","",2,[[["self"],["value"]],["bool"]]],[11,"gt","","",2,[[["self"],["value"]],["bool"]]],[11,"ge","","",2,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["action"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["action"]],["bool"]]],[11,"le","","",3,[[["self"],["action"]],["bool"]]],[11,"gt","","",3,[[["self"],["action"]],["bool"]]],[11,"ge","","",3,[[["self"],["action"]],["bool"]]],[11,"default","wabt","",13,[[],["readbinaryoptions"]]],[11,"eq","wabt::script","",2,[[["self"],["value"]],["bool"]]],[11,"ne","","",2,[[["self"],["value"]],["bool"]]],[11,"eq","","",3,[[["self"],["action"]],["bool"]]],[11,"ne","","",3,[[["self"],["action"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["commandkind"]],["bool"]]],[11,"ne","","",4,[[["self"],["commandkind"]],["bool"]]],[11,"eq","","",0,[[["self"],["command"]],["bool"]]],[11,"ne","","",0,[[["self"],["command"]],["bool"]]],[11,"eq","wabt","",11,[[["self"],["error"]],["bool"]]],[11,"ne","","",11,[[["self"],["error"]],["bool"]]],[11,"fmt","wabt::script","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","wabt","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","wabt::script","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","wabt","",11,[[["self"],["formatter"]],["result"]]],[11,"description","wabt::script","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"description","wabt","",11,[[["self"]],["str"]]]],"paths":[[3,"Command"],[4,"Error"],[4,"Value"],[4,"Action"],[4,"CommandKind"],[8,"FromBits"],[3,"ModuleBinary"],[3,"ScriptParser"],[3,"Module"],[3,"Wat2Wasm"],[3,"Wasm2Wat"],[3,"Error"],[3,"WabtBuf"],[3,"ReadBinaryOptions"]]};
searchIndex["wabt_sys"]={"doc":"","items":[[4,"WastLexer","wabt_sys","",N,N],[4,"ErrorHandlerBuffer","","",N,N],[4,"WabtParseWatResult","","",N,N],[4,"WabtParseWastResult","","",N,N],[4,"WasmModule","","",N,N],[4,"WabtWriteModuleResult","","",N,N],[4,"WabtReadBinaryResult","","",N,N],[4,"OutputBuffer","","",N,N],[4,"Script","","",N,N],[4,"WabtWriteScriptResult","","",N,N],[4,"Result","","",N,N],[13,"Ok","","",0,N],[13,"Error","","",0,N],[5,"wabt_new_wast_buffer_lexer","","",N,N],[5,"wabt_destroy_wast_lexer","","",N,N],[5,"wabt_new_text_error_handler_buffer","","",N,N],[5,"wabt_new_binary_error_handler_buffer","","",N,N],[5,"wabt_error_handler_buffer_get_data","","",N,N],[5,"wabt_error_handler_buffer_get_size","","",N,N],[5,"wabt_destroy_error_handler_buffer","","",N,N],[5,"wabt_parse_wat","","",N,N],[5,"wabt_parse_wast","","",N,N],[5,"wabt_parse_wat_result_get_result","","",N,N],[5,"wabt_parse_wat_result_release_module","","",N,N],[5,"wabt_destroy_parse_wat_result","","",N,N],[5,"wabt_resolve_names_module","","",N,N],[5,"wabt_apply_names_module","","",N,N],[5,"wabt_generate_names_module","","",N,N],[5,"wabt_validate_module","","",N,N],[5,"wabt_destroy_module","","",N,N],[5,"wabt_write_binary_module","","",N,N],[5,"wabt_write_module_result_get_result","","",N,N],[5,"wabt_write_module_result_release_output_buffer","","",N,N],[5,"wabt_destroy_write_module_result","","",N,N],[5,"wabt_output_buffer_get_data","","",N,N],[5,"wabt_output_buffer_get_size","","",N,N],[5,"wabt_destroy_output_buffer","","",N,N],[5,"wabt_resolve_names_script","","",N,N],[5,"wabt_validate_script","","",N,N],[5,"wabt_write_binary_spec_script","","",N,N],[5,"wabt_read_binary","","",N,N],[5,"wabt_parse_wast_result_get_result","","",N,N],[5,"wabt_parse_wast_result_release_module","","",N,N],[5,"wabt_destroy_parse_wast_result","","",N,N],[5,"wabt_read_binary_result_get_result","","",N,N],[5,"wabt_read_binary_result_release_module","","",N,N],[5,"wabt_destroy_read_binary_result","","",N,N],[5,"wabt_write_text_module","","",N,N],[5,"wabt_write_script_result_get_result","","",N,N],[5,"wabt_write_script_result_release_json_output_buffer","","",N,N],[5,"wabt_write_script_result_release_log_output_buffer","","",N,N],[5,"wabt_write_script_result_get_module_count","","",N,N],[5,"wabt_write_script_result_get_module_filename","","",N,N],[5,"wabt_write_script_result_release_module_output_buffer","","",N,N],[5,"wabt_destroy_write_script_result","","",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"eq","","",0,[[["self"],["result"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Result"],[4,"WastLexer"],[4,"ErrorHandlerBuffer"],[4,"WabtParseWatResult"],[4,"WabtParseWastResult"],[4,"WasmModule"],[4,"WabtWriteModuleResult"],[4,"WabtReadBinaryResult"],[4,"OutputBuffer"],[4,"Script"],[4,"WabtWriteScriptResult"]]};
searchIndex["walkdir"]={"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",N,N],[3,"IntoIter","","An iterator for recursively descending into a directory.",N,N],[3,"DirEntry","","A directory entry.",N,N],[3,"FilterEntry","","A recursive directory iterator that skips entries.",N,N],[3,"Error","","An error produced by recursively walking a directory.",N,N],[6,"Result","","A result type for walkdir operations.",N,N],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",N,N],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",0,[[["self"]],["u64"]]],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",1,[[["p"]],["self"]]],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",1,[[["self"],["bool"]],["self"]]],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"sort_by","","Set a function for sorting directory entries.",1,[[["self"],["f"]],["self"]]],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",1,[[["self"],["bool"]],["self"]]],[11,"same_file_system","","Do not cross file system boundaries.",1,[[["self"],["bool"]],["self"]]],[11,"skip_current_dir","","Skips the current directory.",2,[[["self"]]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",2,[[["self"],["p"]],["filterentry"]]],[11,"path","","The full path that this entry represents.",3,[[["self"]],["path"]]],[11,"into_path","","The full path that this entry represents.",3,[[["self"]],["pathbuf"]]],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",3,[[["self"]],["bool"]]],[11,"metadata","","Return the metadata for the file that this entry points to.",3,[[["self"]],["result",["metadata"]]]],[11,"file_type","","Return the file type for the file that this entry points to.",3,[[["self"]],["filetype"]]],[11,"file_name","","Return the file name of this entry.",3,[[["self"]],["osstr"]]],[11,"depth","","Returns the depth at which this entry was created relative to the root.",3,[[["self"]],["usize"]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",4,[[["self"],["p"]],["filterentry"]]],[11,"skip_current_dir","","Skips the current directory.",4,[[["self"]]]],[11,"path","","Returns the path associated with this error if one exists.",5,[[["self"]],["option",["path"]]]],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,[[["self"]],["option",["path"]]]],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,[[["self"]],["usize"]]],[11,"io_error","","Inspect the original [`io::Error`] if there is one.",5,[[["self"]],["option",["error"]]]],[11,"into_io_error","","Similar to [`io_error`] except consumes self to convert to the original [`io::Error`] if one exists.",5,[[["self"]],["option",["error"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",3,[[["self"]],["u64"]]],[11,"clone","","",3,[[["self"]],["direntry"]]],[11,"next","","Advances the iterator and returns the next value.",2,[[["self"]],["option",["result"]]]],[11,"next","","Advances the iterator and returns the next value.",4,[[["self"]],["option",["result"]]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]]],"paths":[[8,"DirEntryExt"],[3,"WalkDir"],[3,"IntoIter"],[3,"DirEntry"],[3,"FilterEntry"],[3,"Error"]]};
searchIndex["wasmi"]={"doc":"wasmi","items":[[3,"Trap","wasmi","Error type which can thrown by wasm code or by host environment.",N,N],[3,"MemoryInstance","","Runtime representation of a linear memory (or `memory` for short).",N,N],[3,"MemoryRef","","Reference to a memory (See [`MemoryInstance`] for details).",N,N],[3,"TableInstance","","Runtime representation of a table.",N,N],[3,"TableRef","","Reference to a table (See [`TableInstance`] for details).",N,N],[3,"NopExternals","","Implementation of [`Externals`] that just traps on [`invoke_index`].",N,N],[3,"RuntimeArgs","","Wrapper around slice of [`RuntimeValue`] for using it as an argument list conveniently.",N,N],[3,"ImportsBuilder","","Convenience builder of [`ImportResolver`].",N,N],[3,"ModuleInstance","","A module instance is the runtime representation of a [module][`Module`].",N,N],[3,"ModuleRef","","Reference to a [`ModuleInstance`].",N,N],[3,"NotStartedModuleRef","","Mostly instantiated [`ModuleRef`].",N,N],[3,"GlobalInstance","","Runtime representation of a global variable (or `global` for short).",N,N],[3,"GlobalRef","","Reference to a global variable (See [`GlobalInstance`] for details).",N,N],[3,"FuncInstance","","Runtime representation of a function.",N,N],[3,"FuncRef","","Reference to a function (See [`FuncInstance`] for details).",N,N],[3,"Signature","","Signature of a [function].",N,N],[3,"GlobalDescriptor","","Description of a global variable.",N,N],[3,"TableDescriptor","","Description of a table.",N,N],[3,"MemoryDescriptor","","Description of a linear memory.",N,N],[3,"Module","","Deserialized module prepared for instantiation.",N,N],[4,"TrapKind","","Error type which can thrown by wasm code or by host environment.",N,N],[13,"Unreachable","","Wasm code executed `unreachable` opcode.",0,N],[13,"MemoryAccessOutOfBounds","","Attempt to load or store at the address which lies outside of bounds of the memory.",0,N],[13,"TableAccessOutOfBounds","","Attempt to access table element at index which lies outside of bounds.",0,N],[13,"ElemUninitialized","","Attempt to access table element which is uninitialized (i.e. `None`).",0,N],[13,"DivisionByZero","","Attempt to divide by zero.",0,N],[13,"InvalidConversionToInt","","Attempt to make a conversion to an int failed.",0,N],[13,"StackOverflow","","Stack overflow.",0,N],[13,"UnexpectedSignature","","Attempt to invoke a function with mismatching signature.",0,N],[13,"Host","","Error specified by the host.",0,N],[4,"Error","","Internal interpreter error.",N,N],[13,"Validation","","Module validation error. Might occur only at load time.",1,N],[13,"Instantiation","","Error while instantiating a module. Might occur when provided with incorrect exports (i.e. linkage failure).",1,N],[13,"Function","","Function-level error.",1,N],[13,"Table","","Table-level error.",1,N],[13,"Memory","","Memory-level error.",1,N],[13,"Global","","Global-level error.",1,N],[13,"Value","","Value-level error.",1,N],[13,"Trap","","Trap.",1,N],[13,"Host","","Custom embedder error.",1,N],[4,"RuntimeValue","","Runtime representation of a value.",N,N],[13,"I32","","Value of 32-bit signed or unsigned integer.",2,N],[13,"I64","","Value of 64-bit signed or unsigned integer.",2,N],[13,"F32","","Value of 32-bit IEEE 754-2008 floating point number.",2,N],[13,"F64","","Value of 64-bit IEEE 754-2008 floating point number.",2,N],[4,"ExternVal","","An external value is the runtime representation of an entity that can be imported or exported.",N,N],[13,"Func","","[Function][`FuncInstance`].",3,N],[13,"Table","","[Table][`TableInstance`].",3,N],[13,"Memory","","[Memory][`MemoryInstance`].",3,N],[13,"Global","","[Global][`GlobalInstance`].",3,N],[4,"ValueType","","Type of a value.",N,N],[13,"I32","","32-bit signed or unsigned integer.",4,N],[13,"I64","","64-bit signed or unsigned integer.",4,N],[13,"F32","","32-bit IEEE 754-2008 floating point number.",4,N],[13,"F64","","64-bit IEEE 754-2008 floating point number.",4,N],[11,"alloc","","Allocate a memory instance.",5,[[["pages"],["option",["pages"]]],["result",["memoryref","error"]]]],[11,"initial","","Returns number of pages this `MemoryInstance` was created with.",5,[[["self"]],["pages"]]],[11,"maximum","","Returns maximum amount of pages this `MemoryInstance` can grow to.",5,[[["self"]],["option",["pages"]]]],[11,"current_size","","Returns current linear memory size.",5,[[["self"]],["pages"]]],[11,"get","","Copy data from memory at given offset.",5,[[["self"],["u32"],["usize"]],["result",["vec","error"]]]],[11,"get_into","","Copy data from given offset in the memory into `target` slice.",5,N],[11,"set","","Copy data in the memory at given offset.",5,N],[11,"grow","","Increases the size of the linear memory by given number of pages. Returns previous memory size if succeeds.",5,[[["self"],["pages"]],["result",["pages","error"]]]],[11,"copy","","Copy contents of one memory region to another.",5,[[["self"],["usize"],["usize"],["usize"]],["result",["error"]]]],[11,"copy_nonoverlapping","","Copy contents of one memory region to another (non-overlapping version).",5,[[["self"],["usize"],["usize"],["usize"]],["result",["error"]]]],[11,"clear","","Fill the memory region with the specified value.",5,[[["self"],["usize"],["u8"],["usize"]],["result",["error"]]]],[11,"zero","","Fill the specified memory region with zeroes.",5,[[["self"],["usize"],["usize"]],["result",["error"]]]],[11,"with_direct_access","","Provides direct access to the underlying memory buffer.",5,[[["self"],["f"]],["r"]]],[11,"with_direct_access_mut","","Provides direct mutable access to the underlying memory buffer.",5,[[["self"],["f"]],["r"]]],[11,"as_func","","Get underlying function reference if this `ExternVal` contains a function, or `None` if it is some other kind.",3,[[["self"]],["option",["funcref"]]]],[11,"as_table","","Get underlying table reference if this `ExternVal` contains a table, or `None` if it is some other kind.",3,[[["self"]],["option",["tableref"]]]],[11,"as_memory","","Get underlying memory reference if this `ExternVal` contains a memory, or `None` if it is some other kind.",3,[[["self"]],["option",["memoryref"]]]],[11,"as_global","","Get underlying global variable reference if this `ExternVal` contains a global, or `None` if it is some other kind.",3,[[["self"]],["option",["globalref"]]]],[11,"with_externvals","","Instantiate a module with given [external values][ExternVal] as imports.",6,[[["module"],["i"]],["result",["notstartedmoduleref","error"]]]],[11,"new","","Instantiate a [module][`Module`].",6,[[["module"],["i"]],["result",["notstartedmoduleref","error"]]]],[11,"invoke_export","","Invoke exported function by a name.",6,N],[11,"export_by_name","","Find export by a name.",6,[[["self"],["str"]],["option",["externval"]]]],[11,"not_started_instance","","Returns not fully initialized instance.",7,[[["self"]],["moduleref"]]],[11,"run_start","","Executes `start` function (if any) and returns fully instantiated module.",7,[[["self"],["e"]],["result",["moduleref","trap"]]]],[11,"assert_no_start","","Returns fully instantiated module without running `start` function.",7,[[["self"]],["moduleref"]]],[11,"alloc","","Allocate a table instance.",8,[[["u32"],["option",["u32"]]],["result",["tableref","error"]]]],[11,"initial_size","","Returns size this table was created with.",8,[[["self"]],["u32"]]],[11,"maximum_size","","Returns maximum size `TableInstance` can grow to.",8,[[["self"]],["option",["u32"]]]],[11,"current_size","","Returns current size of the table.",8,[[["self"]],["u32"]]],[11,"grow","","Increases the size of the table by given number of elements.",8,[[["self"],["u32"]],["result",["error"]]]],[11,"get","","Get the specific value in the table",8,[[["self"],["u32"]],["result",["option","error"]]]],[11,"set","","Set the table element to the specified function.",8,[[["self"],["u32"],["option",["funcref"]]],["result",["error"]]]],[11,"default","","Creates new default value of given type.",2,[[["valuetype"]],["self"]]],[11,"decode_f32","","Creates new value by interpreting passed u32 as f32.",2,[[["u32"]],["self"]]],[11,"decode_f64","","Creates new value by interpreting passed u64 as f64.",2,[[["u64"]],["self"]]],[11,"value_type","","Get variable type for this value.",2,[[["self"]],["valuetype"]]],[11,"try_into","","Returns `T` if this particular [`RuntimeValue`] contains appropriate type.",2,[[["self"]],["option"]]],[11,"nth_checked","","Extract argument by index `idx`.",9,[[["self"],["usize"]],["result",["trap"]]]],[11,"nth_value_checked","","Extract argument as a [`RuntimeValue`] by index `idx`.",9,[[["self"],["usize"]],["result",["runtimevalue","trap"]]]],[11,"nth","","Extract argument by index `idx`.",9,[[["self"],["usize"]],["t"]]],[11,"len","","Total number of arguments",9,[[["self"]],["usize"]]],[11,"new","","Create an empty `ImportsBuilder`.",10,[[],["importsbuilder"]]],[11,"with_resolver","","Register an resolver by a name.",10,[[["self"],["n"],["moduleimportresolver"]],["self"]]],[11,"push_resolver","","Register an resolver by a name.",10,[[["self"],["n"],["moduleimportresolver"]]]],[11,"alloc","","Allocate a global variable instance.",11,[[["runtimevalue"],["bool"]],["globalref"]]],[11,"set","","Change the value of this global variable.",11,[[["self"],["runtimevalue"]],["result",["error"]]]],[11,"get","","Get the value of this global variable.",11,[[["self"]],["runtimevalue"]]],[11,"is_mutable","","Returns if this global variable is mutable.",11,[[["self"]],["bool"]]],[11,"value_type","","Returns value type of this global variable.",11,[[["self"]],["valuetype"]]],[11,"alloc_host","","Allocate a function instance for a host function.",12,[[["signature"],["usize"]],["funcref"]]],[11,"signature","","Returns [signature] of this function instance.",12,[[["self"]],["signature"]]],[11,"invoke","","Invoke this function.",12,N],[11,"new","","Creates new signature with givens parameter types and optional return type.",13,[[["c"],["option",["valuetype"]]],["signature"]]],[11,"params","","Returns parameter types of this signature.",13,N],[11,"return_type","","Returns return type of this signature.",13,[[["self"]],["option",["valuetype"]]]],[11,"value_type","","Returns [`ValueType`] of the requested global.",14,[[["self"]],["valuetype"]]],[11,"is_mutable","","Returns whether the requested global mutable.",14,[[["self"]],["bool"]]],[11,"initial","","Returns initial size of the requested table.",15,[[["self"]],["u32"]]],[11,"maximum","","Returns maximum size of the requested table.",15,[[["self"]],["option",["u32"]]]],[11,"initial","","Returns initial size (in pages) of the requested memory.",16,[[["self"]],["u32"]]],[11,"maximum","","Returns maximum size (in pages) of the requested memory.",16,[[["self"]],["option",["u32"]]]],[0,"memory_units","","WebAssembly-specific sizes and units.",N,N],[3,"Words","wasmi::memory_units","Memory size specified in `wasm32` words.",N,N],[12,"0","","",17,N],[3,"Pages","","Memory size specified in WebAssembly [memory pages][memory page].",N,N],[12,"0","","",18,N],[3,"Bytes","","Memory size specified in bytes.",N,N],[12,"0","","",19,N],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",N,N],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",20,[[],["bytes"]]],[8,"RoundUpTo","","A trait defining round up conversion between various memory units.",N,N],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space occupied by `self`.",21,[[["self"]],["t"]]],[5,"size_of","","Returns the size of a type in [`Bytes`].",N,[[],["bytes"]]],[17,"LINEAR_MEMORY_PAGE_SIZE","wasmi","Size of a page of [linear memory][`MemoryInstance`] - 64KiB.",N,N],[8,"FromRuntimeValue","","Trait for creating value from a [`RuntimeValue`].",N,N],[10,"from_runtime_value","","Create a value of type `Self` from a given [`RuntimeValue`].",22,[[["runtimevalue"]],["option"]]],[8,"Externals","","Trait that allows to implement host functions.",N,N],[10,"invoke_index","","Perform invoke of a host function by specified `index`.",23,[[["self"],["usize"],["runtimeargs"]],["result",["option","trap"]]]],[8,"HostError","","Trait that allows the host to return custom error.",N,N],[8,"ModuleImportResolver","","Version of [`ImportResolver`] specialized for a single module.",N,N],[11,"resolve_func","","Resolve a function.",24,[[["self"],["str"],["signature"]],["result",["funcref","error"]]]],[11,"resolve_global","","Resolve a global variable.",24,[[["self"],["str"],["globaldescriptor"]],["result",["globalref","error"]]]],[11,"resolve_memory","","Resolve a memory.",24,[[["self"],["str"],["memorydescriptor"]],["result",["memoryref","error"]]]],[11,"resolve_table","","Resolve a table.",24,[[["self"],["str"],["tabledescriptor"]],["result",["tableref","error"]]]],[8,"ImportResolver","","Resolver of a module's dependencies.",N,N],[10,"resolve_func","","Resolve a function.",25,[[["self"],["str"],["str"],["signature"]],["result",["funcref","error"]]]],[10,"resolve_global","","Resolve a global variable.",25,[[["self"],["str"],["str"],["globaldescriptor"]],["result",["globalref","error"]]]],[10,"resolve_memory","","Resolve a memory.",25,[[["self"],["str"],["str"],["memorydescriptor"]],["result",["memoryref","error"]]]],[10,"resolve_table","","Resolve a table.",25,[[["self"],["str"],["str"],["tabledescriptor"]],["result",["tableref","error"]]]],[11,"new","","Create new trap.",26,[[["trapkind"]],["trap"]]],[11,"kind","","Returns kind of this trap.",26,[[["self"]],["trapkind"]]],[11,"as_host_error","","Returns [`HostError`] if this `Error` represents some host error.",1,[[["self"]],["option",["hosterror"]]]],[11,"from_parity_wasm_module","","Create `Module` from `parity_wasm::elements::Module`.",27,[[["module"]],["result",["module","error"]]]],[11,"deny_floating_point","","Fail if the module contains any floating-point operations",27,[[["self"]],["result",["error"]]]],[11,"from_buffer","","Create `Module` from a given buffer.",27,[[["b"]],["result",["module","error"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","wasmi::memory_units","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"round_up_to","","",17,[[["self"]],["words"]]],[11,"round_up_to","","",17,[[["self"]],["pages"]]],[11,"round_up_to","","",17,[[["self"]],["bytes"]]],[11,"round_up_to","","",17,[[["self"]],["pages"]]],[11,"round_up_to","","",17,[[["self"]],["words"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"round_up_to","","",18,[[["self"]],["words"]]],[11,"round_up_to","","",18,[[["self"]],["pages"]]],[11,"round_up_to","","",18,[[["self"]],["bytes"]]],[11,"round_up_to","","",18,[[["self"]],["pages"]]],[11,"round_up_to","","",18,[[["self"]],["words"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"round_up_to","","",19,[[["self"]],["words"]]],[11,"round_up_to","","",19,[[["self"]],["pages"]]],[11,"round_up_to","","",19,[[["self"]],["bytes"]]],[11,"round_up_to","","",19,[[["self"]],["pages"]]],[11,"round_up_to","","",19,[[["self"]],["words"]]],[11,"clone","","",19,[[["self"]],["bytes"]]],[11,"clone","","",18,[[["self"]],["pages"]]],[11,"clone","","",17,[[["self"]],["words"]]],[11,"add","","",17,[[["self"],["t"]],["words"]]],[11,"add","","",19,[[["self"],["t"]],["bytes"]]],[11,"add","","",18,[[["self"],["t"]],["pages"]]],[11,"eq","","",18,[[["self"],["pages"]],["bool"]]],[11,"ne","","",18,[[["self"],["pages"]],["bool"]]],[11,"eq","","",19,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",19,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",17,[[["self"],["words"]],["bool"]]],[11,"ne","","",17,[[["self"],["words"]],["bool"]]],[11,"div","","",19,[[["self"],["t"]],["bytes"]]],[11,"div","","",17,[[["self"],["t"]],["words"]]],[11,"div","","",18,[[["self"],["t"]],["pages"]]],[11,"from","","",19,[[["words"]],["bytes"]]],[11,"from","","",19,[[["pages"]],["bytes"]]],[11,"from","","",19,[[["pages"]],["bytes"]]],[11,"from","","",19,[[["words"]],["bytes"]]],[11,"mul","","",19,[[["self"],["t"]],["bytes"]]],[11,"mul","","",17,[[["self"],["t"]],["words"]]],[11,"mul","","",18,[[["self"],["t"]],["pages"]]],[11,"byte_size","","",17,[[],["bytes"]]],[11,"byte_size","","",18,[[],["bytes"]]],[11,"byte_size","","",19,[[],["bytes"]]],[11,"partial_cmp","","",17,[[["self"],["words"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["words"]],["bool"]]],[11,"le","","",17,[[["self"],["words"]],["bool"]]],[11,"gt","","",17,[[["self"],["words"]],["bool"]]],[11,"ge","","",17,[[["self"],["words"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["pages"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["pages"]],["bool"]]],[11,"le","","",18,[[["self"],["pages"]],["bool"]]],[11,"gt","","",18,[[["self"],["pages"]],["bool"]]],[11,"ge","","",18,[[["self"],["pages"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["bytes"]],["bool"]]],[11,"le","","",19,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",19,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",19,[[["self"],["bytes"]],["bool"]]],[11,"sub","","",18,[[["self"],["t"]],["pages"]]],[11,"sub","","",19,[[["self"],["t"]],["bytes"]]],[11,"sub","","",17,[[["self"],["t"]],["words"]]],[11,"cmp","","",18,[[["self"],["pages"]],["ordering"]]],[11,"cmp","","",17,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",19,[[["self"],["bytes"]],["ordering"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"invoke_index","wasmi","",30,[[["self"],["usize"],["runtimeargs"]],["result",["option","trap"]]]],[11,"resolve_func","","",10,[[["self"],["str"],["str"],["signature"]],["result",["funcref","error"]]]],[11,"resolve_global","","",10,[[["self"],["str"],["str"],["globaldescriptor"]],["result",["globalref","error"]]]],[11,"resolve_memory","","",10,[[["self"],["str"],["str"],["memorydescriptor"]],["result",["memoryref","error"]]]],[11,"resolve_table","","",10,[[["self"],["str"],["str"],["tabledescriptor"]],["result",["tableref","error"]]]],[11,"resolve_func","","",31,[[["self"],["str"],["signature"]],["result",["funcref","error"]]]],[11,"resolve_global","","",31,[[["self"],["str"],["globaldescriptor"]],["result",["globalref","error"]]]],[11,"resolve_memory","","",31,[[["self"],["str"],["memorydescriptor"]],["result",["memoryref","error"]]]],[11,"resolve_table","","",31,[[["self"],["str"],["tabledescriptor"]],["result",["tableref","error"]]]],[11,"clone","","",28,[[["self"]],["memoryref"]]],[11,"clone","","",31,[[["self"]],["moduleref"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",29,[[["self"]],["tableref"]]],[11,"clone","","",2,[[["self"]],["runtimevalue"]]],[11,"clone","","",32,[[["self"]],["globalref"]]],[11,"clone","","",33,[[["self"]],["funcref"]]],[11,"clone","","",13,[[["self"]],["signature"]]],[11,"clone","","",4,[[["self"]],["valuetype"]]],[11,"from","","",1,[[["u"]],["self"]]],[11,"from","","",26,[[["u"]],["self"]]],[11,"from","","",1,[[["trap"]],["error"]]],[11,"from","","",26,[[["trapkind"]],["trap"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["f32"]],["self"]]],[11,"from","","",2,[[["f64"]],["self"]]],[11,"from","","",9,N],[11,"into","","",1,[[["self"]],["string"]]],[11,"as_ref","","",9,N],[11,"default","","",10,[[],["self"]]],[11,"eq","","",2,[[["self"],["runtimevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["runtimevalue"]],["bool"]]],[11,"eq","","",13,[[["self"],["signature"]],["bool"]]],[11,"ne","","",13,[[["self"],["signature"]],["bool"]]],[11,"eq","","",4,[[["self"],["valuetype"]],["bool"]]],[11,"deref","","",28,[[["self"]],["memoryinstance"]]],[11,"deref","","",31,[[["self"]],["moduleinstance"]]],[11,"deref","","",29,[[["self"]],["tableinstance"]]],[11,"deref","","",32,[[["self"]],["globalinstance"]]],[11,"deref","","",33,[[["self"]],["funcinstance"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",26,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"downcast_ref","","Attempt to downcast this `HostError` to a concrete type by reference.",34,[[["self"]],["option"]]],[11,"downcast_mut","","Attempt to downcast this `HostError` to a concrete type by mutable reference.",34,[[["self"]],["option"]]],[11,"resolve_func","","Resolve a function.",24,[[["self"],["str"],["signature"]],["result",["funcref","error"]]]],[11,"resolve_global","","Resolve a global variable.",24,[[["self"],["str"],["globaldescriptor"]],["result",["globalref","error"]]]],[11,"resolve_memory","","Resolve a memory.",24,[[["self"],["str"],["memorydescriptor"]],["result",["memoryref","error"]]]],[11,"resolve_table","","Resolve a table.",24,[[["self"],["str"],["tabledescriptor"]],["result",["tableref","error"]]]]],"paths":[[4,"TrapKind"],[4,"Error"],[4,"RuntimeValue"],[4,"ExternVal"],[4,"ValueType"],[3,"MemoryInstance"],[3,"ModuleInstance"],[3,"NotStartedModuleRef"],[3,"TableInstance"],[3,"RuntimeArgs"],[3,"ImportsBuilder"],[3,"GlobalInstance"],[3,"FuncInstance"],[3,"Signature"],[3,"GlobalDescriptor"],[3,"TableDescriptor"],[3,"MemoryDescriptor"],[3,"Words"],[3,"Pages"],[3,"Bytes"],[8,"ByteSize"],[8,"RoundUpTo"],[8,"FromRuntimeValue"],[8,"Externals"],[8,"ModuleImportResolver"],[8,"ImportResolver"],[3,"Trap"],[3,"Module"],[3,"MemoryRef"],[3,"TableRef"],[3,"NopExternals"],[3,"ModuleRef"],[3,"GlobalRef"],[3,"FuncRef"],[8,"HostError"]]};
searchIndex["winapi"]={"doc":"","items":[],"paths":[]};
searchIndex["yaml_rust"]={"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"emitter","yaml_rust","",N,N],[3,"YamlEmitter","yaml_rust::emitter","",N,N],[4,"EmitError","","",N,N],[13,"FmtError","","",0,N],[13,"BadHashmapKey","","",0,N],[6,"EmitResult","","",N,N],[11,"new","","",1,[[["write"]],["yamlemitter"]]],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",1,[[["self"],["bool"]]]],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",1,[[["self"]],["bool"]]],[11,"dump","","",1,[[["self"],["yaml"]],["emitresult"]]],[0,"parser","yaml_rust","",N,N],[3,"Parser","yaml_rust::parser","",N,N],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",N,N],[13,"Nothing","","Reserved for internal use",2,N],[13,"StreamStart","","",2,N],[13,"StreamEnd","","",2,N],[13,"DocumentStart","","",2,N],[13,"DocumentEnd","","",2,N],[13,"Alias","","Refer to an anchor ID",2,N],[13,"Scalar","","Value, style, anchor_id, tag",2,N],[13,"SequenceStart","","Anchor ID",2,N],[13,"SequenceEnd","","",2,N],[13,"MappingStart","","Anchor ID",2,N],[13,"MappingEnd","","",2,N],[6,"ParseResult","","",N,N],[8,"EventReceiver","","",N,N],[10,"on_event","","",3,[[["self"],["event"]]]],[8,"MarkedEventReceiver","","",N,N],[10,"on_event","","",4,[[["self"],["event"],["marker"]]]],[11,"new","","",5,[[["t"]],["parser"]]],[11,"peek","","",5,[[["self"]],["result",["scanerror"]]]],[11,"next","","",5,[[["self"]],["parseresult"]]],[11,"load","","",5,[[["self"],["r"],["bool"]],["result",["scanerror"]]]],[0,"scanner","yaml_rust","",N,N],[3,"Marker","yaml_rust::scanner","",N,N],[3,"ScanError","","",N,N],[3,"Token","","",N,N],[12,"0","","",6,N],[12,"1","","",6,N],[3,"Scanner","","",N,N],[4,"TEncoding","","",N,N],[13,"Utf8","","",7,N],[4,"TScalarStyle","","",N,N],[13,"Any","","",8,N],[13,"Plain","","",8,N],[13,"SingleQuoted","","",8,N],[13,"DoubleQuoted","","",8,N],[13,"Literal","","",8,N],[13,"Foled","","",8,N],[4,"TokenType","","",N,N],[13,"NoToken","","",9,N],[13,"StreamStart","","",9,N],[13,"StreamEnd","","",9,N],[13,"VersionDirective","","major, minor",9,N],[13,"TagDirective","","handle, prefix",9,N],[13,"DocumentStart","","",9,N],[13,"DocumentEnd","","",9,N],[13,"BlockSequenceStart","","",9,N],[13,"BlockMappingStart","","",9,N],[13,"BlockEnd","","",9,N],[13,"FlowSequenceStart","","",9,N],[13,"FlowSequenceEnd","","",9,N],[13,"FlowMappingStart","","",9,N],[13,"FlowMappingEnd","","",9,N],[13,"BlockEntry","","",9,N],[13,"FlowEntry","","",9,N],[13,"Key","","",9,N],[13,"Value","","",9,N],[13,"Alias","","",9,N],[13,"Anchor","","",9,N],[13,"Tag","","handle, suffix",9,N],[13,"Scalar","","",9,N],[6,"ScanResult","","",N,N],[11,"index","","",10,[[["self"]],["usize"]]],[11,"line","","",10,[[["self"]],["usize"]]],[11,"col","","",10,[[["self"]],["usize"]]],[11,"new","","",11,[[["marker"],["str"]],["scanerror"]]],[11,"marker","","",11,[[["self"]],["marker"]]],[11,"new","","Creates the YAML tokenizer.",12,[[["t"]],["scanner"]]],[11,"get_error","","",12,[[["self"]],["option",["scanerror"]]]],[11,"stream_started","","",12,[[["self"]],["bool"]]],[11,"stream_ended","","",12,[[["self"]],["bool"]]],[11,"mark","","",12,[[["self"]],["marker"]]],[11,"fetch_next_token","","",12,[[["self"]],["scanresult"]]],[11,"next_token","","",12,[[["self"]],["result",["option","scanerror"]]]],[11,"fetch_more_tokens","","",12,[[["self"]],["scanresult"]]],[0,"yaml","yaml_rust","",N,N],[3,"YamlLoader","yaml_rust::yaml","",N,N],[3,"YamlIter","","",N,N],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",N,N],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",13,N],[13,"Integer","","YAML int is stored as i64.",13,N],[13,"String","","YAML scalar.",13,N],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",13,N],[13,"Array","","YAML array, can be accessed as a `Vec`.",13,N],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",13,N],[13,"Alias","","Alias, not fully supported yet.",13,N],[13,"Null","","YAML null, e.g. `null` or `~`.",13,N],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",13,N],[6,"Array","","",N,N],[6,"Hash","","",N,N],[11,"load_from_str","","",14,[[["str"]],["result",["vec","scanerror"]]]],[11,"as_bool","","",13,[[["self"]],["option",["bool"]]]],[11,"as_i64","","",13,[[["self"]],["option",["i64"]]]],[11,"as_str","","",13,[[["self"]],["option",["str"]]]],[11,"as_hash","","",13,[[["self"]],["option",["hash"]]]],[11,"as_vec","","",13,[[["self"]],["option",["array"]]]],[11,"into_bool","","",13,[[["self"]],["option",["bool"]]]],[11,"into_i64","","",13,[[["self"]],["option",["i64"]]]],[11,"into_string","","",13,[[["self"]],["option",["string"]]]],[11,"into_hash","","",13,[[["self"]],["option",["hash"]]]],[11,"into_vec","","",13,[[["self"]],["option",["array"]]]],[11,"is_null","","",13,[[["self"]],["bool"]]],[11,"is_badvalue","","",13,[[["self"]],["bool"]]],[11,"is_array","","",13,[[["self"]],["bool"]]],[11,"as_f64","","",13,[[["self"]],["option",["f64"]]]],[11,"into_f64","","",13,[[["self"]],["option",["f64"]]]],[11,"from_str","","",13,[[["str"]],["yaml"]]],[11,"from","yaml_rust::emitter","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","yaml_rust::parser","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","yaml_rust::scanner","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"on_event","yaml_rust::yaml","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"on_event","","",14,[[["self"],["event"],["marker"]]]],[11,"clone","yaml_rust::emitter","",0,[[["self"]],["emiterror"]]],[11,"clone","yaml_rust::parser","",2,[[["self"]],["event"]]],[11,"clone","yaml_rust::scanner","",7,[[["self"]],["tencoding"]]],[11,"clone","","",8,[[["self"]],["tscalarstyle"]]],[11,"clone","","",10,[[["self"]],["marker"]]],[11,"clone","","",11,[[["self"]],["scanerror"]]],[11,"clone","","",9,[[["self"]],["tokentype"]]],[11,"clone","","",6,[[["self"]],["token"]]],[11,"clone","yaml_rust::yaml","",13,[[["self"]],["yaml"]]],[11,"from","yaml_rust::emitter","",0,[[["error"]],["self"]]],[11,"next","yaml_rust::scanner","",12,[[["self"]],["option",["token"]]]],[11,"next","yaml_rust::yaml","",15,[[["self"]],["option",["yaml"]]]],[11,"partial_cmp","","",13,[[["self"],["yaml"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["yaml"]],["bool"]]],[11,"le","","",13,[[["self"],["yaml"]],["bool"]]],[11,"gt","","",13,[[["self"],["yaml"]],["bool"]]],[11,"ge","","",13,[[["self"],["yaml"]],["bool"]]],[11,"eq","yaml_rust::parser","",2,[[["self"],["event"]],["bool"]]],[11,"ne","","",2,[[["self"],["event"]],["bool"]]],[11,"eq","yaml_rust::scanner","",7,[[["self"],["tencoding"]],["bool"]]],[11,"eq","","",8,[[["self"],["tscalarstyle"]],["bool"]]],[11,"eq","","",10,[[["self"],["marker"]],["bool"]]],[11,"ne","","",10,[[["self"],["marker"]],["bool"]]],[11,"eq","","",11,[[["self"],["scanerror"]],["bool"]]],[11,"ne","","",11,[[["self"],["scanerror"]],["bool"]]],[11,"eq","","",9,[[["self"],["tokentype"]],["bool"]]],[11,"ne","","",9,[[["self"],["tokentype"]],["bool"]]],[11,"eq","","",6,[[["self"],["token"]],["bool"]]],[11,"ne","","",6,[[["self"],["token"]],["bool"]]],[11,"eq","yaml_rust::yaml","",13,[[["self"],["yaml"]],["bool"]]],[11,"ne","","",13,[[["self"],["yaml"]],["bool"]]],[11,"into_iter","","",13,N],[11,"cmp","","",13,[[["self"],["yaml"]],["ordering"]]],[11,"fmt","yaml_rust::emitter","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","yaml_rust::scanner","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","yaml_rust::emitter","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","yaml_rust::parser","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","yaml_rust::scanner","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","yaml_rust::yaml","",13,[[["self"],["formatter"]],["result"]]],[11,"index","","",13,[[["self"],["str"]],["yaml"]]],[11,"index","","",13,[[["self"],["usize"]],["yaml"]]],[11,"hash","","",13,N],[11,"description","yaml_rust::emitter","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","yaml_rust::scanner","",11,[[["self"]],["str"]]],[11,"cause","","",11,[[["self"]],["option",["error"]]]]],"paths":[[4,"EmitError"],[3,"YamlEmitter"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"]]};
searchIndex["zmq"]={"doc":"Module: zmq","items":[[3,"Message","zmq","Holds a 0MQ message.",N,N],[3,"Context","","Handle for a 0MQ context, used to create sockets.",N,N],[3,"Socket","","A socket, the central object in 0MQ.",N,N],[3,"PollItem","","Represents a handle that can be `poll()`ed.",N,N],[3,"CurveKeyPair","","A CURVE key pair generated by 0MQ.",N,N],[12,"public_key","","",0,N],[12,"secret_key","","",0,N],[4,"SocketType","","Socket types",N,N],[13,"PAIR","","",1,N],[13,"PUB","","",1,N],[13,"SUB","","",1,N],[13,"REQ","","",1,N],[13,"REP","","",1,N],[13,"DEALER","","",1,N],[13,"ROUTER","","",1,N],[13,"PULL","","",1,N],[13,"PUSH","","",1,N],[13,"XPUB","","",1,N],[13,"XSUB","","",1,N],[13,"STREAM","","",1,N],[4,"Constants","","Raw 0MQ socket option constants.",N,N],[13,"ZMQ_AFFINITY","","",2,N],[13,"ZMQ_IDENTITY","","",2,N],[13,"ZMQ_SUBSCRIBE","","",2,N],[13,"ZMQ_UNSUBSCRIBE","","",2,N],[13,"ZMQ_RATE","","",2,N],[13,"ZMQ_RECOVERY_IVL","","",2,N],[13,"ZMQ_SNDBUF","","",2,N],[13,"ZMQ_RCVBUF","","",2,N],[13,"ZMQ_RCVMORE","","",2,N],[13,"ZMQ_FD","","",2,N],[13,"ZMQ_EVENTS","","",2,N],[13,"ZMQ_TYPE","","",2,N],[13,"ZMQ_LINGER","","",2,N],[13,"ZMQ_RECONNECT_IVL","","",2,N],[13,"ZMQ_BACKLOG","","",2,N],[13,"ZMQ_RECONNECT_IVL_MAX","","",2,N],[13,"ZMQ_MAXMSGSIZE","","",2,N],[13,"ZMQ_SNDHWM","","",2,N],[13,"ZMQ_RCVHWM","","",2,N],[13,"ZMQ_MULTICAST_HOPS","","",2,N],[13,"ZMQ_RCVTIMEO","","",2,N],[13,"ZMQ_SNDTIMEO","","",2,N],[13,"ZMQ_LAST_ENDPOINT","","",2,N],[13,"ZMQ_ROUTER_MANDATORY","","",2,N],[13,"ZMQ_TCP_KEEPALIVE","","",2,N],[13,"ZMQ_TCP_KEEPALIVE_CNT","","",2,N],[13,"ZMQ_TCP_KEEPALIVE_IDLE","","",2,N],[13,"ZMQ_TCP_KEEPALIVE_INTVL","","",2,N],[13,"ZMQ_IMMEDIATE","","",2,N],[13,"ZMQ_XPUB_VERBOSE","","",2,N],[13,"ZMQ_ROUTER_RAW","","",2,N],[13,"ZMQ_IPV6","","",2,N],[13,"ZMQ_MECHANISM","","",2,N],[13,"ZMQ_PLAIN_SERVER","","",2,N],[13,"ZMQ_PLAIN_USERNAME","","",2,N],[13,"ZMQ_PLAIN_PASSWORD","","",2,N],[13,"ZMQ_CURVE_SERVER","","",2,N],[13,"ZMQ_CURVE_PUBLICKEY","","",2,N],[13,"ZMQ_CURVE_SECRETKEY","","",2,N],[13,"ZMQ_CURVE_SERVERKEY","","",2,N],[13,"ZMQ_PROBE_ROUTER","","",2,N],[13,"ZMQ_REQ_CORRELATE","","",2,N],[13,"ZMQ_REQ_RELAXED","","",2,N],[13,"ZMQ_CONFLATE","","",2,N],[13,"ZMQ_ZAP_DOMAIN","","",2,N],[13,"ZMQ_ROUTER_HANDOVER","","",2,N],[13,"ZMQ_TOS","","",2,N],[13,"ZMQ_CONNECT_RID","","",2,N],[13,"ZMQ_GSSAPI_SERVER","","",2,N],[13,"ZMQ_GSSAPI_PRINCIPAL","","",2,N],[13,"ZMQ_GSSAPI_SERVICE_PRINCIPAL","","",2,N],[13,"ZMQ_GSSAPI_PLAINTEXT","","",2,N],[13,"ZMQ_HANDSHAKE_IVL","","",2,N],[13,"ZMQ_SOCKS_PROXY","","",2,N],[13,"ZMQ_XPUB_NODROP","","",2,N],[13,"ZMQ_MSG_MORE","","",2,N],[13,"ZMQ_MSG_SHARED","","",2,N],[13,"ZMQ_MSG_MASK","","",2,N],[4,"Mechanism","","Security Mechanism",N,N],[13,"ZMQ_NULL","","",3,N],[13,"ZMQ_PLAIN","","",3,N],[13,"ZMQ_CURVE","","",3,N],[13,"ZMQ_GSSAPI","","",3,N],[4,"Error","","An error returned by a 0MQ API function.",N,N],[13,"EACCES","","",4,N],[13,"EADDRINUSE","","",4,N],[13,"EAGAIN","","",4,N],[13,"EBUSY","","",4,N],[13,"ECONNREFUSED","","",4,N],[13,"EFAULT","","",4,N],[13,"EINTR","","",4,N],[13,"EHOSTUNREACH","","",4,N],[13,"EINPROGRESS","","",4,N],[13,"EINVAL","","",4,N],[13,"EMFILE","","",4,N],[13,"EMSGSIZE","","",4,N],[13,"ENAMETOOLONG","","",4,N],[13,"ENODEV","","",4,N],[13,"ENOENT","","",4,N],[13,"ENOMEM","","",4,N],[13,"ENOTCONN","","",4,N],[13,"ENOTSOCK","","",4,N],[13,"EPROTO","","",4,N],[13,"EPROTONOSUPPORT","","",4,N],[13,"ENOTSUP","","",4,N],[13,"ENOBUFS","","",4,N],[13,"ENETDOWN","","",4,N],[13,"EADDRNOTAVAIL","","",4,N],[13,"EFSM","","",4,N],[13,"ENOCOMPATPROTO","","",4,N],[13,"ETERM","","",4,N],[13,"EMTHREAD","","",4,N],[4,"EncodeError","","Errors that can occur while encoding Z85.",N,N],[13,"BadLength","","",5,N],[13,"FromUtf8Error","","",5,N],[4,"DecodeError","","Errors that can occur while decoding Z85.",N,N],[13,"BadLength","","The input string slice's length was not a multiple of 5.",6,N],[13,"NulError","","The input string slice had embedded NUL bytes.",6,N],[5,"version","","Return the current zeromq version, as `(major, minor, patch)`.",N,N],[5,"poll","","Poll for events on multiple sockets.",N,N],[5,"proxy","","Start a 0MQ proxy in the current thread.",N,[[["socket"],["socket"]],["result"]]],[5,"proxy_with_capture","","Start a 0MQ proxy in the current thread, with a capture socket.",N,[[["socket"],["socket"],["socket"]],["result"]]],[5,"has","","Return true if the used 0MQ library has the given capability.",N,[[["str"]],["option",["bool"]]]],[5,"z85_encode","","Encode a binary key as Z85 printable text.",N,N],[5,"z85_decode","","Decode a binary key from Z85-encoded text.",N,[[["str"]],["result",["vec","decodeerror"]]]],[11,"new","","Create an empty `Message`.",7,[[],["result",["message"]]]],[11,"with_capacity_unallocated","","Create a `Message` preallocated with `len` uninitialized bytes.",7,[[["usize"]],["result",["message"]]]],[11,"with_capacity","","Create a `Message` with space for `len` bytes that are initialized to 0.",7,[[["usize"]],["result",["message"]]]],[11,"from_slice","","Create a `Message` from a `&[u8]`. This will copy `data` into the message.",7,N],[11,"as_str","","Return the message content as a string slice if it is valid UTF-8.",7,[[["self"]],["option",["str"]]]],[11,"get_more","","Return the `ZMQ_MORE` flag, which indicates if more parts of a multipart message will follow.",7,[[["self"]],["bool"]]],[11,"gets","","Query a message metadata property.",7,[[["self"],["str"]],["option",["str"]]]],[6,"Result","","`zmq`-specific Result type.",N,N],[6,"PollEvents","","Type representing pending socket events.",N,N],[7,"DONTWAIT","","Flag for socket `send` methods that specifies non-blocking mode.",N,N],[7,"SNDMORE","","Flag for socket `send` methods that specifies that more frames of a multipart message will follow.",N,N],[7,"POLLIN","","For `poll()`, specifies to signal when a message/some data can be read from a socket.",N,N],[7,"POLLOUT","","For `poll()`, specifies to signal when a message/some data can be written to a socket.",N,N],[7,"POLLERR","","For `poll()`, specifies to signal when an error condition is present on a socket.  This only applies to non-0MQ sockets.",N,N],[11,"to_raw","","",2,[[["self"]],["i32"]]],[11,"from_raw","","",2,[[["i32"]],["option",["constants"]]]],[11,"to_raw","","",4,[[["self"]],["i32"]]],[11,"from_raw","","",4,[[["i32"]],["error"]]],[11,"new","","Create a new reference-counted context handle.",8,[[],["context"]]],[11,"socket","","Create a new socket.",8,[[["self"],["sockettype"]],["result",["socket"]]]],[11,"destroy","","Try to destroy the context. This is different than the destructor; the destructor will loop when zmq_ctx_destroy returns EINTR.",8,[[["self"]],["result"]]],[11,"into_raw","","Consume the Socket and return the raw socket pointer.",9,N],[11,"from_raw","","Create a Socket from a raw socket pointer.",9,N],[11,"as_mut_ptr","","Return the inner pointer to this Socket.",9,N],[11,"bind","","Accept connections on a socket.",9,[[["self"],["str"]],["result"]]],[11,"connect","","Connect a socket.",9,[[["self"],["str"]],["result"]]],[11,"disconnect","","Disconnect a previously connected socket",9,[[["self"],["str"]],["result"]]],[11,"send","","Send a `&[u8]` message.",9,N],[11,"send_msg","","Send a `Message` message.",9,[[["self"],["message"],["i32"]],["result"]]],[11,"send_str","","",9,[[["self"],["str"],["i32"]],["result"]]],[11,"send_multipart","","",9,N],[11,"recv","","Receive a message into a `Message`. The length passed to zmq_msg_recv is the length of the buffer.",9,[[["self"],["message"],["i32"]],["result"]]],[11,"recv_into","","Receive bytes into a slice. The length passed to `zmq_recv` is the length of the slice. The return value is the number of bytes in the message, which may be larger than the length of the slice, indicating truncation.",9,N],[11,"recv_msg","","Receive a message into a fresh `Message`.",9,[[["self"],["i32"]],["result",["message"]]]],[11,"recv_bytes","","Receive a message as a byte vector.",9,[[["self"],["i32"]],["result",["vec"]]]],[11,"recv_string","","Receive a `String` from the socket.",9,[[["self"],["i32"]],["result",["result"]]]],[11,"recv_multipart","","Receive a multipart message from the socket.",9,[[["self"],["i32"]],["result",["vec"]]]],[11,"is_ipv6","","Accessor for the `ZMQ_IPV6` option.",9,[[["self"]],["result",["bool"]]]],[11,"set_ipv6","","Accessor for the `ZMQ_IPV6` option.",9,[[["self"],["bool"]],["result"]]],[11,"is_immediate","","Accessor for the `ZMQ_IMMEDIATE` option.",9,[[["self"]],["result",["bool"]]]],[11,"set_immediate","","Accessor for the `ZMQ_IMMEDIATE` option.",9,[[["self"],["bool"]],["result"]]],[11,"is_plain_server","","Accessor for the `ZMQ_PLAIN_SERVER` option.",9,[[["self"]],["result",["bool"]]]],[11,"set_plain_server","","Accessor for the `ZMQ_PLAIN_SERVER` option.",9,[[["self"],["bool"]],["result"]]],[11,"is_conflate","","Accessor for the `ZMQ_CONFLATE` option.",9,[[["self"]],["result",["bool"]]]],[11,"set_conflate","","Accessor for the `ZMQ_CONFLATE` option.",9,[[["self"],["bool"]],["result"]]],[11,"is_probe_router","","",9,[[["self"]],["result",["bool"]]]],[11,"set_probe_router","","",9,[[["self"],["bool"]],["result"]]],[11,"is_router_mandatory","","",9,[[["self"]],["result",["bool"]]]],[11,"set_router_mandatory","","",9,[[["self"],["bool"]],["result"]]],[11,"is_curve_server","","",9,[[["self"]],["result",["bool"]]]],[11,"set_curve_server","","",9,[[["self"],["bool"]],["result"]]],[11,"get_socket_type","","Return the type of this socket.",9,[[["self"]],["result",["sockettype"]]]],[11,"get_rcvmore","","Return true if there are more frames of a multipart message to receive.",9,[[["self"]],["result",["bool"]]]],[11,"get_maxmsgsize","","",9,[[["self"]],["result",["i64"]]]],[11,"set_maxmsgsize","","",9,[[["self"],["i64"]],["result"]]],[11,"get_sndhwm","","",9,[[["self"]],["result",["i32"]]]],[11,"set_sndhwm","","",9,[[["self"],["i32"]],["result"]]],[11,"get_rcvhwm","","",9,[[["self"]],["result",["i32"]]]],[11,"set_rcvhwm","","",9,[[["self"],["i32"]],["result"]]],[11,"get_affinity","","",9,[[["self"]],["result",["u64"]]]],[11,"set_affinity","","",9,[[["self"],["u64"]],["result"]]],[11,"get_rate","","",9,[[["self"]],["result",["i32"]]]],[11,"set_rate","","",9,[[["self"],["i32"]],["result"]]],[11,"get_recovery_ivl","","",9,[[["self"]],["result",["i32"]]]],[11,"set_recovery_ivl","","",9,[[["self"],["i32"]],["result"]]],[11,"get_sndbuf","","",9,[[["self"]],["result",["i32"]]]],[11,"set_sndbuf","","",9,[[["self"],["i32"]],["result"]]],[11,"get_rcvbuf","","",9,[[["self"]],["result",["i32"]]]],[11,"set_rcvbuf","","",9,[[["self"],["i32"]],["result"]]],[11,"get_tos","","",9,[[["self"]],["result",["i32"]]]],[11,"set_tos","","",9,[[["self"],["i32"]],["result"]]],[11,"get_linger","","",9,[[["self"]],["result",["i32"]]]],[11,"set_linger","","",9,[[["self"],["i32"]],["result"]]],[11,"get_reconnect_ivl","","",9,[[["self"]],["result",["i32"]]]],[11,"set_reconnect_ivl","","",9,[[["self"],["i32"]],["result"]]],[11,"get_reconnect_ivl_max","","",9,[[["self"]],["result",["i32"]]]],[11,"set_reconnect_ivl_max","","",9,[[["self"],["i32"]],["result"]]],[11,"get_backlog","","",9,[[["self"]],["result",["i32"]]]],[11,"set_backlog","","",9,[[["self"],["i32"]],["result"]]],[11,"get_fd","","Get the event notification file descriptor.",9,[[["self"]],["result",["rawfd"]]]],[11,"get_events","","Get the currently pending events.",9,[[["self"]],["result",["i32"]]]],[11,"get_multicast_hops","","",9,[[["self"]],["result",["i32"]]]],[11,"set_multicast_hops","","",9,[[["self"],["i32"]],["result"]]],[11,"get_rcvtimeo","","",9,[[["self"]],["result",["i32"]]]],[11,"set_rcvtimeo","","",9,[[["self"],["i32"]],["result"]]],[11,"get_sndtimeo","","",9,[[["self"]],["result",["i32"]]]],[11,"set_sndtimeo","","",9,[[["self"],["i32"]],["result"]]],[11,"get_tcp_keepalive","","",9,[[["self"]],["result",["i32"]]]],[11,"set_tcp_keepalive","","",9,[[["self"],["i32"]],["result"]]],[11,"get_tcp_keepalive_cnt","","",9,[[["self"]],["result",["i32"]]]],[11,"set_tcp_keepalive_cnt","","",9,[[["self"],["i32"]],["result"]]],[11,"get_tcp_keepalive_idle","","",9,[[["self"]],["result",["i32"]]]],[11,"set_tcp_keepalive_idle","","",9,[[["self"],["i32"]],["result"]]],[11,"get_tcp_keepalive_intvl","","",9,[[["self"]],["result",["i32"]]]],[11,"set_tcp_keepalive_intvl","","",9,[[["self"],["i32"]],["result"]]],[11,"get_handshake_ivl","","",9,[[["self"]],["result",["i32"]]]],[11,"set_handshake_ivl","","",9,[[["self"],["i32"]],["result"]]],[11,"set_identity","","",9,N],[11,"set_subscribe","","",9,N],[11,"set_unsubscribe","","",9,N],[11,"get_identity","","",9,[[["self"]],["result",["result"]]]],[11,"get_socks_proxy","","",9,[[["self"]],["result",["result"]]]],[11,"get_mechanism","","",9,[[["self"]],["result",["mechanism"]]]],[11,"get_plain_username","","",9,[[["self"]],["result",["result"]]]],[11,"get_plain_password","","",9,[[["self"]],["result",["result"]]]],[11,"get_zap_domain","","",9,[[["self"]],["result",["result"]]]],[11,"get_last_endpoint","","Return the address of the last endpoint this socket was bound to.",9,[[["self"]],["result",["result"]]]],[11,"get_curve_publickey","","",9,[[["self"]],["result",["result"]]]],[11,"get_curve_secretkey","","",9,[[["self"]],["result",["result"]]]],[11,"get_curve_serverkey","","",9,[[["self"]],["result",["result"]]]],[11,"set_socks_proxy","","",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_plain_username","","",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_plain_password","","",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_zap_domain","","",9,[[["self"],["str"]],["result"]]],[11,"set_curve_publickey","","",9,[[["self"],["str"]],["result"]]],[11,"set_curve_secretkey","","",9,[[["self"],["str"]],["result"]]],[11,"set_curve_serverkey","","",9,[[["self"],["str"]],["result"]]],[11,"as_poll_item","","Create a `PollItem` from the socket.",9,[[["self"],["pollevents"]],["pollitem"]]],[11,"poll","","Do a call to `zmq_poll` with only this socket.",9,[[["self"],["pollevents"],["i64"]],["result",["i32"]]]],[11,"from_fd","","Construct a PollItem from a non-0MQ socket, given by its file descriptor.",10,[[["rawfd"]],["pollitem"]]],[11,"get_revents","","Retrieve the events that occurred for this handle.",10,[[["self"]],["pollevents"]]],[11,"is_readable","","Returns true if the polled socket has messages ready to receive.",10,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the polled socket can accept messages to be sent without blocking.",10,[[["self"]],["bool"]]],[11,"is_error","","Returns true if the polled socket encountered an error condition.",10,[[["self"]],["bool"]]],[11,"new","","Create a new key pair.",0,[[],["result",["curvekeypair"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["sockettype"]]],[11,"clone","","",2,[[["self"]],["constants"]]],[11,"clone","","",3,[[["self"]],["mechanism"]]],[11,"clone","","",4,[[["self"]],["error"]]],[11,"clone","","",8,[[["self"]],["context"]]],[11,"from","","",5,[[["fromutf8error"]],["self"]]],[11,"from","","",6,[[["nulerror"]],["self"]]],[11,"drop","","",7,[[["self"]]]],[11,"drop","","",9,[[["self"]]]],[11,"default","","",8,[[],["self"]]],[11,"eq","","",7,[[["self"],["message"]],["bool"]]],[11,"eq","","",1,[[["self"],["sockettype"]],["bool"]]],[11,"eq","","",2,[[["self"],["constants"]],["bool"]]],[11,"eq","","",3,[[["self"],["mechanism"]],["bool"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"deref","","",7,N],[11,"deref_mut","","",7,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Return the error string for an error.",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"description","","",6,[[["self"]],["str"]]]],"paths":[[3,"CurveKeyPair"],[4,"SocketType"],[4,"Constants"],[4,"Mechanism"],[4,"Error"],[4,"EncodeError"],[4,"DecodeError"],[3,"Message"],[3,"Context"],[3,"Socket"],[3,"PollItem"]]};
searchIndex["zmq_sys"]={"doc":"","items":[[6,"RawFd","zmq_sys","Raw file descriptors.",N,N],[5,"zmq_version","","",N,N],[5,"zmq_errno","","",N,N],[5,"zmq_strerror","","",N,N],[5,"zmq_ctx_new","","",N,N],[5,"zmq_ctx_term","","",N,N],[5,"zmq_ctx_shutdown","","",N,N],[5,"zmq_ctx_set","","",N,N],[5,"zmq_ctx_get","","",N,N],[5,"zmq_init","","",N,N],[5,"zmq_term","","",N,N],[5,"zmq_ctx_destroy","","",N,N],[5,"zmq_msg_init","","",N,N],[5,"zmq_msg_init_size","","",N,N],[5,"zmq_msg_init_data","","",N,N],[5,"zmq_msg_send","","",N,N],[5,"zmq_msg_recv","","",N,N],[5,"zmq_msg_close","","",N,N],[5,"zmq_msg_move","","",N,N],[5,"zmq_msg_copy","","",N,N],[5,"zmq_msg_data","","",N,N],[5,"zmq_msg_size","","",N,N],[5,"zmq_msg_more","","",N,N],[5,"zmq_msg_get","","",N,N],[5,"zmq_msg_set","","",N,N],[5,"zmq_msg_gets","","",N,N],[5,"zmq_socket","","",N,N],[5,"zmq_close","","",N,N],[5,"zmq_setsockopt","","",N,N],[5,"zmq_getsockopt","","",N,N],[5,"zmq_bind","","",N,N],[5,"zmq_connect","","",N,N],[5,"zmq_unbind","","",N,N],[5,"zmq_disconnect","","",N,N],[5,"zmq_send","","",N,N],[5,"zmq_send_const","","",N,N],[5,"zmq_recv","","",N,N],[5,"zmq_socket_monitor","","",N,N],[5,"zmq_sendmsg","","",N,N],[5,"zmq_recvmsg","","",N,N],[5,"zmq_sendiov","","",N,N],[5,"zmq_recviov","","",N,N],[5,"zmq_poll","","",N,N],[5,"zmq_proxy","","",N,N],[5,"zmq_proxy_steerable","","",N,N],[5,"zmq_has","","",N,N],[5,"zmq_device","","",N,N],[5,"zmq_z85_encode","","",N,N],[5,"zmq_z85_decode","","",N,N],[5,"zmq_curve_keypair","","",N,N],[5,"zmq_stopwatch_start","","",N,N],[5,"zmq_stopwatch_stop","","",N,N],[5,"zmq_sleep","","",N,N],[5,"zmq_threadstart","","",N,N],[5,"zmq_threadclose","","",N,N],[0,"errno","","",N,N],[17,"EACCES","zmq_sys::errno","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EAGAIN","","",N,N],[17,"EBUSY","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EFAULT","","",N,N],[17,"EINTR","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"EINVAL","","",N,N],[17,"EMFILE","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOENT","","",N,N],[17,"ENOMEM","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EPROTO","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ENOTSUP","","",N,N],[17,"ENOBUFS","","",N,N],[17,"ENETDOWN","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"EFSM","","",N,N],[17,"ENOCOMPATPROTO","","",N,N],[17,"ETERM","","",N,N],[17,"EMTHREAD","","",N,N],[6,"zmq_msg_t","zmq_sys","",N,N],[6,"zmq_free_fn","","",N,N],[6,"zmq_pollitem_t","","",N,N]],"paths":[]};
initSearch(searchIndex);
