initSidebarItems({"enum":[["BundleOnClose",""],["EntryAction",""],["EntryLifecycle",""],["LinkAction",""],["ValidationPackageDefinition",""]],"fn":[["call","Call an exposed function from another zome. Arguments for the called function are passed as `serde_json::Value`. Returns the value that's returned by the given function as a json str. # Examples In order to utilize `call`, you must have at least two separate Zomes. Here are two Zome examples, where one performs a `call` into the other."],["close_bundle","Not Yet Available"],["commit_entry","Attempts to commit an entry to your local source chain. The entry will have to pass the defined validation rules for that entry type. If the entry type is defined as public, will also publish the entry to the DHT. Returns either an address of the committed entry as a string, or an error. # Examples `rust pub fn handle_create_post(content: String) -> serde_json::Value { let maybe_address = hdk::commit_entry(\"post\", json!({ \"content\": content, \"date_created\": \"now\" })); match maybe_address { Ok(post_address) => json!({\"address\": post_address}), Err(hdk_error) => hdk_error.to_json(), } }`"],["debug","Prints a string through the stdout of the running service, and also writes that string to the logger in the execution context # Examples `rust pub fn handle_some_function(content: String) -> serde_json::Value { // ... hdk::debug(\"write a message to the logs\"); // ... }`"],["get_entry","Retrieves an entry from the local chain or the DHT, by looking it up using its address. # Examples `rust pub fn handle_get_post(post_address: HashString) -> serde_json::Value { // get_entry returns a Result<Option<T>, ZomeApiError> // where T is the type that you used to commit the entry, in this case a Blog // It's a ZomeApiError if something went wrong (i.e. wrong type in deserialization) // Otherwise its a Some(T) or a None let result : Result<Option<Post>,ZomeApiError> = hdk::get_entry(post_address); match result { // In the case we don't get an error // it might be an entry ... Ok(Some(post)) => json!(post), Ok(None) => json!({}), Err(err) => json!({\"error deserializing post\": err.to_string()}), } }`"],["get_entry_result","Retrieves an entry and meta data from the local chain or the DHT, by looking it up using its address, and a the full options to specify exactly what data to return"],["get_links","Consumes two values, the first of which is the address of an entry, `base`, and the second of which is a string, `tag`, used to describe the relationship between the `base` and other entries you wish to lookup. Returns a list of addresses of other entries which matched as being linked by the given `tag`. Links are created in the first place using the Zome API function link_entries. Once you have the addresses, there is a good likelihood that you will wish to call get_entry for each of them. # Examples `rust pub fn handle_posts_by_agent(agent: HashString) -> serde_json::Value { match hdk::get_links(&agent, \"authored_posts\") { Ok(result) => json!({\"post_addresses\": result.links}), Err(hdk_error) => hdk_error.to_json(), } }`"],["hash_entry","Reconstructs an address of the given entry data. This is the same value that would be returned if `entry_type_name` and `entry_value` were passed to the commit_entry function and by which it would be retrievable from the DHT using get_entry. This is often used to reconstruct an address of a `base` argument when calling get_links. # Examples `rust fn handle_hash_post(content: String) -> serde_json::Value { let maybe_address = hdk::hash_entry(\"post\", json!({ \"content\": content, \"date_created\": \"now\" })); match maybe_address { Ok(address) => { json!({\"address\": address}) } Err(hdk_error) => hdk_error.to_json(), } }`"],["link_entries","Consumes three values, two of which are the addresses of entries, and one of which is a string that defines a relationship between them, called a `tag`. Later, lists of entries can be looked up by using get_links. Entries can only be looked up in the direction from the `base`, which is the first argument, to the `target`. # Examples `rust pub fn handle_create_post(content: String) -> serde_json::Value { let maybe_address = hdk::commit_entry(\"post\", json!({ \"content\": content, \"date_created\": \"now\" })); match maybe_address { Ok(post_address) => { let link_result = hdk::link_entries( &HashString::from(AGENT_ADDRESS.to_string()), &post_address, \"authored_posts\" ); if link_result.is_err() { return json!({\"link error\": link_result.err().unwrap()}) } json!({\"address\": post_address}) } Err(hdk_error) => hdk_error.to_json(), } }`"],["property","Not Yet Available"],["query","Returns a list of entries from your local source chain, that match a given type. - entry_type_name: Specify type of entry to retrieve - limit: Max number of entries to retrieve, with `0` indicating unlimited"],["remove_entry","Not Yet Available"],["send","Not Yet Available"],["sign","Not Yet Available"],["start_bundle","Not Yet Available"],["update_agent","Not Yet Available"],["update_entry","Not Yet Available"],["verify_signature","Not Yet Available"]],"macro":[["define_zome","Every Zome must utilize the `define_zome` macro in the main library file in their Zome. The `define_zome` macro has 3 component parts: 1. entries: an array of ValidatingEntryType as returned by using the entry macro 2. genesis: `genesis` is a callback called by Holochain to every Zome implemented within a DNA.      It gets called when a new agent is initializing an instance of the DNA for the first time, and     should return `Ok` or an `Err`, depending on whether the agent can join the network or not. 3. functions: `functions` is divided up into `capabilities`, which specify who can access those functions.     `functions` must be a tree structure where the first children are `capabilities`     and the children of those `capabilities` are actual function definitions. # Examples"],["entry","The `entry` macro is a helper for creating `ValidatingEntryType` definitions for use within the define_zome macro. It has 6 component parts: 1. name: `name` is simply the descriptive name of the entry type, such as \"post\", or \"user\".      It is what must be given as the `entry_type_name` argument when calling commit_entry and the other data read/write functions. 2. description: `description` is something that is primarily for human readers of your code, just describe this entry type 3. sharing: `sharing` defines what distribution over the DHT, or not, occurs with entries of this type, possible values      are defined in the Sharing enum 4. native_type: `native_type` references a given Rust struct, which provides a clear schema for entries of this type. 5. validation_package: `validation_package` is a special identifier, which declares which data is required from peers      when attempting to validate entries of this type.      Possible values are found within ValidationPackageDefinition 6. validation: `validation` is a callback function which will be called any time that a       source chain action is taken relating to this entry type, such as commit_entry, update_entry, remove_entry.      It always expects two arguments, the first of which is the entry attempting to be validated,      the second is the validation `context`, which offers a variety of metadata useful for validation. # Examples The following is a standalone Rust file that exports a function which can be called to get a `ValidatingEntryType` of a \"post\". ```rust use boolinator::*; use hdk::{   self,   entry_definition::ValidatingEntryType,   holochain_dna::zome::entry_types::Sharing }; use serde_json;"]],"mod":[["entry_definition",""],["error",""],["global_fns",""],["globals","Holds the internal/private globals used by the zome api library. Also contains the functions declarations of the external functions provided by the Ribosome."],["init_globals","Holds the internal/private zome API function `init_globals` which initializes the Zome API Globals with the values it receives from the Ribosome. It is automatically called at startup of each Zome function call."],["macros",""],["meta",""]],"struct":[["AGENT_ADDRESS","The hash of your public key. This is your node address on the DHT. It can be used for node-to-node messaging with `send` and `receive` functions."],["AGENT_ID_STR","The identity string used when the chain was first initialized."],["AGENT_INITIAL_HASH","The hash of the first identity entry on your chain (The second entry on your chain). This is your peer's identity on the DHT."],["DNA_HASH","The hash of the DNA the Zome is embedded within. This is often useful as a fixed value that is known by all participants running the DNA."],["DNA_NAME","The `name` property as taken from the DNA."],["EntryStatus",""],["EntryValidationArgs",""],["GetEntryMask",""],["ValidationData",""],["ValidationPackage",""]]});